
Project_Laboratory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008468  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08008608  08008608  00009608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e4  080086e4  0000a2cc  2**0
                  CONTENTS
  4 .ARM          00000008  080086e4  080086e4  000096e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086ec  080086ec  0000a2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086ec  080086ec  000096ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086f0  080086f0  000096f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  080086f4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f58  200002cc  080089c0  0000a2cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001224  080089c0  0000b224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010420  00000000  00000000  0000a2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003459  00000000  00000000  0001a71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0001db78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000954  00000000  00000000  0001e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bab  00000000  00000000  0001f184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001305f  00000000  00000000  00037d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008770e  00000000  00000000  0004ad8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d249c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000370c  00000000  00000000  000d24e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d5bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085f0 	.word	0x080085f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	080085f0 	.word	0x080085f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <MX_GPIO_Init+0xb4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a25      	ldr	r2, [pc, #148]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a17      	ldr	r2, [pc, #92]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f0:	4811      	ldr	r0, [pc, #68]	@ (8000638 <MX_GPIO_Init+0xb8>)
 80005f2:	f001 f889 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	4619      	mov	r1, r3
 800060e:	480a      	ldr	r0, [pc, #40]	@ (8000638 <MX_GPIO_Init+0xb8>)
 8000610:	f000 fede 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 8000614:	2301      	movs	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061c:	2301      	movs	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_GPIO_Init+0xbc>)
 8000628:	f000 fed2 	bl	80013d0 <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40020800 	.word	0x40020800
 800063c:	40020000 	.word	0x40020000

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fd1b 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f82d 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f7ff ff97 	bl	8000580 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000652:	f000 fc69 	bl	8000f28 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000656:	f004 fa3b 	bl	8004ad0 <MX_USB_DEVICE_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <main+0x58>)
 8000662:	f001 f851 	bl	8001708 <HAL_GPIO_WritePin>
  GPIO_PinState button;
  char* message = "Tudok stringet convertalni. Wuhu\n";
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <main+0x5c>)
 8000668:	607b      	str	r3, [r7, #4]

  HAL_Delay(3000);
 800066a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800066e:	f000 fd79 	bl	8001164 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 8000672:	2101      	movs	r1, #1
 8000674:	480a      	ldr	r0, [pc, #40]	@ (80006a0 <main+0x60>)
 8000676:	f001 f82f 	bl	80016d8 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	70fb      	strb	r3, [r7, #3]

	  if (button == is_pushed)
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <main+0x64>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	78fa      	ldrb	r2, [r7, #3]
 8000684:	429a      	cmp	r2, r3
 8000686:	d1f4      	bne.n	8000672 <main+0x32>
	  {
		  send_message(message);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f879 	bl	8000780 <send_message>
		  USBD_Delay(500);
 800068e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000692:	f000 fd67 	bl	8001164 <HAL_Delay>
	  button = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 8000696:	e7ec      	b.n	8000672 <main+0x32>
 8000698:	40020800 	.word	0x40020800
 800069c:	08008608 	.word	0x08008608
 80006a0:	40020000 	.word	0x40020000
 80006a4:	200002e9 	.word	0x200002e9

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	@ 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f007 fb1a 	bl	8007cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <SystemClock_Config+0xd0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a28      	ldr	r2, [pc, #160]	@ (8000778 <SystemClock_Config+0xd0>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
 80006dc:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <SystemClock_Config+0xd0>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b23      	ldr	r3, [pc, #140]	@ (800077c <SystemClock_Config+0xd4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f4:	4a21      	ldr	r2, [pc, #132]	@ (800077c <SystemClock_Config+0xd4>)
 80006f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <SystemClock_Config+0xd4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800071c:	2319      	movs	r3, #25
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000720:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000724:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000726:	2304      	movs	r3, #4
 8000728:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800072a:	2307      	movs	r3, #7
 800072c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fa54 	bl	8002be0 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073e:	f000 fb43 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fcb6 	bl	80030d0 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800076a:	f000 fb2d 	bl	8000dc8 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	@ 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <send_message>:

/* USER CODE BEGIN 4 */
void send_message(char* message)
{
 8000780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000784:	b08b      	sub	sp, #44	@ 0x2c
 8000786:	af00      	add	r7, sp, #0
 8000788:	60f8      	str	r0, [r7, #12]
 800078a:	466b      	mov	r3, sp
 800078c:	461e      	mov	r6, r3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_set);
 800078e:	4b54      	ldr	r3, [pc, #336]	@ (80008e0 <send_message+0x160>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000798:	4852      	ldr	r0, [pc, #328]	@ (80008e4 <send_message+0x164>)
 800079a:	f000 ffb5 	bl	8001708 <HAL_GPIO_WritePin>

	int length = strlen(message);
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f7ff fd1e 	bl	80001e0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	623b      	str	r3, [r7, #32]
	int t[length+1];
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	1c59      	adds	r1, r3, #1
 80007ac:	1e4b      	subs	r3, r1, #1
 80007ae:	61fb      	str	r3, [r7, #28]
 80007b0:	460a      	mov	r2, r1
 80007b2:	2300      	movs	r3, #0
 80007b4:	603a      	str	r2, [r7, #0]
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	f04f 0200 	mov.w	r2, #0
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	0143      	lsls	r3, r0, #5
 80007c4:	6838      	ldr	r0, [r7, #0]
 80007c6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007ca:	6838      	ldr	r0, [r7, #0]
 80007cc:	0142      	lsls	r2, r0, #5
 80007ce:	460a      	mov	r2, r1
 80007d0:	2300      	movs	r3, #0
 80007d2:	4692      	mov	sl, r2
 80007d4:	469b      	mov	fp, r3
 80007d6:	f04f 0200 	mov.w	r2, #0
 80007da:	f04f 0300 	mov.w	r3, #0
 80007de:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80007e2:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80007e6:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80007ea:	460b      	mov	r3, r1
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	3307      	adds	r3, #7
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	ebad 0d03 	sub.w	sp, sp, r3
 80007f8:	466b      	mov	r3, sp
 80007fa:	3303      	adds	r3, #3
 80007fc:	089b      	lsrs	r3, r3, #2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	61bb      	str	r3, [r7, #24]
	bool is_bigletter[length+1];
 8000802:	6a3b      	ldr	r3, [r7, #32]
 8000804:	1c59      	adds	r1, r3, #1
 8000806:	1e4b      	subs	r3, r1, #1
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	460a      	mov	r2, r1
 800080c:	2300      	movs	r3, #0
 800080e:	4690      	mov	r8, r2
 8000810:	4699      	mov	r9, r3
 8000812:	f04f 0200 	mov.w	r2, #0
 8000816:	f04f 0300 	mov.w	r3, #0
 800081a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800081e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000826:	460a      	mov	r2, r1
 8000828:	2300      	movs	r3, #0
 800082a:	4614      	mov	r4, r2
 800082c:	461d      	mov	r5, r3
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	f04f 0300 	mov.w	r3, #0
 8000836:	00eb      	lsls	r3, r5, #3
 8000838:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800083c:	00e2      	lsls	r2, r4, #3
 800083e:	460b      	mov	r3, r1
 8000840:	3307      	adds	r3, #7
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	ebad 0d03 	sub.w	sp, sp, r3
 800084a:	466b      	mov	r3, sp
 800084c:	3300      	adds	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
	convert_message(message, t, is_bigletter);
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	69b9      	ldr	r1, [r7, #24]
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f000 f84f 	bl	80008f8 <convert_message>
	for(int i=0; i<length+1;++i)
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
 800085e:	e02d      	b.n	80008bc <send_message+0x13c>
	{
		if(i!=0 && t[i-1]=='\n')
 8000860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000862:	2b00      	cmp	r3, #0
 8000864:	d009      	beq.n	800087a <send_message+0xfa>
 8000866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000870:	2b0a      	cmp	r3, #10
 8000872:	d102      	bne.n	800087a <send_message+0xfa>
			USBD_Delay(50);
 8000874:	2032      	movs	r0, #50	@ 0x32
 8000876:	f000 fc75 	bl	8001164 <HAL_Delay>

		report[2] = t[i];
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800087e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <send_message+0x168>)
 8000886:	709a      	strb	r2, [r3, #2]
		if(is_bigletter[i])
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <send_message+0x11c>
			report[0] = 0x02;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <send_message+0x168>)
 8000896:	2202      	movs	r2, #2
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	e002      	b.n	80008a2 <send_message+0x122>
		else
			report[0] = 0x00;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <send_message+0x168>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]

		USBD_HID_Keybaord_SendReport(&hUsbDevice, report, len);
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <send_message+0x16c>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	490f      	ldr	r1, [pc, #60]	@ (80008e8 <send_message+0x168>)
 80008aa:	4811      	ldr	r0, [pc, #68]	@ (80008f0 <send_message+0x170>)
 80008ac:	f005 fd28 	bl	8006300 <USBD_HID_Keybaord_SendReport>
		USBD_Delay(150);
 80008b0:	2096      	movs	r0, #150	@ 0x96
 80008b2:	f000 fc57 	bl	8001164 <HAL_Delay>
	for(int i=0; i<length+1;++i)
 80008b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008b8:	3301      	adds	r3, #1
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80008bc:	6a3a      	ldr	r2, [r7, #32]
 80008be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dacd      	bge.n	8000860 <send_message+0xe0>
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_reset);
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <send_message+0x174>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <send_message+0x164>)
 80008d0:	f000 ff1a 	bl	8001708 <HAL_GPIO_WritePin>
 80008d4:	46b5      	mov	sp, r6
}
 80008d6:	bf00      	nop
 80008d8:	372c      	adds	r7, #44	@ 0x2c
 80008da:	46bd      	mov	sp, r7
 80008dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008e0:	200002e8 	.word	0x200002e8
 80008e4:	40020800 	.word	0x40020800
 80008e8:	200002ec 	.word	0x200002ec
 80008ec:	20000002 	.word	0x20000002
 80008f0:	200007e0 	.word	0x200007e0
 80008f4:	20000000 	.word	0x20000000

080008f8 <convert_message>:

int* convert_message(char* message, int *t, bool* is_bigletter)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	int length = strlen(message);
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff fc6b 	bl	80001e0 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	613b      	str	r3, [r7, #16]

	for(int i=0; i<length; ++i)
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	e248      	b.n	8000da6 <convert_message+0x4ae>
	{
		is_bigletter[i] = false;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
		switch (message[i])
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	3b0a      	subs	r3, #10
 8000928:	2b70      	cmp	r3, #112	@ 0x70
 800092a:	f200 8232 	bhi.w	8000d92 <convert_message+0x49a>
 800092e:	a201      	add	r2, pc, #4	@ (adr r2, 8000934 <convert_message+0x3c>)
 8000930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000934:	08000d69 	.word	0x08000d69
 8000938:	08000d93 	.word	0x08000d93
 800093c:	08000d93 	.word	0x08000d93
 8000940:	08000d93 	.word	0x08000d93
 8000944:	08000d93 	.word	0x08000d93
 8000948:	08000d93 	.word	0x08000d93
 800094c:	08000d93 	.word	0x08000d93
 8000950:	08000d93 	.word	0x08000d93
 8000954:	08000d93 	.word	0x08000d93
 8000958:	08000d93 	.word	0x08000d93
 800095c:	08000d93 	.word	0x08000d93
 8000960:	08000d93 	.word	0x08000d93
 8000964:	08000d93 	.word	0x08000d93
 8000968:	08000d93 	.word	0x08000d93
 800096c:	08000d93 	.word	0x08000d93
 8000970:	08000d93 	.word	0x08000d93
 8000974:	08000d93 	.word	0x08000d93
 8000978:	08000d93 	.word	0x08000d93
 800097c:	08000d93 	.word	0x08000d93
 8000980:	08000d93 	.word	0x08000d93
 8000984:	08000d93 	.word	0x08000d93
 8000988:	08000d93 	.word	0x08000d93
 800098c:	08000d77 	.word	0x08000d77
 8000990:	08000d93 	.word	0x08000d93
 8000994:	08000d93 	.word	0x08000d93
 8000998:	08000d93 	.word	0x08000d93
 800099c:	08000d93 	.word	0x08000d93
 80009a0:	08000d93 	.word	0x08000d93
 80009a4:	08000d93 	.word	0x08000d93
 80009a8:	08000d93 	.word	0x08000d93
 80009ac:	08000d93 	.word	0x08000d93
 80009b0:	08000d93 	.word	0x08000d93
 80009b4:	08000d93 	.word	0x08000d93
 80009b8:	08000d93 	.word	0x08000d93
 80009bc:	08000d93 	.word	0x08000d93
 80009c0:	08000d93 	.word	0x08000d93
 80009c4:	08000d85 	.word	0x08000d85
 80009c8:	08000d93 	.word	0x08000d93
 80009cc:	08000d93 	.word	0x08000d93
 80009d0:	08000d93 	.word	0x08000d93
 80009d4:	08000d93 	.word	0x08000d93
 80009d8:	08000d93 	.word	0x08000d93
 80009dc:	08000d93 	.word	0x08000d93
 80009e0:	08000d93 	.word	0x08000d93
 80009e4:	08000d93 	.word	0x08000d93
 80009e8:	08000d93 	.word	0x08000d93
 80009ec:	08000d93 	.word	0x08000d93
 80009f0:	08000d93 	.word	0x08000d93
 80009f4:	08000d93 	.word	0x08000d93
 80009f8:	08000d93 	.word	0x08000d93
 80009fc:	08000d93 	.word	0x08000d93
 8000a00:	08000d93 	.word	0x08000d93
 8000a04:	08000d93 	.word	0x08000d93
 8000a08:	08000d93 	.word	0x08000d93
 8000a0c:	08000d93 	.word	0x08000d93
 8000a10:	08000af9 	.word	0x08000af9
 8000a14:	08000b11 	.word	0x08000b11
 8000a18:	08000b29 	.word	0x08000b29
 8000a1c:	08000b41 	.word	0x08000b41
 8000a20:	08000b59 	.word	0x08000b59
 8000a24:	08000b71 	.word	0x08000b71
 8000a28:	08000b89 	.word	0x08000b89
 8000a2c:	08000ba1 	.word	0x08000ba1
 8000a30:	08000bb9 	.word	0x08000bb9
 8000a34:	08000bd1 	.word	0x08000bd1
 8000a38:	08000be9 	.word	0x08000be9
 8000a3c:	08000c01 	.word	0x08000c01
 8000a40:	08000c19 	.word	0x08000c19
 8000a44:	08000c31 	.word	0x08000c31
 8000a48:	08000c49 	.word	0x08000c49
 8000a4c:	08000c61 	.word	0x08000c61
 8000a50:	08000c79 	.word	0x08000c79
 8000a54:	08000c91 	.word	0x08000c91
 8000a58:	08000ca9 	.word	0x08000ca9
 8000a5c:	08000cc1 	.word	0x08000cc1
 8000a60:	08000cd9 	.word	0x08000cd9
 8000a64:	08000cf1 	.word	0x08000cf1
 8000a68:	08000d09 	.word	0x08000d09
 8000a6c:	08000d21 	.word	0x08000d21
 8000a70:	08000d39 	.word	0x08000d39
 8000a74:	08000d51 	.word	0x08000d51
 8000a78:	08000d93 	.word	0x08000d93
 8000a7c:	08000d93 	.word	0x08000d93
 8000a80:	08000d93 	.word	0x08000d93
 8000a84:	08000d93 	.word	0x08000d93
 8000a88:	08000d93 	.word	0x08000d93
 8000a8c:	08000d93 	.word	0x08000d93
 8000a90:	08000b03 	.word	0x08000b03
 8000a94:	08000b1b 	.word	0x08000b1b
 8000a98:	08000b33 	.word	0x08000b33
 8000a9c:	08000b4b 	.word	0x08000b4b
 8000aa0:	08000b63 	.word	0x08000b63
 8000aa4:	08000b7b 	.word	0x08000b7b
 8000aa8:	08000b93 	.word	0x08000b93
 8000aac:	08000bab 	.word	0x08000bab
 8000ab0:	08000bc3 	.word	0x08000bc3
 8000ab4:	08000bdb 	.word	0x08000bdb
 8000ab8:	08000bf3 	.word	0x08000bf3
 8000abc:	08000c0b 	.word	0x08000c0b
 8000ac0:	08000c23 	.word	0x08000c23
 8000ac4:	08000c3b 	.word	0x08000c3b
 8000ac8:	08000c53 	.word	0x08000c53
 8000acc:	08000c6b 	.word	0x08000c6b
 8000ad0:	08000c83 	.word	0x08000c83
 8000ad4:	08000c9b 	.word	0x08000c9b
 8000ad8:	08000cb3 	.word	0x08000cb3
 8000adc:	08000ccb 	.word	0x08000ccb
 8000ae0:	08000ce3 	.word	0x08000ce3
 8000ae4:	08000cfb 	.word	0x08000cfb
 8000ae8:	08000d13 	.word	0x08000d13
 8000aec:	08000d2b 	.word	0x08000d2b
 8000af0:	08000d43 	.word	0x08000d43
 8000af4:	08000d5b 	.word	0x08000d5b
		{
		    case 'A': is_bigletter[i] = true;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
		    case 'a': t[i] = 0x04; break;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	4413      	add	r3, r2
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e147      	b.n	8000da0 <convert_message+0x4a8>
		    case 'B': is_bigletter[i] = true;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
		    case 'b': t[i] = 0x05; break;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	4413      	add	r3, r2
 8000b22:	2205      	movs	r2, #5
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e13b      	b.n	8000da0 <convert_message+0x4a8>
		    case 'C': is_bigletter[i] = true;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
		    case 'c': t[i] = 0x06; break;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	4413      	add	r3, r2
 8000b3a:	2206      	movs	r2, #6
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e12f      	b.n	8000da0 <convert_message+0x4a8>
		    case 'D': is_bigletter[i] = true;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		    case 'd': t[i] = 0x07; break;
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	4413      	add	r3, r2
 8000b52:	2207      	movs	r2, #7
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e123      	b.n	8000da0 <convert_message+0x4a8>
		    case 'E': is_bigletter[i] = true;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
		    case 'e': t[i] = 0x08; break;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	4413      	add	r3, r2
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	e117      	b.n	8000da0 <convert_message+0x4a8>
		    case 'F': is_bigletter[i] = true;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
		    case 'f': t[i] = 0x09; break;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	4413      	add	r3, r2
 8000b82:	2209      	movs	r2, #9
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	e10b      	b.n	8000da0 <convert_message+0x4a8>
		    case 'G': is_bigletter[i] = true;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
		    case 'g': t[i] = 0x0a; break;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	4413      	add	r3, r2
 8000b9a:	220a      	movs	r2, #10
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	e0ff      	b.n	8000da0 <convert_message+0x4a8>
		    case 'H': is_bigletter[i] = true;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
		    case 'h': t[i] = 0x0b; break;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	220b      	movs	r2, #11
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e0f3      	b.n	8000da0 <convert_message+0x4a8>
		    case 'I': is_bigletter[i] = true;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
		    case 'i': t[i] = 0x0c; break;
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	4413      	add	r3, r2
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e0e7      	b.n	8000da0 <convert_message+0x4a8>
		    case 'J': is_bigletter[i] = true;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
		    case 'j': t[i] = 0x0d; break;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	4413      	add	r3, r2
 8000be2:	220d      	movs	r2, #13
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e0db      	b.n	8000da0 <convert_message+0x4a8>
		    case 'K': is_bigletter[i] = true;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
		    case 'k': t[i] = 0x0e; break;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	220e      	movs	r2, #14
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e0cf      	b.n	8000da0 <convert_message+0x4a8>
		    case 'L': is_bigletter[i] = true;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
		    case 'l': t[i] = 0x0f; break;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	4413      	add	r3, r2
 8000c12:	220f      	movs	r2, #15
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e0c3      	b.n	8000da0 <convert_message+0x4a8>
		    case 'M': is_bigletter[i] = true;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		    case 'm': t[i] = 0x10; break;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	4413      	add	r3, r2
 8000c2a:	2210      	movs	r2, #16
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	e0b7      	b.n	8000da0 <convert_message+0x4a8>
		    case 'N': is_bigletter[i] = true;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
		    case 'n': t[i] = 0x11; break;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	4413      	add	r3, r2
 8000c42:	2211      	movs	r2, #17
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e0ab      	b.n	8000da0 <convert_message+0x4a8>
		    case 'O': is_bigletter[i] = true;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
		    case 'o': t[i] = 0x12; break;
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	4413      	add	r3, r2
 8000c5a:	2212      	movs	r2, #18
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	e09f      	b.n	8000da0 <convert_message+0x4a8>
		    case 'P': is_bigletter[i] = true;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
		    case 'p': t[i] = 0x13; break;
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	4413      	add	r3, r2
 8000c72:	2213      	movs	r2, #19
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e093      	b.n	8000da0 <convert_message+0x4a8>
		    case 'Q': is_bigletter[i] = true;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
		    case 'q': t[i] = 0x14; break;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	4413      	add	r3, r2
 8000c8a:	2214      	movs	r2, #20
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e087      	b.n	8000da0 <convert_message+0x4a8>
		    case 'R': is_bigletter[i] = true;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
		    case 'r': t[i] = 0x15; break;
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	2215      	movs	r2, #21
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	e07b      	b.n	8000da0 <convert_message+0x4a8>
		    case 'S': is_bigletter[i] = true;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
		    case 's': t[i] = 0x16; break;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	4413      	add	r3, r2
 8000cba:	2216      	movs	r2, #22
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e06f      	b.n	8000da0 <convert_message+0x4a8>
		    case 'T': is_bigletter[i] = true;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
		    case 't': t[i] = 0x17; break;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	2217      	movs	r2, #23
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	e063      	b.n	8000da0 <convert_message+0x4a8>
		    case 'U': is_bigletter[i] = true;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
		    case 'u': t[i] = 0x18; break;
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	4413      	add	r3, r2
 8000cea:	2218      	movs	r2, #24
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	e057      	b.n	8000da0 <convert_message+0x4a8>
		    case 'V': is_bigletter[i] = true;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
		    case 'v': t[i] = 0x19; break;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	4413      	add	r3, r2
 8000d02:	2219      	movs	r2, #25
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e04b      	b.n	8000da0 <convert_message+0x4a8>
		    case 'W': is_bigletter[i] = true;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
		    case 'w': t[i] = 0x1a; break;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	4413      	add	r3, r2
 8000d1a:	221a      	movs	r2, #26
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	e03f      	b.n	8000da0 <convert_message+0x4a8>
		    case 'X': is_bigletter[i] = true;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
		    case 'x': t[i] = 0x1b; break;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	4413      	add	r3, r2
 8000d32:	221b      	movs	r2, #27
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e033      	b.n	8000da0 <convert_message+0x4a8>
		    case 'Y': is_bigletter[i] = true;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
		    case 'y': t[i] = 0x1d; break;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	4413      	add	r3, r2
 8000d4a:	221d      	movs	r2, #29
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e027      	b.n	8000da0 <convert_message+0x4a8>
		    case 'Z': is_bigletter[i] = true;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
		    case 'z': t[i] = 0x1c; break;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	4413      	add	r3, r2
 8000d62:	221c      	movs	r2, #28
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e01b      	b.n	8000da0 <convert_message+0x4a8>
		    case '\n': t[i] = 0x28; break;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	4413      	add	r3, r2
 8000d70:	2228      	movs	r2, #40	@ 0x28
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e014      	b.n	8000da0 <convert_message+0x4a8>
		    case ' ': t[i] = 0x2c; break;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	222c      	movs	r2, #44	@ 0x2c
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	e00d      	b.n	8000da0 <convert_message+0x4a8>
		    case '.': t[i] = 0x37; break;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	2237      	movs	r2, #55	@ 0x37
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e006      	b.n	8000da0 <convert_message+0x4a8>
		    default: t[i] = 0x00; break;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	4413      	add	r3, r2
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	bf00      	nop
	for(int i=0; i<length; ++i)
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	f6ff adb2 	blt.w	8000914 <convert_message+0x1c>
		}
	}

	t[length] = 0x00;
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	4413      	add	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]

	return t;
 8000dbc:	68bb      	ldr	r3, [r7, #8]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <NMI_Handler+0x4>

08000e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7a:	f000 f953 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <OTG_FS_IRQHandler+0x10>)
 8000e8a:	f000 fd9a 	bl	80019c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200002f8 	.word	0x200002f8

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f006 ff1a 	bl	8007d00 <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20010000 	.word	0x20010000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	200002f4 	.word	0x200002f4
 8000f00:	20001228 	.word	0x20001228

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f36:	2204      	movs	r2, #4
 8000f38:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f48:	2202      	movs	r2, #2
 8000f4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f58:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6c:	f000 fbe5 	bl	800173a <HAL_PCD_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f76:	f7ff ff27 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200002f8 	.word	0x200002f8

08000f84 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fa4:	d13a      	bne.n	800101c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b1e      	ldr	r3, [pc, #120]	@ (8001024 <HAL_PCD_MspInit+0xa0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a1d      	ldr	r2, [pc, #116]	@ (8001024 <HAL_PCD_MspInit+0xa0>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <HAL_PCD_MspInit+0xa0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fc2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4812      	ldr	r0, [pc, #72]	@ (8001028 <HAL_PCD_MspInit+0xa4>)
 8000fe0:	f000 f9f6 	bl	80013d0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_PCD_MspInit+0xa0>)
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <HAL_PCD_MspInit+0xa0>)
 8000fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fee:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <HAL_PCD_MspInit+0xa0>)
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_PCD_MspInit+0xa0>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_PCD_MspInit+0xa0>)
 8001002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	2043      	movs	r0, #67	@ 0x43
 8001012:	f000 f9a6 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001016:	2043      	movs	r0, #67	@ 0x43
 8001018:	f000 f9bf 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001064 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001030:	f7ff ff68 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001036:	490d      	ldr	r1, [pc, #52]	@ (800106c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001038:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800104c:	4c0a      	ldr	r4, [pc, #40]	@ (8001078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105a:	f006 fe57 	bl	8007d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff faef 	bl	8000640 <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001070:	080086f4 	.word	0x080086f4
  ldr r2, =_sbss
 8001074:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001078:	20001224 	.word	0x20001224

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>
	...

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001084:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <HAL_Init+0x40>)
 800108a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <HAL_Init+0x40>)
 8001096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800109a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a07      	ldr	r2, [pc, #28]	@ (80010c0 <HAL_Init+0x40>)
 80010a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f94f 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ae:	200f      	movs	r0, #15
 80010b0:	f000 f808 	bl	80010c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b4:	f7ff fe8e 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023c00 	.word	0x40023c00

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_InitTick+0x54>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_InitTick+0x58>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f967 	bl	80013b6 <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f92f 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <HAL_InitTick+0x5c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000004 	.word	0x20000004
 800111c:	2000000c 	.word	0x2000000c
 8001120:	20000008 	.word	0x20000008

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000000c 	.word	0x2000000c
 8001148:	200007dc 	.word	0x200007dc

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	200007dc 	.word	0x200007dc

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_Delay+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffde 	bl	800114c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000000c 	.word	0x2000000c

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	@ (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	@ (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	@ (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	@ 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	@ 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff29 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff3e 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff8e 	bl	80012a0 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5d 	bl	800124c <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff31 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e159      	b.n	80016a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	f040 8148 	bne.w	800169a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d005      	beq.n	8001422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	2b02      	cmp	r3, #2
 8001420:	d130      	bne.n	8001484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001458:	2201      	movs	r2, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 0201 	and.w	r2, r3, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b03      	cmp	r3, #3
 800148e:	d017      	beq.n	80014c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d123      	bne.n	8001514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	69b9      	ldr	r1, [r7, #24]
 8001510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0203 	and.w	r2, r3, #3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a2 	beq.w	800169a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b57      	ldr	r3, [pc, #348]	@ (80016b8 <HAL_GPIO_Init+0x2e8>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	4a56      	ldr	r2, [pc, #344]	@ (80016b8 <HAL_GPIO_Init+0x2e8>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001564:	6453      	str	r3, [r2, #68]	@ 0x44
 8001566:	4b54      	ldr	r3, [pc, #336]	@ (80016b8 <HAL_GPIO_Init+0x2e8>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001572:	4a52      	ldr	r2, [pc, #328]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a49      	ldr	r2, [pc, #292]	@ (80016c0 <HAL_GPIO_Init+0x2f0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x202>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a48      	ldr	r2, [pc, #288]	@ (80016c4 <HAL_GPIO_Init+0x2f4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x1fe>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a47      	ldr	r2, [pc, #284]	@ (80016c8 <HAL_GPIO_Init+0x2f8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x1fa>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a46      	ldr	r2, [pc, #280]	@ (80016cc <HAL_GPIO_Init+0x2fc>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x1f6>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a45      	ldr	r2, [pc, #276]	@ (80016d0 <HAL_GPIO_Init+0x300>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x1f2>
 80015be:	2304      	movs	r3, #4
 80015c0:	e008      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015c2:	2307      	movs	r3, #7
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015d2:	2300      	movs	r3, #0
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	f002 0203 	and.w	r2, r2, #3
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e4:	4935      	ldr	r1, [pc, #212]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f2:	4b38      	ldr	r3, [pc, #224]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001616:	4a2f      	ldr	r2, [pc, #188]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161c:	4b2d      	ldr	r3, [pc, #180]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001640:	4a24      	ldr	r2, [pc, #144]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001646:	4b23      	ldr	r3, [pc, #140]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166a:	4a1a      	ldr	r2, [pc, #104]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001670:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001694:	4a0f      	ldr	r2, [pc, #60]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3301      	adds	r3, #1
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	2b0f      	cmp	r3, #15
 80016a4:	f67f aea2 	bls.w	80013ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3724      	adds	r7, #36	@ 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40020800 	.word	0x40020800
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40013c00 	.word	0x40013c00

080016d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016f0:	2301      	movs	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	e001      	b.n	80016fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001724:	e003      	b.n	800172e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	041a      	lsls	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	619a      	str	r2, [r3, #24]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af02      	add	r7, sp, #8
 8001740:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e101      	b.n	8001950 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fc0c 	bl	8000f84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800177a:	d102      	bne.n	8001782 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f001 ff71 	bl	800366e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7c1a      	ldrb	r2, [r3, #16]
 8001794:	f88d 2000 	strb.w	r2, [sp]
 8001798:	3304      	adds	r3, #4
 800179a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179c:	f001 fe50 	bl	8003440 <USB_CoreInit>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e0ce      	b.n	8001950 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 ff69 	bl	8003690 <USB_SetCurrentMode>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0bf      	b.n	8001950 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e04a      	b.n	800186c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	3315      	adds	r3, #21
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	3314      	adds	r3, #20
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	b298      	uxth	r0, r3
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	332e      	adds	r3, #46	@ 0x2e
 8001812:	4602      	mov	r2, r0
 8001814:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	3318      	adds	r3, #24
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	331c      	adds	r3, #28
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	3320      	adds	r3, #32
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	3324      	adds	r3, #36	@ 0x24
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	3301      	adds	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	429a      	cmp	r2, r3
 8001874:	d3af      	bcc.n	80017d6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	e044      	b.n	8001906 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4413      	add	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	3301      	adds	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	791b      	ldrb	r3, [r3, #4]
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3b5      	bcc.n	800187c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7c1a      	ldrb	r2, [r3, #16]
 8001918:	f88d 2000 	strb.w	r2, [sp]
 800191c:	3304      	adds	r3, #4
 800191e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001920:	f001 ff02 	bl	8003728 <USB_DevInit>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00c      	b.n	8001950 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f002 ff4c 	bl	80047e6 <USB_DevDisconnect>

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_PCD_Start+0x1c>
 8001970:	2302      	movs	r3, #2
 8001972:	e022      	b.n	80019ba <HAL_PCD_Start+0x62>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001994:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 fe53 	bl	800364c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fefa 	bl	80047a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019c2:	b590      	push	{r4, r7, lr}
 80019c4:	b08d      	sub	sp, #52	@ 0x34
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 ffb8 	bl	800494e <USB_GetMode>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 848c 	bne.w	80022fe <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 ff1c 	bl	8004828 <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8482 	beq.w	80022fc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 ff09 	bl	8004828 <USB_ReadInterrupts>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d107      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f002 0202 	and.w	r2, r2, #2
 8001a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fef7 	bl	8004828 <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d161      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0210 	bic.w	r2, r2, #16
 8001a52:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	f003 020f 	and.w	r2, r3, #15
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	3304      	adds	r3, #4
 8001a72:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	0c5b      	lsrs	r3, r3, #17
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d124      	bne.n	8001aca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d035      	beq.n	8001af8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	6a38      	ldr	r0, [r7, #32]
 8001aa0:	f002 fd2e 	bl	8004500 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab0:	441a      	add	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ac2:	441a      	add	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	615a      	str	r2, [r3, #20]
 8001ac8:	e016      	b.n	8001af8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	0c5b      	lsrs	r3, r3, #17
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d110      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001adc:	2208      	movs	r2, #8
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6a38      	ldr	r0, [r7, #32]
 8001ae2:	f002 fd0d 	bl	8004500 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001af2:	441a      	add	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0210 	orr.w	r2, r2, #16
 8001b06:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fe8b 	bl	8004828 <USB_ReadInterrupts>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001b1c:	f040 80a7 	bne.w	8001c6e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 fe90 	bl	800484e <USB_ReadDevAllOutEpInterrupt>
 8001b2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001b30:	e099      	b.n	8001c66 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 808e 	beq.w	8001c5a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 feb4 	bl	80048b6 <USB_ReadDevOutEPInterrupt>
 8001b4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00c      	beq.n	8001b74 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	015a      	lsls	r2, r3, #5
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	4413      	add	r3, r2
 8001b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b66:	461a      	mov	r2, r3
 8001b68:	2301      	movs	r3, #1
 8001b6a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fea4 	bl	80028bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00c      	beq.n	8001b98 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	015a      	lsls	r2, r3, #5
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	4413      	add	r3, r2
 8001b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 ff7a 	bl	8002a8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d030      	beq.n	8001c20 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc6:	2b80      	cmp	r3, #128	@ 0x80
 8001bc8:	d109      	bne.n	8001bde <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bdc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	78db      	ldrb	r3, [r3, #3]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d108      	bne.n	8001c0e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4619      	mov	r1, r3
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f005 fe35 	bl	8007878 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c36:	461a      	mov	r2, r3
 8001c38:	2320      	movs	r3, #32
 8001c3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c52:	461a      	mov	r2, r3
 8001c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c58:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f47f af62 	bne.w	8001b32 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 fdd8 	bl	8004828 <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c82:	f040 80db 	bne.w	8001e3c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 fdf9 	bl	8004882 <USB_ReadDevAllInEpInterrupt>
 8001c90:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001c96:	e0cd      	b.n	8001e34 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80c2 	beq.w	8001e28 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fe1f 	bl	80048f2 <USB_ReadDevInEPInterrupt>
 8001cb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d057      	beq.n	8001d70 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69f9      	ldr	r1, [r7, #28]
 8001cdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	799b      	ldrb	r3, [r3, #6]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d132      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3320      	adds	r3, #32
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4403      	add	r3, r0
 8001d1e:	331c      	adds	r3, #28
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4419      	add	r1, r3
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4403      	add	r3, r0
 8001d32:	3320      	adds	r3, #32
 8001d34:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d113      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x3a2>
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3324      	adds	r3, #36	@ 0x24
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d108      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2101      	movs	r1, #1
 8001d60:	f002 fe26 	bl	80049b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f005 fcff 	bl	800776e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d008      	beq.n	8001d8c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d86:	461a      	mov	r2, r3
 8001d88:	2308      	movs	r3, #8
 8001d8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d008      	beq.n	8001da8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001da2:	461a      	mov	r2, r3
 8001da4:	2310      	movs	r3, #16
 8001da6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2340      	movs	r3, #64	@ 0x40
 8001dc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d023      	beq.n	8001e16 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dd0:	6a38      	ldr	r0, [r7, #32]
 8001dd2:	f001 fe0d 	bl	80039f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3310      	adds	r3, #16
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	78db      	ldrb	r3, [r3, #3]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2200      	movs	r2, #0
 8001df6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f005 fd4c 	bl	800789c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e10:	461a      	mov	r2, r3
 8001e12:	2302      	movs	r3, #2
 8001e14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fcbd 	bl	80027a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f47f af2e 	bne.w	8001c98 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 fcf1 	bl	8004828 <USB_ReadInterrupts>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e50:	d122      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d108      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fea4 	bl	8002bc8 <HAL_PCDEx_LPM_Callback>
 8001e80:	e002      	b.n	8001e88 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f005 fcea 	bl	800785c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fcc3 	bl	8004828 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001eac:	d112      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d102      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f005 fca6 	bl	8007810 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001ed2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 fca5 	bl	8004828 <USB_ReadInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ee8:	f040 80b7 	bne.w	800205a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001efa:	f023 0301 	bic.w	r3, r3, #1
 8001efe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2110      	movs	r1, #16
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fd72 	bl	80039f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f10:	e046      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f36:	0151      	lsls	r1, r2, #5
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	440a      	add	r2, r1
 8001f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001f40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f52:	461a      	mov	r2, r3
 8001f54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f6a:	0151      	lsls	r1, r2, #5
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	440a      	add	r2, r1
 8001f70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f74:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f8a:	0151      	lsls	r1, r2, #5
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	440a      	add	r2, r1
 8001f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	791b      	ldrb	r3, [r3, #4]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d3b2      	bcc.n	8001f12 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fba:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001fbe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7bdb      	ldrb	r3, [r3, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d016      	beq.n	8001ff6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fd8:	f043 030b 	orr.w	r3, r3, #11
 8001fdc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fee:	f043 030b 	orr.w	r3, r3, #11
 8001ff2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff4:	e015      	b.n	8002022 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002004:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002008:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800200c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800201c:	f043 030b 	orr.w	r3, r3, #11
 8002020:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002030:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002034:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002044:	461a      	mov	r2, r3
 8002046:	f002 fcb3 	bl	80049b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002058:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f002 fbe2 	bl	8004828 <USB_ReadInterrupts>
 8002064:	4603      	mov	r3, r0
 8002066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800206e:	d123      	bne.n	80020b8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 fc78 	bl	800496a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f001 fd2f 	bl	8003ae2 <USB_GetDevSpeed>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681c      	ldr	r4, [r3, #0]
 8002090:	f001 f9ca 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8002094:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800209a:	461a      	mov	r2, r3
 800209c:	4620      	mov	r0, r4
 800209e:	f001 fa33 	bl	8003508 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f005 fb8b 	bl	80077be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80020b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 fbb3 	bl	8004828 <USB_ReadInterrupts>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d10a      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f005 fb68 	bl	80077a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f002 0208 	and.w	r2, r2, #8
 80020e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 fb9e 	bl	8004828 <USB_ReadInterrupts>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f2:	2b80      	cmp	r3, #128	@ 0x80
 80020f4:	d123      	bne.n	800213e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002102:	2301      	movs	r3, #1
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
 8002106:	e014      	b.n	8002132 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fb0a 	bl	8002740 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	3301      	adds	r3, #1
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	791b      	ldrb	r3, [r3, #4]
 8002136:	461a      	mov	r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	4293      	cmp	r3, r2
 800213c:	d3e4      	bcc.n	8002108 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f002 fb70 	bl	8004828 <USB_ReadInterrupts>
 8002148:	4603      	mov	r3, r0
 800214a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800214e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002152:	d13c      	bne.n	80021ce <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002154:	2301      	movs	r3, #1
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
 8002158:	e02b      	b.n	80021b2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3318      	adds	r3, #24
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d115      	bne.n	80021ac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002180:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002182:	2b00      	cmp	r3, #0
 8002184:	da12      	bge.n	80021ac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	3317      	adds	r3, #23
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 faca 	bl	8002740 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	3301      	adds	r3, #1
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	461a      	mov	r2, r3
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d3cd      	bcc.n	800215a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80021cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f002 fb28 	bl	8004828 <USB_ReadInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021e2:	d156      	bne.n	8002292 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021e4:	2301      	movs	r3, #1
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e8:	e045      	b.n	8002276 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d12e      	bne.n	8002270 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002212:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002214:	2b00      	cmp	r3, #0
 8002216:	da2b      	bge.n	8002270 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002224:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002228:	429a      	cmp	r2, r3
 800222a:	d121      	bne.n	8002270 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002268:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800226c:	6053      	str	r3, [r2, #4]
            break;
 800226e:	e008      	b.n	8002282 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	3301      	adds	r3, #1
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	791b      	ldrb	r3, [r3, #4]
 800227a:	461a      	mov	r2, r3
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	4293      	cmp	r3, r2
 8002280:	d3b3      	bcc.n	80021ea <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f002 fac6 	bl	8004828 <USB_ReadInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80022a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a6:	d10a      	bne.n	80022be <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f005 fb09 	bl	80078c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80022bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fab0 	bl	8004828 <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d115      	bne.n	80022fe <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f005 faf9 	bl	80078dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	e000      	b.n	80022fe <HAL_PCD_IRQHandler+0x93c>
      return;
 80022fc:	bf00      	nop
    }
  }
}
 80022fe:	3734      	adds	r7, #52	@ 0x34
 8002300:	46bd      	mov	sp, r7
 8002302:	bd90      	pop	{r4, r7, pc}

08002304 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_PCD_SetAddress+0x1a>
 800231a:	2302      	movs	r3, #2
 800231c:	e012      	b.n	8002344 <HAL_PCD_SetAddress+0x40>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f002 fa0f 	bl	8004758 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	4608      	mov	r0, r1
 8002356:	4611      	mov	r1, r2
 8002358:	461a      	mov	r2, r3
 800235a:	4603      	mov	r3, r0
 800235c:	70fb      	strb	r3, [r7, #3]
 800235e:	460b      	mov	r3, r1
 8002360:	803b      	strh	r3, [r7, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800236a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800236e:	2b00      	cmp	r3, #0
 8002370:	da0f      	bge.n	8002392 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3310      	adds	r3, #16
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	705a      	strb	r2, [r3, #1]
 8002390:	e00f      	b.n	80023b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80023be:	883b      	ldrh	r3, [r7, #0]
 80023c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	78ba      	ldrb	r2, [r7, #2]
 80023cc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	785b      	ldrb	r3, [r3, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023e0:	78bb      	ldrb	r3, [r7, #2]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d102      	bne.n	80023ec <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_PCD_EP_Open+0xae>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e00e      	b.n	8002418 <HAL_PCD_EP_Open+0xcc>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68f9      	ldr	r1, [r7, #12]
 8002408:	4618      	mov	r0, r3
 800240a:	f001 fb8f 	bl	8003b2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002416:	7afb      	ldrb	r3, [r7, #11]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800242c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002430:	2b00      	cmp	r3, #0
 8002432:	da0f      	bge.n	8002454 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	f003 020f 	and.w	r2, r3, #15
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	3310      	adds	r3, #16
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	705a      	strb	r2, [r3, #1]
 8002452:	e00f      	b.n	8002474 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	f003 020f 	and.w	r2, r3, #15
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	3304      	adds	r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	b2da      	uxtb	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_PCD_EP_Close+0x6e>
 800248a:	2302      	movs	r3, #2
 800248c:	e00e      	b.n	80024ac <HAL_PCD_EP_Close+0x8c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68f9      	ldr	r1, [r7, #12]
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fbcd 	bl	8003c3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	460b      	mov	r3, r1
 80024c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c4:	7afb      	ldrb	r3, [r7, #11]
 80024c6:	f003 020f 	and.w	r2, r3, #15
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	3304      	adds	r3, #4
 80024dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2200      	movs	r2, #0
 80024f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	799b      	ldrb	r3, [r3, #6]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d102      	bne.n	8002510 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	799b      	ldrb	r3, [r3, #6]
 8002518:	461a      	mov	r2, r3
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	f001 fc6a 	bl	8003df4 <USB_EPStartXfer>

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 020f 	and.w	r2, r3, #15
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800254c:	681b      	ldr	r3, [r3, #0]
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	460b      	mov	r3, r1
 8002568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	f003 020f 	and.w	r2, r3, #15
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	3310      	adds	r3, #16
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4413      	add	r3, r2
 800257e:	3304      	adds	r3, #4
 8002580:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2201      	movs	r2, #1
 8002598:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800259a:	7afb      	ldrb	r3, [r7, #11]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	799b      	ldrb	r3, [r3, #6]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	799b      	ldrb	r3, [r3, #6]
 80025bc:	461a      	mov	r2, r3
 80025be:	6979      	ldr	r1, [r7, #20]
 80025c0:	f001 fc18 	bl	8003df4 <USB_EPStartXfer>

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	7912      	ldrb	r2, [r2, #4]
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e04f      	b.n	800268c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	da0f      	bge.n	8002614 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	f003 020f 	and.w	r2, r3, #15
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	3310      	adds	r3, #16
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	3304      	adds	r3, #4
 800260a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	705a      	strb	r2, [r3, #1]
 8002612:	e00d      	b.n	8002630 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	3304      	adds	r3, #4
 8002628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	b2da      	uxtb	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_PCD_EP_SetStall+0x82>
 800264c:	2302      	movs	r3, #2
 800264e:	e01d      	b.n	800268c <HAL_PCD_EP_SetStall+0xbe>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68f9      	ldr	r1, [r7, #12]
 800265e:	4618      	mov	r0, r3
 8002660:	f001 ffa6 	bl	80045b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7999      	ldrb	r1, [r3, #6]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800267c:	461a      	mov	r2, r3
 800267e:	f002 f997 	bl	80049b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	7912      	ldrb	r2, [r2, #4]
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e042      	b.n	8002738 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da0f      	bge.n	80026da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	f003 020f 	and.w	r2, r3, #15
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	3310      	adds	r3, #16
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	3304      	adds	r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	705a      	strb	r2, [r3, #1]
 80026d8:	e00f      	b.n	80026fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	f003 020f 	and.w	r2, r3, #15
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	3304      	adds	r3, #4
 80026f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	b2da      	uxtb	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_PCD_EP_ClrStall+0x86>
 8002716:	2302      	movs	r3, #2
 8002718:	e00e      	b.n	8002738 <HAL_PCD_EP_ClrStall+0xa4>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	4618      	mov	r0, r3
 800272a:	f001 ffaf 	bl	800468c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800274c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002750:	2b00      	cmp	r3, #0
 8002752:	da0c      	bge.n	800276e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	f003 020f 	and.w	r2, r3, #15
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	3310      	adds	r3, #16
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	3304      	adds	r3, #4
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e00c      	b.n	8002788 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	f003 020f 	and.w	r2, r3, #15
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	3304      	adds	r3, #4
 8002786:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fdce 	bl	8004330 <USB_EPStopXfer>
 8002794:	4603      	mov	r3, r0
 8002796:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002798:	7afb      	ldrb	r3, [r7, #11]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b08a      	sub	sp, #40	@ 0x28
 80027a6:	af02      	add	r7, sp, #8
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	3310      	adds	r3, #16
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	3304      	adds	r3, #4
 80027c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d901      	bls.n	80027da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d902      	bls.n	80027f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3303      	adds	r3, #3
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027fe:	e02a      	b.n	8002856 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	429a      	cmp	r2, r3
 8002814:	d902      	bls.n	800281c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	3303      	adds	r3, #3
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	68d9      	ldr	r1, [r3, #12]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	4603      	mov	r3, r0
 8002838:	6978      	ldr	r0, [r7, #20]
 800283a:	f001 fe23 	bl	8004484 <USB_WritePacket>

    ep->xfer_buff  += len;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	441a      	add	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	441a      	add	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	429a      	cmp	r2, r3
 800286a:	d809      	bhi.n	8002880 <PCD_WriteEmptyTxFifo+0xde>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002874:	429a      	cmp	r2, r3
 8002876:	d203      	bcs.n	8002880 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1bf      	bne.n	8002800 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	429a      	cmp	r2, r3
 800288a:	d811      	bhi.n	80028b0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	2201      	movs	r2, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	6939      	ldr	r1, [r7, #16]
 80028a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028ac:	4013      	ands	r3, r2
 80028ae:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	333c      	adds	r3, #60	@ 0x3c
 80028d4:	3304      	adds	r3, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	799b      	ldrb	r3, [r3, #6]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d17b      	bne.n	80029ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	4a61      	ldr	r2, [pc, #388]	@ (8002a84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	f240 80b9 	bls.w	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80b3 	beq.w	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800291e:	461a      	mov	r2, r3
 8002920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002924:	6093      	str	r3, [r2, #8]
 8002926:	e0a7      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800293e:	461a      	mov	r2, r3
 8002940:	2320      	movs	r3, #32
 8002942:	6093      	str	r3, [r2, #8]
 8002944:	e098      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 8093 	bne.w	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4a4b      	ldr	r2, [pc, #300]	@ (8002a84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d90f      	bls.n	800297a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002976:	6093      	str	r3, [r2, #8]
 8002978:	e07e      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1a      	ldr	r2, [r3, #32]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	0159      	lsls	r1, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	440b      	add	r3, r1
 800299c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d114      	bne.n	80029dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029c4:	461a      	mov	r2, r3
 80029c6:	2101      	movs	r1, #1
 80029c8:	f001 fff2 	bl	80049b0 <USB_EP0_OutStart>
 80029cc:	e006      	b.n	80029dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	441a      	add	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f004 fea8 	bl	8007738 <HAL_PCD_DataOutStageCallback>
 80029e8:	e046      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	4a26      	ldr	r2, [pc, #152]	@ (8002a88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d124      	bne.n	8002a3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a0e:	6093      	str	r3, [r2, #8]
 8002a10:	e032      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f004 fe7f 	bl	8007738 <HAL_PCD_DataOutStageCallback>
 8002a3a:	e01d      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d114      	bne.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a64:	461a      	mov	r2, r3
 8002a66:	2100      	movs	r1, #0
 8002a68:	f001 ffa2 	bl	80049b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f004 fe60 	bl	8007738 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	4f54300a 	.word	0x4f54300a
 8002a88:	4f54310a 	.word	0x4f54310a

08002a8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	333c      	adds	r3, #60	@ 0x3c
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a15      	ldr	r2, [pc, #84]	@ (8002b14 <PCD_EP_OutSetupPacket_int+0x88>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d90e      	bls.n	8002ae0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ade:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f004 fe17 	bl	8007714 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <PCD_EP_OutSetupPacket_int+0x88>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d90c      	bls.n	8002b08 <PCD_EP_OutSetupPacket_int+0x7c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	799b      	ldrb	r3, [r3, #6]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b00:	461a      	mov	r2, r3
 8002b02:	2101      	movs	r1, #1
 8002b04:	f001 ff54 	bl	80049b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	4f54300a 	.word	0x4f54300a

08002b18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	70fb      	strb	r3, [r7, #3]
 8002b24:	4613      	mov	r3, r2
 8002b26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b36:	883b      	ldrh	r3, [r7, #0]
 8002b38:	0419      	lsls	r1, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b44:	e028      	b.n	8002b98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	4413      	add	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	e00d      	b.n	8002b76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	3340      	adds	r3, #64	@ 0x40
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	3301      	adds	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3ec      	bcc.n	8002b5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b80:	883b      	ldrh	r3, [r7, #0]
 8002b82:	0418      	lsls	r0, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	4302      	orrs	r2, r0
 8002b90:	3340      	adds	r3, #64	@ 0x40
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e267      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d075      	beq.n	8002cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bfe:	4b88      	ldr	r3, [pc, #544]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d00c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b85      	ldr	r3, [pc, #532]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d112      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b82      	ldr	r3, [pc, #520]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	4b7e      	ldr	r3, [pc, #504]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05b      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x108>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d157      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e242      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x74>
 8002c46:	4b76      	ldr	r3, [pc, #472]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c5e:	4b70      	ldr	r3, [pc, #448]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6f      	ldr	r2, [pc, #444]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c78:	4b69      	ldr	r3, [pc, #420]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a68      	ldr	r2, [pc, #416]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b66      	ldr	r3, [pc, #408]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a65      	ldr	r2, [pc, #404]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe fa58 	bl	800114c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fa54 	bl	800114c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e207      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xc0>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fa44 	bl	800114c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fa40 	bl	800114c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1f3      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b51      	ldr	r3, [pc, #324]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xe8>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d063      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b47      	ldr	r3, [pc, #284]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b44      	ldr	r3, [pc, #272]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b41      	ldr	r3, [pc, #260]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1c7      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4937      	ldr	r1, [pc, #220]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b34      	ldr	r3, [pc, #208]	@ (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe f9f9 	bl	800114c <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe f9f5 	bl	800114c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1a8      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2b      	ldr	r3, [pc, #172]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b28      	ldr	r3, [pc, #160]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4925      	ldr	r1, [pc, #148]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe f9d8 	bl	800114c <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe f9d4 	bl	800114c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e187      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d036      	beq.n	8002e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe f9b8 	bl	800114c <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe f9b4 	bl	800114c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e167      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x200>
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7fe f9a1 	bl	800114c <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	e00e      	b.n	8002e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fe f99d 	bl	800114c <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e150      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470000 	.word	0x42470000
 8002e28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b88      	ldr	r3, [pc, #544]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ea      	bne.n	8002e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8097 	beq.w	8002f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b81      	ldr	r3, [pc, #516]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e66:	4b7a      	ldr	r3, [pc, #488]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b77      	ldr	r3, [pc, #476]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b74      	ldr	r3, [pc, #464]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a73      	ldr	r2, [pc, #460]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe f95d 	bl	800114c <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fe f959 	bl	800114c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e10c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x2ea>
 8002ebc:	4b64      	ldr	r3, [pc, #400]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a63      	ldr	r2, [pc, #396]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x30c>
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ede:	4b5c      	ldr	r3, [pc, #368]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eec:	4b58      	ldr	r3, [pc, #352]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	4a57      	ldr	r2, [pc, #348]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef8:	4b55      	ldr	r3, [pc, #340]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efc:	4a54      	ldr	r2, [pc, #336]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe f91e 	bl	800114c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe f91a 	bl	800114c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0cb      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	4b49      	ldr	r3, [pc, #292]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ee      	beq.n	8002f14 <HAL_RCC_OscConfig+0x334>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fe f908 	bl	800114c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fe f904 	bl	800114c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0b5      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	4b3e      	ldr	r3, [pc, #248]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ee      	bne.n	8002f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b39      	ldr	r3, [pc, #228]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	4a38      	ldr	r2, [pc, #224]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a1 	beq.w	80030c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7e:	4b34      	ldr	r3, [pc, #208]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d05c      	beq.n	8003044 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d141      	bne.n	8003016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe f8d8 	bl	800114c <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe f8d4 	bl	800114c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e087      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	491b      	ldr	r1, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe f8ad 	bl	800114c <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe f8a9 	bl	800114c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e05c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x416>
 8003014:	e054      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe f896 	bl	800114c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe f892 	bl	800114c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e045      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x444>
 8003042:	e03d      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e038      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
 8003058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800305c:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <HAL_RCC_OscConfig+0x4ec>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d028      	beq.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d121      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11a      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	3b01      	subs	r3, #1
 80030a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0cc      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b68      	ldr	r3, [pc, #416]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d90c      	bls.n	800310c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b65      	ldr	r3, [pc, #404]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b63      	ldr	r3, [pc, #396]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b59      	ldr	r3, [pc, #356]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a58      	ldr	r2, [pc, #352]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800312e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b53      	ldr	r3, [pc, #332]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a52      	ldr	r2, [pc, #328]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b50      	ldr	r3, [pc, #320]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d044      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b47      	ldr	r3, [pc, #284]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d119      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d003      	beq.n	800318e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318a:	2b03      	cmp	r3, #3
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b3f      	ldr	r3, [pc, #252]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3b      	ldr	r3, [pc, #236]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e067      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b37      	ldr	r3, [pc, #220]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4934      	ldr	r1, [pc, #208]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7fd ffc4 	bl	800114c <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7fd ffc0 	bl	800114c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e04f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2b      	ldr	r3, [pc, #172]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b25      	ldr	r3, [pc, #148]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d20c      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b22      	ldr	r3, [pc, #136]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b20      	ldr	r3, [pc, #128]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490a      	ldr	r1, [pc, #40]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd ff24 	bl	80010c4 <HAL_InitTick>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00
 800328c:	40023800 	.word	0x40023800
 8003290:	080086a0 	.word	0x080086a0
 8003294:	20000004 	.word	0x20000004
 8003298:	20000008 	.word	0x20000008

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b090      	sub	sp, #64	@ 0x40
 80032a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b4:	4b59      	ldr	r3, [pc, #356]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d00d      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x40>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	f200 80a1 	bhi.w	8003408 <HAL_RCC_GetSysClockFreq+0x16c>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ce:	e09b      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b53      	ldr	r3, [pc, #332]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x184>)
 80032d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032d4:	e09b      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d6:	4b53      	ldr	r3, [pc, #332]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032da:	e098      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032dc:	4b4f      	ldr	r3, [pc, #316]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e6:	4b4d      	ldr	r3, [pc, #308]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f2:	4b4a      	ldr	r3, [pc, #296]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	2200      	movs	r2, #0
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003304:	2100      	movs	r1, #0
 8003306:	4b47      	ldr	r3, [pc, #284]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 8003308:	fb03 f201 	mul.w	r2, r3, r1
 800330c:	2300      	movs	r3, #0
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	4413      	add	r3, r2
 8003314:	4a43      	ldr	r2, [pc, #268]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 8003316:	fba0 1202 	umull	r1, r2, r0, r2
 800331a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800331c:	460a      	mov	r2, r1
 800331e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003322:	4413      	add	r3, r2
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003328:	2200      	movs	r2, #0
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	61fa      	str	r2, [r7, #28]
 800332e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003336:	f7fc ffab 	bl	8000290 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4613      	mov	r3, r2
 8003340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003342:	e053      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003344:	4b35      	ldr	r3, [pc, #212]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	2200      	movs	r2, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	617a      	str	r2, [r7, #20]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003356:	f04f 0b00 	mov.w	fp, #0
 800335a:	4652      	mov	r2, sl
 800335c:	465b      	mov	r3, fp
 800335e:	f04f 0000 	mov.w	r0, #0
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800336c:	0150      	lsls	r0, r2, #5
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	ebb2 080a 	subs.w	r8, r2, sl
 8003376:	eb63 090b 	sbc.w	r9, r3, fp
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003386:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800338a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800338e:	ebb2 0408 	subs.w	r4, r2, r8
 8003392:	eb63 0509 	sbc.w	r5, r3, r9
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	00eb      	lsls	r3, r5, #3
 80033a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a4:	00e2      	lsls	r2, r4, #3
 80033a6:	4614      	mov	r4, r2
 80033a8:	461d      	mov	r5, r3
 80033aa:	eb14 030a 	adds.w	r3, r4, sl
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	eb45 030b 	adc.w	r3, r5, fp
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c2:	4629      	mov	r1, r5
 80033c4:	028b      	lsls	r3, r1, #10
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033cc:	4621      	mov	r1, r4
 80033ce:	028a      	lsls	r2, r1, #10
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d6:	2200      	movs	r2, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	60fa      	str	r2, [r7, #12]
 80033dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e0:	f7fc ff56 	bl	8000290 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003406:	e002      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x184>)
 800340a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800340c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003410:	4618      	mov	r0, r3
 8003412:	3740      	adds	r7, #64	@ 0x40
 8003414:	46bd      	mov	sp, r7
 8003416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	00f42400 	.word	0x00f42400
 8003424:	017d7840 	.word	0x017d7840

08003428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <HAL_RCC_GetHCLKFreq+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000004 	.word	0x20000004

08003440 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003440:	b084      	sub	sp, #16
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	f107 001c 	add.w	r0, r7, #28
 800344e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003452:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003456:	2b01      	cmp	r3, #1
 8003458:	d123      	bne.n	80034a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800346e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003482:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f001 fae8 	bl	8004a6c <USB_CoreReset>
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e01b      	b.n	80034da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f001 fadc 	bl	8004a6c <USB_CoreReset>
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d106      	bne.n	80034ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80034cc:	e005      	b.n	80034da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034da:	7fbb      	ldrb	r3, [r7, #30]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d10b      	bne.n	80034f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f043 0206 	orr.w	r2, r3, #6
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003504:	b004      	add	sp, #16
 8003506:	4770      	bx	lr

08003508 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d165      	bne.n	80035e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a41      	ldr	r2, [pc, #260]	@ (8003624 <USB_SetTurnaroundTime+0x11c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d906      	bls.n	8003532 <USB_SetTurnaroundTime+0x2a>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a40      	ldr	r2, [pc, #256]	@ (8003628 <USB_SetTurnaroundTime+0x120>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d202      	bcs.n	8003532 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800352c:	230f      	movs	r3, #15
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e062      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a3c      	ldr	r2, [pc, #240]	@ (8003628 <USB_SetTurnaroundTime+0x120>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d306      	bcc.n	8003548 <USB_SetTurnaroundTime+0x40>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4a3b      	ldr	r2, [pc, #236]	@ (800362c <USB_SetTurnaroundTime+0x124>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d202      	bcs.n	8003548 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003542:	230e      	movs	r3, #14
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e057      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4a38      	ldr	r2, [pc, #224]	@ (800362c <USB_SetTurnaroundTime+0x124>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d306      	bcc.n	800355e <USB_SetTurnaroundTime+0x56>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4a37      	ldr	r2, [pc, #220]	@ (8003630 <USB_SetTurnaroundTime+0x128>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d202      	bcs.n	800355e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003558:	230d      	movs	r3, #13
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e04c      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4a33      	ldr	r2, [pc, #204]	@ (8003630 <USB_SetTurnaroundTime+0x128>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d306      	bcc.n	8003574 <USB_SetTurnaroundTime+0x6c>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4a32      	ldr	r2, [pc, #200]	@ (8003634 <USB_SetTurnaroundTime+0x12c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d802      	bhi.n	8003574 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800356e:	230c      	movs	r3, #12
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e041      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4a2f      	ldr	r2, [pc, #188]	@ (8003634 <USB_SetTurnaroundTime+0x12c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d906      	bls.n	800358a <USB_SetTurnaroundTime+0x82>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4a2e      	ldr	r2, [pc, #184]	@ (8003638 <USB_SetTurnaroundTime+0x130>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d802      	bhi.n	800358a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003584:	230b      	movs	r3, #11
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e036      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4a2a      	ldr	r2, [pc, #168]	@ (8003638 <USB_SetTurnaroundTime+0x130>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d906      	bls.n	80035a0 <USB_SetTurnaroundTime+0x98>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4a29      	ldr	r2, [pc, #164]	@ (800363c <USB_SetTurnaroundTime+0x134>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d802      	bhi.n	80035a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800359a:	230a      	movs	r3, #10
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	e02b      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4a26      	ldr	r2, [pc, #152]	@ (800363c <USB_SetTurnaroundTime+0x134>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d906      	bls.n	80035b6 <USB_SetTurnaroundTime+0xae>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4a25      	ldr	r2, [pc, #148]	@ (8003640 <USB_SetTurnaroundTime+0x138>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d202      	bcs.n	80035b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80035b0:	2309      	movs	r3, #9
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e020      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4a21      	ldr	r2, [pc, #132]	@ (8003640 <USB_SetTurnaroundTime+0x138>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d306      	bcc.n	80035cc <USB_SetTurnaroundTime+0xc4>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4a20      	ldr	r2, [pc, #128]	@ (8003644 <USB_SetTurnaroundTime+0x13c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d802      	bhi.n	80035cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80035c6:	2308      	movs	r3, #8
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	e015      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003644 <USB_SetTurnaroundTime+0x13c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d906      	bls.n	80035e2 <USB_SetTurnaroundTime+0xda>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003648 <USB_SetTurnaroundTime+0x140>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d202      	bcs.n	80035e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80035dc:	2307      	movs	r3, #7
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e00a      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80035e2:	2306      	movs	r3, #6
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e007      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80035ee:	2309      	movs	r3, #9
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e001      	b.n	80035f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80035f4:	2309      	movs	r3, #9
 80035f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	029b      	lsls	r3, r3, #10
 800360c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	00d8acbf 	.word	0x00d8acbf
 8003628:	00e4e1c0 	.word	0x00e4e1c0
 800362c:	00f42400 	.word	0x00f42400
 8003630:	01067380 	.word	0x01067380
 8003634:	011a499f 	.word	0x011a499f
 8003638:	01312cff 	.word	0x01312cff
 800363c:	014ca43f 	.word	0x014ca43f
 8003640:	016e3600 	.word	0x016e3600
 8003644:	01a6ab1f 	.word	0x01a6ab1f
 8003648:	01e84800 	.word	0x01e84800

0800364c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d115      	bne.n	80036de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80036be:	200a      	movs	r0, #10
 80036c0:	f7fd fd50 	bl	8001164 <HAL_Delay>
      ms += 10U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	330a      	adds	r3, #10
 80036c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f001 f93f 	bl	800494e <USB_GetMode>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d01e      	beq.n	8003714 <USB_SetCurrentMode+0x84>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80036da:	d9f0      	bls.n	80036be <USB_SetCurrentMode+0x2e>
 80036dc:	e01a      	b.n	8003714 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d115      	bne.n	8003710 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80036f0:	200a      	movs	r0, #10
 80036f2:	f7fd fd37 	bl	8001164 <HAL_Delay>
      ms += 10U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	330a      	adds	r3, #10
 80036fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 f926 	bl	800494e <USB_GetMode>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <USB_SetCurrentMode+0x84>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2bc7      	cmp	r3, #199	@ 0xc7
 800370c:	d9f0      	bls.n	80036f0 <USB_SetCurrentMode+0x60>
 800370e:	e001      	b.n	8003714 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e005      	b.n	8003720 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2bc8      	cmp	r3, #200	@ 0xc8
 8003718:	d101      	bne.n	800371e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003728:	b084      	sub	sp, #16
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	e009      	b.n	800375c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	3340      	adds	r3, #64	@ 0x40
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	3301      	adds	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b0e      	cmp	r3, #14
 8003760:	d9f2      	bls.n	8003748 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003762:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11c      	bne.n	80037a4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80037a2:	e00b      	b.n	80037bc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80037c2:	461a      	mov	r2, r3
 80037c4:	2300      	movs	r3, #0
 80037c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d10d      	bne.n	80037ec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037d8:	2100      	movs	r1, #0
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f968 	bl	8003ab0 <USB_SetDevSpeed>
 80037e0:	e008      	b.n	80037f4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80037e2:	2101      	movs	r1, #1
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f963 	bl	8003ab0 <USB_SetDevSpeed>
 80037ea:	e003      	b.n	80037f4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037ec:	2103      	movs	r1, #3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f95e 	bl	8003ab0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037f4:	2110      	movs	r1, #16
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f8fa 	bl	80039f0 <USB_FlushTxFifo>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f924 	bl	8003a54 <USB_FlushRxFifo>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800381c:	461a      	mov	r2, r3
 800381e:	2300      	movs	r3, #0
 8003820:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003828:	461a      	mov	r2, r3
 800382a:	2300      	movs	r3, #0
 800382c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003834:	461a      	mov	r2, r3
 8003836:	2300      	movs	r3, #0
 8003838:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	e043      	b.n	80038c8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003852:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003856:	d118      	bne.n	800388a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800386a:	461a      	mov	r2, r3
 800386c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e013      	b.n	800389c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003880:	461a      	mov	r2, r3
 8003882:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e008      	b.n	800389c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003896:	461a      	mov	r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a8:	461a      	mov	r2, r3
 80038aa:	2300      	movs	r3, #0
 80038ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ba:	461a      	mov	r2, r3
 80038bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	3301      	adds	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80038cc:	461a      	mov	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d3b5      	bcc.n	8003840 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	e043      	b.n	8003962 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038f0:	d118      	bne.n	8003924 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003904:	461a      	mov	r2, r3
 8003906:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	e013      	b.n	8003936 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391a:	461a      	mov	r2, r3
 800391c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e008      	b.n	8003936 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003930:	461a      	mov	r2, r3
 8003932:	2300      	movs	r3, #0
 8003934:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003942:	461a      	mov	r2, r3
 8003944:	2300      	movs	r3, #0
 8003946:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003954:	461a      	mov	r2, r3
 8003956:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800395a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	3301      	adds	r3, #1
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003966:	461a      	mov	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4293      	cmp	r3, r2
 800396c:	d3b5      	bcc.n	80038da <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800397c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003980:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800398e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003990:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f043 0210 	orr.w	r2, r3, #16
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	4b10      	ldr	r3, [pc, #64]	@ (80039ec <USB_DevInit+0x2c4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f043 0208 	orr.w	r2, r3, #8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d107      	bne.n	80039dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039e8:	b004      	add	sp, #16
 80039ea:	4770      	bx	lr
 80039ec:	803c3800 	.word	0x803c3800

080039f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a0a:	d901      	bls.n	8003a10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e01b      	b.n	8003a48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	daf2      	bge.n	80039fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	019b      	lsls	r3, r3, #6
 8003a20:	f043 0220 	orr.w	r2, r3, #32
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a34:	d901      	bls.n	8003a3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e006      	b.n	8003a48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d0f0      	beq.n	8003a28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3301      	adds	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a6c:	d901      	bls.n	8003a72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e018      	b.n	8003aa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	daf2      	bge.n	8003a60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2210      	movs	r2, #16
 8003a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3301      	adds	r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a90:	d901      	bls.n	8003a96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e006      	b.n	8003aa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d0f0      	beq.n	8003a84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	68f9      	ldr	r1, [r7, #12]
 8003acc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b087      	sub	sp, #28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0306 	and.w	r3, r3, #6
 8003afa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b02:	2300      	movs	r3, #0
 8003b04:	75fb      	strb	r3, [r7, #23]
 8003b06:	e00a      	b.n	8003b1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d002      	beq.n	8003b14 <USB_GetDevSpeed+0x32>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b06      	cmp	r3, #6
 8003b12:	d102      	bne.n	8003b1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b14:	2302      	movs	r3, #2
 8003b16:	75fb      	strb	r3, [r7, #23]
 8003b18:	e001      	b.n	8003b1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b1a:	230f      	movs	r3, #15
 8003b1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	785b      	ldrb	r3, [r3, #1]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d13a      	bne.n	8003bbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	2101      	movs	r1, #1
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	68f9      	ldr	r1, [r7, #12]
 8003b62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d155      	bne.n	8003c2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	791b      	ldrb	r3, [r3, #4]
 8003b9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	059b      	lsls	r3, r3, #22
 8003ba2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	0151      	lsls	r1, r2, #5
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	440a      	add	r2, r1
 8003bae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e036      	b.n	8003c2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	2101      	movs	r1, #1
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	68f9      	ldr	r1, [r7, #12]
 8003bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d11a      	bne.n	8003c2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	791b      	ldrb	r3, [r3, #4]
 8003c10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c12:	430b      	orrs	r3, r1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	0151      	lsls	r1, r2, #5
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d161      	bne.n	8003d1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c6e:	d11f      	bne.n	8003cb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003caa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	0159      	lsls	r1, r3, #5
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d12:	4619      	mov	r1, r3
 8003d14:	4b35      	ldr	r3, [pc, #212]	@ (8003dec <USB_DeactivateEndpoint+0x1b0>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
 8003d1a:	e060      	b.n	8003dde <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d32:	d11f      	bne.n	8003d74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	0151      	lsls	r1, r2, #5
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	440a      	add	r2, r1
 8003d4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	0151      	lsls	r1, r2, #5
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	2101      	movs	r1, #1
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d94:	4013      	ands	r3, r2
 8003d96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	2101      	movs	r1, #1
 8003daa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	43db      	mvns	r3, r3
 8003db2:	68f9      	ldr	r1, [r7, #12]
 8003db4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003db8:	4013      	ands	r3, r2
 8003dba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	0159      	lsls	r1, r3, #5
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	440b      	add	r3, r1
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <USB_DeactivateEndpoint+0x1b4>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	ec337800 	.word	0xec337800
 8003df0:	eff37800 	.word	0xeff37800

08003df4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	@ 0x28
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 817f 	bne.w	8004114 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d132      	bne.n	8003e84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	0151      	lsls	r1, r2, #5
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	440a      	add	r2, r1
 8003e34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e38:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003e3c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003e40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e7c:	0cdb      	lsrs	r3, r3, #19
 8003e7e:	04db      	lsls	r3, r3, #19
 8003e80:	6113      	str	r3, [r2, #16]
 8003e82:	e097      	b.n	8003fb4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	0151      	lsls	r1, r2, #5
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	440a      	add	r2, r1
 8003e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e9e:	0cdb      	lsrs	r3, r3, #19
 8003ea0:	04db      	lsls	r3, r3, #19
 8003ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	0151      	lsls	r1, r2, #5
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ebe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003ec2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003ec6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11a      	bne.n	8003f04 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d903      	bls.n	8003ee2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003efc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f00:	6113      	str	r3, [r2, #16]
 8003f02:	e044      	b.n	8003f8e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	1e5a      	subs	r2, r3, #1
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	8afb      	ldrh	r3, [r7, #22]
 8003f2a:	04d9      	lsls	r1, r3, #19
 8003f2c:	4ba4      	ldr	r3, [pc, #656]	@ (80041c0 <USB_EPStartXfer+0x3cc>)
 8003f2e:	400b      	ands	r3, r1
 8003f30:	69b9      	ldr	r1, [r7, #24]
 8003f32:	0148      	lsls	r0, r1, #5
 8003f34:	69f9      	ldr	r1, [r7, #28]
 8003f36:	4401      	add	r1, r0
 8003f38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	791b      	ldrb	r3, [r3, #4]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d122      	bne.n	8003f8e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	0151      	lsls	r1, r2, #5
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	440a      	add	r2, r1
 8003f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f62:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003f66:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	8afb      	ldrh	r3, [r7, #22]
 8003f78:	075b      	lsls	r3, r3, #29
 8003f7a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003f7e:	69b9      	ldr	r1, [r7, #24]
 8003f80:	0148      	lsls	r0, r1, #5
 8003f82:	69f9      	ldr	r1, [r7, #28]
 8003f84:	4401      	add	r1, r0
 8003f86:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa4:	69b9      	ldr	r1, [r7, #24]
 8003fa6:	0148      	lsls	r0, r1, #5
 8003fa8:	69f9      	ldr	r1, [r7, #28]
 8003faa:	4401      	add	r1, r0
 8003fac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d14b      	bne.n	8004052 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	791b      	ldrb	r3, [r3, #4]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d128      	bne.n	8004030 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d110      	bne.n	8004010 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004008:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e00f      	b.n	8004030 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	440a      	add	r2, r1
 8004026:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800402a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800404a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e166      	b.n	8004320 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	0151      	lsls	r1, r2, #5
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	440a      	add	r2, r1
 8004068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800406c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004070:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	791b      	ldrb	r3, [r3, #4]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d015      	beq.n	80040a6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 814e 	beq.w	8004320 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800408a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	2101      	movs	r1, #1
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	69f9      	ldr	r1, [r7, #28]
 800409c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040a0:	4313      	orrs	r3, r2
 80040a2:	634b      	str	r3, [r1, #52]	@ 0x34
 80040a4:	e13c      	b.n	8004320 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d110      	bne.n	80040d8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	0151      	lsls	r1, r2, #5
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	440a      	add	r2, r1
 80040cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e00f      	b.n	80040f8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	68d9      	ldr	r1, [r3, #12]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	781a      	ldrb	r2, [r3, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	b298      	uxth	r0, r3
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	4603      	mov	r3, r0
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f9b9 	bl	8004484 <USB_WritePacket>
 8004112:	e105      	b.n	8004320 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800412e:	0cdb      	lsrs	r3, r3, #19
 8004130:	04db      	lsls	r3, r3, #19
 8004132:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800414e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004152:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004156:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d132      	bne.n	80041c4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	0148      	lsls	r0, r1, #5
 8004190:	69f9      	ldr	r1, [r7, #28]
 8004192:	4401      	add	r1, r0
 8004194:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004198:	4313      	orrs	r3, r2
 800419a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	0151      	lsls	r1, r2, #5
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	440a      	add	r2, r1
 80041b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041ba:	6113      	str	r3, [r2, #16]
 80041bc:	e062      	b.n	8004284 <USB_EPStartXfer+0x490>
 80041be:	bf00      	nop
 80041c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d123      	bne.n	8004214 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e2:	69b9      	ldr	r1, [r7, #24]
 80041e4:	0148      	lsls	r0, r1, #5
 80041e6:	69f9      	ldr	r1, [r7, #28]
 80041e8:	4401      	add	r1, r0
 80041ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80041ee:	4313      	orrs	r3, r2
 80041f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	0151      	lsls	r1, r2, #5
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	440a      	add	r2, r1
 8004208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800420c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004210:	6113      	str	r3, [r2, #16]
 8004212:	e037      	b.n	8004284 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4413      	add	r3, r2
 800421e:	1e5a      	subs	r2, r3, #1
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	8afa      	ldrh	r2, [r7, #22]
 8004230:	fb03 f202 	mul.w	r2, r3, r2
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	8afb      	ldrh	r3, [r7, #22]
 8004248:	04d9      	lsls	r1, r3, #19
 800424a:	4b38      	ldr	r3, [pc, #224]	@ (800432c <USB_EPStartXfer+0x538>)
 800424c:	400b      	ands	r3, r1
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	0148      	lsls	r0, r1, #5
 8004252:	69f9      	ldr	r1, [r7, #28]
 8004254:	4401      	add	r1, r0
 8004256:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800425a:	4313      	orrs	r3, r2
 800425c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	0148      	lsls	r0, r1, #5
 8004278:	69f9      	ldr	r1, [r7, #28]
 800427a:	4401      	add	r1, r0
 800427c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004280:	4313      	orrs	r3, r2
 8004282:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d10d      	bne.n	80042a6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	68d9      	ldr	r1, [r3, #12]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a2:	460a      	mov	r2, r1
 80042a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	791b      	ldrb	r3, [r3, #4]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d128      	bne.n	8004300 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d110      	bne.n	80042e0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e00f      	b.n	8004300 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800431a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800431e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	1ff80000 	.word	0x1ff80000

08004330 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	785b      	ldrb	r3, [r3, #1]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d14a      	bne.n	80043e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004366:	f040 8086 	bne.w	8004476 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	7812      	ldrb	r2, [r2, #0]
 800437e:	0151      	lsls	r1, r2, #5
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	440a      	add	r2, r1
 8004384:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004388:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800438c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	7812      	ldrb	r2, [r2, #0]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80043be:	4293      	cmp	r3, r2
 80043c0:	d902      	bls.n	80043c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]
          break;
 80043c6:	e056      	b.n	8004476 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043e0:	d0e7      	beq.n	80043b2 <USB_EPStopXfer+0x82>
 80043e2:	e048      	b.n	8004476 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043fc:	d13b      	bne.n	8004476 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	0151      	lsls	r1, r2, #5
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	440a      	add	r2, r1
 8004418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800441c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004420:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	7812      	ldrb	r2, [r2, #0]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004444:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004452:	4293      	cmp	r3, r2
 8004454:	d902      	bls.n	800445c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
          break;
 800445a:	e00c      	b.n	8004476 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004474:	d0e7      	beq.n	8004446 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
}
 8004478:	4618      	mov	r0, r3
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	@ 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	460b      	mov	r3, r1
 8004494:	71fb      	strb	r3, [r7, #7]
 8004496:	4613      	mov	r3, r2
 8004498:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80044a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d123      	bne.n	80044f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044aa:	88bb      	ldrh	r3, [r7, #4]
 80044ac:	3303      	adds	r3, #3
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	e018      	b.n	80044ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	031a      	lsls	r2, r3, #12
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c4:	461a      	mov	r2, r3
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	3301      	adds	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	3301      	adds	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3301      	adds	r3, #1
 80044e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	3301      	adds	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d3e2      	bcc.n	80044b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3724      	adds	r7, #36	@ 0x24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004500:	b480      	push	{r7}
 8004502:	b08b      	sub	sp, #44	@ 0x2c
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	b29b      	uxth	r3, r3
 800451c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	e014      	b.n	8004556 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	601a      	str	r2, [r3, #0]
    pDest++;
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	3301      	adds	r3, #1
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	3301      	adds	r3, #1
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	3301      	adds	r3, #1
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	3301      	adds	r3, #1
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	3301      	adds	r3, #1
 8004554:	623b      	str	r3, [r7, #32]
 8004556:	6a3a      	ldr	r2, [r7, #32]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	429a      	cmp	r2, r3
 800455c:	d3e6      	bcc.n	800452c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800455e:	8bfb      	ldrh	r3, [r7, #30]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01e      	beq.n	80045a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800456e:	461a      	mov	r2, r3
 8004570:	f107 0310 	add.w	r3, r7, #16
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
 8004584:	b2da      	uxtb	r2, r3
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	701a      	strb	r2, [r3, #0]
      i++;
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	3301      	adds	r3, #1
 800458e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	3301      	adds	r3, #1
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004596:	8bfb      	ldrh	r3, [r7, #30]
 8004598:	3b01      	subs	r3, #1
 800459a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800459c:	8bfb      	ldrh	r3, [r7, #30]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ea      	bne.n	8004578 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	372c      	adds	r7, #44	@ 0x2c
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d12c      	bne.n	8004626 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	db12      	blt.n	8004604 <USB_EPSetStall+0x54>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00f      	beq.n	8004604 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004602:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800461e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e02b      	b.n	800467e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	db12      	blt.n	800465e <USB_EPSetStall+0xae>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00f      	beq.n	800465e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004658:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800465c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004678:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800467c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	785b      	ldrb	r3, [r3, #1]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d128      	bne.n	80046fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	791b      	ldrb	r3, [r3, #4]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d003      	beq.n	80046d8 <USB_EPClearStall+0x4c>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	791b      	ldrb	r3, [r3, #4]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d138      	bne.n	800474a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	0151      	lsls	r1, r2, #5
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	440a      	add	r2, r1
 80046ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	e027      	b.n	800474a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	440a      	add	r2, r1
 8004710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004714:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004718:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	791b      	ldrb	r3, [r3, #4]
 800471e:	2b03      	cmp	r3, #3
 8004720:	d003      	beq.n	800472a <USB_EPClearStall+0x9e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	791b      	ldrb	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d10f      	bne.n	800474a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004748:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004776:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800477a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800478c:	68f9      	ldr	r1, [r7, #12]
 800478e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047d2:	f023 0302 	bic.w	r3, r3, #2
 80047d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004800:	f023 0303 	bic.w	r3, r3, #3
 8004804:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004814:	f043 0302 	orr.w	r3, r3, #2
 8004818:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4013      	ands	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004840:	68fb      	ldr	r3, [r7, #12]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	0c1b      	lsrs	r3, r3, #16
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004882:	b480      	push	{r7}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	4013      	ands	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	b29b      	uxth	r3, r3
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	460b      	mov	r3, r1
 80048c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	4013      	ands	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048e4:	68bb      	ldr	r3, [r7, #8]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b087      	sub	sp, #28
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004914:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	fa22 f303 	lsr.w	r3, r2, r3
 8004922:	01db      	lsls	r3, r3, #7
 8004924:	b2db      	uxtb	r3, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4013      	ands	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004940:	68bb      	ldr	r3, [r7, #8]
}
 8004942:	4618      	mov	r0, r3
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f003 0301 	and.w	r3, r3, #1
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004984:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004988:	f023 0307 	bic.w	r3, r3, #7
 800498c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800499c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	460b      	mov	r3, r1
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	333c      	adds	r3, #60	@ 0x3c
 80049c6:	3304      	adds	r3, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4a26      	ldr	r2, [pc, #152]	@ (8004a68 <USB_EP0_OutStart+0xb8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d90a      	bls.n	80049ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049e4:	d101      	bne.n	80049ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e037      	b.n	8004a5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f0:	461a      	mov	r2, r3
 80049f2:	2300      	movs	r3, #0
 80049f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a18:	f043 0318 	orr.w	r3, r3, #24
 8004a1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004a30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a32:	7afb      	ldrb	r3, [r7, #11]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10f      	bne.n	8004a58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3e:	461a      	mov	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	4f54300a 	.word	0x4f54300a

08004a6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a84:	d901      	bls.n	8004a8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e01b      	b.n	8004ac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	daf2      	bge.n	8004a78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aae:	d901      	bls.n	8004ab4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e006      	b.n	8004ac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d0f0      	beq.n	8004aa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8004ad4:	f001 f936 	bl	8005d44 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	4912      	ldr	r1, [pc, #72]	@ (8004b24 <MX_USB_DEVICE_Init+0x54>)
 8004adc:	4812      	ldr	r0, [pc, #72]	@ (8004b28 <MX_USB_DEVICE_Init+0x58>)
 8004ade:	f001 fc69 	bl	80063b4 <USBD_Init>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8004ae8:	f7fc f96e 	bl	8000dc8 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004aec:	490f      	ldr	r1, [pc, #60]	@ (8004b2c <MX_USB_DEVICE_Init+0x5c>)
 8004aee:	480e      	ldr	r0, [pc, #56]	@ (8004b28 <MX_USB_DEVICE_Init+0x58>)
 8004af0:	f001 fc8c 	bl	800640c <USBD_RegisterClass>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8004afa:	f7fc f965 	bl	8000dc8 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004afe:	490c      	ldr	r1, [pc, #48]	@ (8004b30 <MX_USB_DEVICE_Init+0x60>)
 8004b00:	4809      	ldr	r0, [pc, #36]	@ (8004b28 <MX_USB_DEVICE_Init+0x58>)
 8004b02:	f000 fe11 	bl	8005728 <USBD_CDC_ACM_RegisterInterface>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8004b0c:	f7fc f95c 	bl	8000dc8 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004b10:	4805      	ldr	r0, [pc, #20]	@ (8004b28 <MX_USB_DEVICE_Init+0x58>)
 8004b12:	f001 fcb9 	bl	8006488 <USBD_Start>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8004b1c:	f7fc f954 	bl	8000dc8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004b20:	bf00      	nop
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000024 	.word	0x20000024
 8004b28:	200007e0 	.word	0x200007e0
 8004b2c:	20000154 	.word	0x20000154
 8004b30:	20000010 	.word	0x20000010

08004b34 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	01db      	lsls	r3, r3, #7
 8004b42:	4a06      	ldr	r2, [pc, #24]	@ (8004b5c <CDC_Init+0x28>)
 8004b44:	441a      	add	r2, r3
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	4905      	ldr	r1, [pc, #20]	@ (8004b60 <CDC_Init+0x2c>)
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fe26 	bl	800579c <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8004b50:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000afc 	.word	0x20000afc
 8004b60:	200007e0 	.word	0x200007e0

08004b64 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8004b6e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	603a      	str	r2, [r7, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	71bb      	strb	r3, [r7, #6]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8004b92:	79bb      	ldrb	r3, [r7, #6]
 8004b94:	2b23      	cmp	r3, #35	@ 0x23
 8004b96:	f200 80b6 	bhi.w	8004d06 <CDC_Control+0x18a>
 8004b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba0 <CDC_Control+0x24>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004d07 	.word	0x08004d07
 8004ba4:	08004d07 	.word	0x08004d07
 8004ba8:	08004d07 	.word	0x08004d07
 8004bac:	08004d07 	.word	0x08004d07
 8004bb0:	08004d07 	.word	0x08004d07
 8004bb4:	08004d07 	.word	0x08004d07
 8004bb8:	08004d07 	.word	0x08004d07
 8004bbc:	08004d07 	.word	0x08004d07
 8004bc0:	08004d07 	.word	0x08004d07
 8004bc4:	08004d07 	.word	0x08004d07
 8004bc8:	08004d07 	.word	0x08004d07
 8004bcc:	08004d07 	.word	0x08004d07
 8004bd0:	08004d07 	.word	0x08004d07
 8004bd4:	08004d07 	.word	0x08004d07
 8004bd8:	08004d07 	.word	0x08004d07
 8004bdc:	08004d07 	.word	0x08004d07
 8004be0:	08004d07 	.word	0x08004d07
 8004be4:	08004d07 	.word	0x08004d07
 8004be8:	08004d07 	.word	0x08004d07
 8004bec:	08004d07 	.word	0x08004d07
 8004bf0:	08004d07 	.word	0x08004d07
 8004bf4:	08004d07 	.word	0x08004d07
 8004bf8:	08004d07 	.word	0x08004d07
 8004bfc:	08004d07 	.word	0x08004d07
 8004c00:	08004d07 	.word	0x08004d07
 8004c04:	08004d07 	.word	0x08004d07
 8004c08:	08004d07 	.word	0x08004d07
 8004c0c:	08004d07 	.word	0x08004d07
 8004c10:	08004d07 	.word	0x08004d07
 8004c14:	08004d07 	.word	0x08004d07
 8004c18:	08004d07 	.word	0x08004d07
 8004c1c:	08004d07 	.word	0x08004d07
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004c91 	.word	0x08004c91
 8004c28:	08004d07 	.word	0x08004d07
 8004c2c:	08004d07 	.word	0x08004d07
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	3302      	adds	r3, #2
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004c48:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	061b      	lsls	r3, r3, #24
 8004c52:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4a2f      	ldr	r2, [pc, #188]	@ (8004d18 <CDC_Control+0x19c>)
 8004c5a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	7911      	ldrb	r1, [r2, #4]
 8004c64:	4a2c      	ldr	r2, [pc, #176]	@ (8004d18 <CDC_Control+0x19c>)
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	460a      	mov	r2, r1
 8004c6c:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	7951      	ldrb	r1, [r2, #5]
 8004c74:	4a28      	ldr	r2, [pc, #160]	@ (8004d18 <CDC_Control+0x19c>)
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	7991      	ldrb	r1, [r2, #6]
 8004c84:	4a24      	ldr	r2, [pc, #144]	@ (8004d18 <CDC_Control+0x19c>)
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	460a      	mov	r2, r1
 8004c8c:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8004c8e:	e03b      	b.n	8004d08 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	4a21      	ldr	r2, [pc, #132]	@ (8004d18 <CDC_Control+0x19c>)
 8004c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d18 <CDC_Control+0x19c>)
 8004ca2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ca6:	0a1a      	lsrs	r2, r3, #8
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	3301      	adds	r3, #1
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	4a19      	ldr	r2, [pc, #100]	@ (8004d18 <CDC_Control+0x19c>)
 8004cb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cb8:	0c1a      	lsrs	r2, r3, #16
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	4a14      	ldr	r2, [pc, #80]	@ (8004d18 <CDC_Control+0x19c>)
 8004cc6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cca:	0e1a      	lsrs	r2, r3, #24
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	3303      	adds	r3, #3
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	3204      	adds	r2, #4
 8004cda:	490f      	ldr	r1, [pc, #60]	@ (8004d18 <CDC_Control+0x19c>)
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	440b      	add	r3, r1
 8004ce0:	791b      	ldrb	r3, [r3, #4]
 8004ce2:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	3205      	adds	r2, #5
 8004cea:	490b      	ldr	r1, [pc, #44]	@ (8004d18 <CDC_Control+0x19c>)
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	440b      	add	r3, r1
 8004cf0:	795b      	ldrb	r3, [r3, #5]
 8004cf2:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	3206      	adds	r2, #6
 8004cfa:	4907      	ldr	r1, [pc, #28]	@ (8004d18 <CDC_Control+0x19c>)
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	440b      	add	r3, r1
 8004d00:	799b      	ldrb	r3, [r3, #6]
 8004d02:	7013      	strb	r3, [r2, #0]
    break;
 8004d04:	e000      	b.n	8004d08 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004d06:	bf00      	nop
  }

  return (USBD_OK);
 8004d08:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000b7c 	.word	0x20000b7c

08004d1c <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 f825 	bl	8004d84 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	4907      	ldr	r1, [pc, #28]	@ (8004d5c <CDC_Receive+0x40>)
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fd2b 	bl	800579c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	4904      	ldr	r1, [pc, #16]	@ (8004d5c <CDC_Receive+0x40>)
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fd86 	bl	800585c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8004d50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	200007e0 	.word	0x200007e0

08004d60 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	73fb      	strb	r3, [r7, #15]
 8004d70:	4613      	mov	r3, r2
 8004d72:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	6039      	str	r1, [r7, #0]
 8004d8e:	71fb      	strb	r3, [r7, #7]
 8004d90:	4613      	mov	r3, r2
 8004d92:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	4a0e      	ldr	r2, [pc, #56]	@ (8004de0 <CDC_Transmit+0x5c>)
 8004da8:	4413      	add	r3, r2
 8004daa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e00d      	b.n	8004dd6 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8004dba:	88bb      	ldrh	r3, [r7, #4]
 8004dbc:	79f8      	ldrb	r0, [r7, #7]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	4908      	ldr	r1, [pc, #32]	@ (8004de4 <CDC_Transmit+0x60>)
 8004dc2:	f000 fcc7 	bl	8005754 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	4906      	ldr	r1, [pc, #24]	@ (8004de4 <CDC_Transmit+0x60>)
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fd04 	bl	80057d8 <USBD_CDC_TransmitPacket>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000d9c 	.word	0x20000d9c
 8004de4:	200007e0 	.word	0x200007e0

08004de8 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	6039      	str	r1, [r7, #0]
 8004df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2212      	movs	r2, #18
 8004df8:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8004dfa:	4b03      	ldr	r3, [pc, #12]	@ (8004e08 <USBD_DeviceDescriptor+0x20>)
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	20000040 	.word	0x20000040

08004e0c <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	6039      	str	r1, [r7, #0]
 8004e16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004e1e:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <USBD_LangIDStrDescriptor+0x20>)
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	20000054 	.word	0x20000054

08004e30 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	6039      	str	r1, [r7, #0]
 8004e3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d105      	bne.n	8004e4e <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	4907      	ldr	r1, [pc, #28]	@ (8004e64 <USBD_ProductStrDescriptor+0x34>)
 8004e46:	4808      	ldr	r0, [pc, #32]	@ (8004e68 <USBD_ProductStrDescriptor+0x38>)
 8004e48:	f002 fb5d 	bl	8007506 <USBD_GetString>
 8004e4c:	e004      	b.n	8004e58 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	4904      	ldr	r1, [pc, #16]	@ (8004e64 <USBD_ProductStrDescriptor+0x34>)
 8004e52:	4805      	ldr	r0, [pc, #20]	@ (8004e68 <USBD_ProductStrDescriptor+0x38>)
 8004e54:	f002 fb57 	bl	8007506 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004e58:	4b02      	ldr	r3, [pc, #8]	@ (8004e64 <USBD_ProductStrDescriptor+0x34>)
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000b84 	.word	0x20000b84
 8004e68:	0800862c 	.word	0x0800862c

08004e6c <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	6039      	str	r1, [r7, #0]
 8004e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	4904      	ldr	r1, [pc, #16]	@ (8004e8c <USBD_ManufacturerStrDescriptor+0x20>)
 8004e7c:	4804      	ldr	r0, [pc, #16]	@ (8004e90 <USBD_ManufacturerStrDescriptor+0x24>)
 8004e7e:	f002 fb42 	bl	8007506 <USBD_GetString>
  return USBD_StrDesc;
 8004e82:	4b02      	ldr	r3, [pc, #8]	@ (8004e8c <USBD_ManufacturerStrDescriptor+0x20>)
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20000b84 	.word	0x20000b84
 8004e90:	08008644 	.word	0x08008644

08004e94 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	6039      	str	r1, [r7, #0]
 8004e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	221a      	movs	r2, #26
 8004ea4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004ea6:	f000 f843 	bl	8004f30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8004eaa:	4b02      	ldr	r3, [pc, #8]	@ (8004eb4 <USBD_SerialStrDescriptor+0x20>)
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000058 	.word	0x20000058

08004eb8 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	6039      	str	r1, [r7, #0]
 8004ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d105      	bne.n	8004ed6 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	4907      	ldr	r1, [pc, #28]	@ (8004eec <USBD_ConfigStrDescriptor+0x34>)
 8004ece:	4808      	ldr	r0, [pc, #32]	@ (8004ef0 <USBD_ConfigStrDescriptor+0x38>)
 8004ed0:	f002 fb19 	bl	8007506 <USBD_GetString>
 8004ed4:	e004      	b.n	8004ee0 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	4904      	ldr	r1, [pc, #16]	@ (8004eec <USBD_ConfigStrDescriptor+0x34>)
 8004eda:	4805      	ldr	r0, [pc, #20]	@ (8004ef0 <USBD_ConfigStrDescriptor+0x38>)
 8004edc:	f002 fb13 	bl	8007506 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004ee0:	4b02      	ldr	r3, [pc, #8]	@ (8004eec <USBD_ConfigStrDescriptor+0x34>)
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000b84 	.word	0x20000b84
 8004ef0:	08008658 	.word	0x08008658

08004ef4 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d105      	bne.n	8004f12 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	4907      	ldr	r1, [pc, #28]	@ (8004f28 <USBD_InterfaceStrDescriptor+0x34>)
 8004f0a:	4808      	ldr	r0, [pc, #32]	@ (8004f2c <USBD_InterfaceStrDescriptor+0x38>)
 8004f0c:	f002 fafb 	bl	8007506 <USBD_GetString>
 8004f10:	e004      	b.n	8004f1c <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	4904      	ldr	r1, [pc, #16]	@ (8004f28 <USBD_InterfaceStrDescriptor+0x34>)
 8004f16:	4805      	ldr	r0, [pc, #20]	@ (8004f2c <USBD_InterfaceStrDescriptor+0x38>)
 8004f18:	f002 faf5 	bl	8007506 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004f1c:	4b02      	ldr	r3, [pc, #8]	@ (8004f28 <USBD_InterfaceStrDescriptor+0x34>)
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000b84 	.word	0x20000b84
 8004f2c:	08008668 	.word	0x08008668

08004f30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004f36:	4b0f      	ldr	r3, [pc, #60]	@ (8004f74 <Get_SerialNum+0x44>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f78 <Get_SerialNum+0x48>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004f42:	4b0e      	ldr	r3, [pc, #56]	@ (8004f7c <Get_SerialNum+0x4c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004f56:	2208      	movs	r2, #8
 8004f58:	4909      	ldr	r1, [pc, #36]	@ (8004f80 <Get_SerialNum+0x50>)
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f814 	bl	8004f88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004f60:	2204      	movs	r2, #4
 8004f62:	4908      	ldr	r1, [pc, #32]	@ (8004f84 <Get_SerialNum+0x54>)
 8004f64:	68b8      	ldr	r0, [r7, #8]
 8004f66:	f000 f80f 	bl	8004f88 <IntToUnicode>
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	1fff7a10 	.word	0x1fff7a10
 8004f78:	1fff7a14 	.word	0x1fff7a14
 8004f7c:	1fff7a18 	.word	0x1fff7a18
 8004f80:	2000005a 	.word	0x2000005a
 8004f84:	2000006a 	.word	0x2000006a

08004f88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
 8004f9e:	e027      	b.n	8004ff0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	0f1b      	lsrs	r3, r3, #28
 8004fa4:	2b09      	cmp	r3, #9
 8004fa6:	d80b      	bhi.n	8004fc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	0f1b      	lsrs	r3, r3, #28
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3230      	adds	r2, #48	@ 0x30
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	e00a      	b.n	8004fd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	0f1b      	lsrs	r3, r3, #28
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	440b      	add	r3, r1
 8004fd0:	3237      	adds	r2, #55	@ 0x37
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	3301      	adds	r3, #1
 8004fee:	75fb      	strb	r3, [r7, #23]
 8004ff0:	7dfa      	ldrb	r2, [r7, #23]
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d3d3      	bcc.n	8004fa0 <IntToUnicode+0x18>
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005014:	2300      	movs	r3, #0
 8005016:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005018:	2300      	movs	r3, #0
 800501a:	73fb      	strb	r3, [r7, #15]
 800501c:	e0c6      	b.n	80051ac <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005024:	fb02 f303 	mul.w	r3, r2, r3
 8005028:	4a65      	ldr	r2, [pc, #404]	@ (80051c0 <USBD_CDC_Init+0x1b8>)
 800502a:	4413      	add	r3, r2
 800502c:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	7c1b      	ldrb	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d13d      	bne.n	80050b2 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	4a62      	ldr	r2, [pc, #392]	@ (80051c4 <USBD_CDC_Init+0x1bc>)
 800503a:	5cd1      	ldrb	r1, [r2, r3]
 800503c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005040:	2202      	movs	r2, #2
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f002 fcd1 	bl	80079ea <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	4a5e      	ldr	r2, [pc, #376]	@ (80051c4 <USBD_CDC_Init+0x1bc>)
 800504c:	5cd3      	ldrb	r3, [r2, r3]
 800504e:	f003 020f 	and.w	r2, r3, #15
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	3324      	adds	r3, #36	@ 0x24
 8005060:	2201      	movs	r2, #1
 8005062:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	4a58      	ldr	r2, [pc, #352]	@ (80051c8 <USBD_CDC_Init+0x1c0>)
 8005068:	5cd1      	ldrb	r1, [r2, r3]
 800506a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800506e:	2202      	movs	r2, #2
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f002 fcba 	bl	80079ea <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	4a53      	ldr	r2, [pc, #332]	@ (80051c8 <USBD_CDC_Init+0x1c0>)
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	f003 020f 	and.w	r2, r3, #15
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005090:	2201      	movs	r2, #1
 8005092:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	4a4d      	ldr	r2, [pc, #308]	@ (80051cc <USBD_CDC_Init+0x1c4>)
 8005098:	5cd3      	ldrb	r3, [r2, r3]
 800509a:	f003 020f 	and.w	r2, r3, #15
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	3326      	adds	r3, #38	@ 0x26
 80050ac:	2210      	movs	r2, #16
 80050ae:	801a      	strh	r2, [r3, #0]
 80050b0:	e03a      	b.n	8005128 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	4a43      	ldr	r2, [pc, #268]	@ (80051c4 <USBD_CDC_Init+0x1bc>)
 80050b6:	5cd1      	ldrb	r1, [r2, r3]
 80050b8:	2340      	movs	r3, #64	@ 0x40
 80050ba:	2202      	movs	r2, #2
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f002 fc94 	bl	80079ea <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	4a3f      	ldr	r2, [pc, #252]	@ (80051c4 <USBD_CDC_Init+0x1bc>)
 80050c6:	5cd3      	ldrb	r3, [r2, r3]
 80050c8:	f003 020f 	and.w	r2, r3, #15
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	3324      	adds	r3, #36	@ 0x24
 80050da:	2201      	movs	r2, #1
 80050dc:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	4a39      	ldr	r2, [pc, #228]	@ (80051c8 <USBD_CDC_Init+0x1c0>)
 80050e2:	5cd1      	ldrb	r1, [r2, r3]
 80050e4:	2340      	movs	r3, #64	@ 0x40
 80050e6:	2202      	movs	r2, #2
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f002 fc7e 	bl	80079ea <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	4a35      	ldr	r2, [pc, #212]	@ (80051c8 <USBD_CDC_Init+0x1c0>)
 80050f2:	5cd3      	ldrb	r3, [r2, r3]
 80050f4:	f003 020f 	and.w	r2, r3, #15
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005108:	2201      	movs	r2, #1
 800510a:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	4a2f      	ldr	r2, [pc, #188]	@ (80051cc <USBD_CDC_Init+0x1c4>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	f003 020f 	and.w	r2, r3, #15
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	3326      	adds	r3, #38	@ 0x26
 8005124:	2210      	movs	r2, #16
 8005126:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	4a28      	ldr	r2, [pc, #160]	@ (80051cc <USBD_CDC_Init+0x1c4>)
 800512c:	5cd1      	ldrb	r1, [r2, r3]
 800512e:	2308      	movs	r3, #8
 8005130:	2203      	movs	r2, #3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f002 fc59 	bl	80079ea <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	4a24      	ldr	r2, [pc, #144]	@ (80051cc <USBD_CDC_Init+0x1c4>)
 800513c:	5cd3      	ldrb	r3, [r2, r3]
 800513e:	f003 020f 	and.w	r2, r3, #15
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	3324      	adds	r3, #36	@ 0x24
 8005150:	2201      	movs	r2, #1
 8005152:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	4610      	mov	r0, r2
 8005160:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2200      	movs	r2, #0
 8005166:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2200      	movs	r2, #0
 800516e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	7c1b      	ldrb	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	4a12      	ldr	r2, [pc, #72]	@ (80051c8 <USBD_CDC_Init+0x1c0>)
 800517e:	5cd1      	ldrb	r1, [r2, r3]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005186:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f002 fd1c 	bl	8007bc8 <USBD_LL_PrepareReceive>
 8005190:	e009      	b.n	80051a6 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	4a0c      	ldr	r2, [pc, #48]	@ (80051c8 <USBD_CDC_Init+0x1c0>)
 8005196:	5cd1      	ldrb	r1, [r2, r3]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800519e:	2340      	movs	r3, #64	@ 0x40
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f002 fd11 	bl	8007bc8 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	3301      	adds	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f43f af35 	beq.w	800501e <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000d9c 	.word	0x20000d9c
 80051c4:	20000d84 	.word	0x20000d84
 80051c8:	20000d88 	.word	0x20000d88
 80051cc:	20000d8c 	.word	0x20000d8c

080051d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80051dc:	2300      	movs	r3, #0
 80051de:	73fb      	strb	r3, [r7, #15]
 80051e0:	e057      	b.n	8005292 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	4a2f      	ldr	r2, [pc, #188]	@ (80052a4 <USBD_CDC_DeInit+0xd4>)
 80051e6:	5cd3      	ldrb	r3, [r2, r3]
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f002 fc23 	bl	8007a36 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	4a2c      	ldr	r2, [pc, #176]	@ (80052a4 <USBD_CDC_DeInit+0xd4>)
 80051f4:	5cd3      	ldrb	r3, [r2, r3]
 80051f6:	f003 020f 	and.w	r2, r3, #15
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3324      	adds	r3, #36	@ 0x24
 8005208:	2200      	movs	r2, #0
 800520a:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	4a26      	ldr	r2, [pc, #152]	@ (80052a8 <USBD_CDC_DeInit+0xd8>)
 8005210:	5cd3      	ldrb	r3, [r2, r3]
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f002 fc0e 	bl	8007a36 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	4a22      	ldr	r2, [pc, #136]	@ (80052a8 <USBD_CDC_DeInit+0xd8>)
 800521e:	5cd3      	ldrb	r3, [r2, r3]
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005234:	2200      	movs	r2, #0
 8005236:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	4a1c      	ldr	r2, [pc, #112]	@ (80052ac <USBD_CDC_DeInit+0xdc>)
 800523c:	5cd3      	ldrb	r3, [r2, r3]
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f002 fbf8 	bl	8007a36 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	4a18      	ldr	r2, [pc, #96]	@ (80052ac <USBD_CDC_DeInit+0xdc>)
 800524a:	5cd3      	ldrb	r3, [r2, r3]
 800524c:	f003 020f 	and.w	r2, r3, #15
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	3324      	adds	r3, #36	@ 0x24
 800525e:	2200      	movs	r2, #0
 8005260:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	4a11      	ldr	r2, [pc, #68]	@ (80052ac <USBD_CDC_DeInit+0xdc>)
 8005266:	5cd3      	ldrb	r3, [r2, r3]
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	3326      	adds	r3, #38	@ 0x26
 800527a:	2200      	movs	r2, #0
 800527c:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	7bfa      	ldrb	r2, [r7, #15]
 8005288:	4610      	mov	r0, r2
 800528a:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	3301      	adds	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0a4      	beq.n	80051e2 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000d84 	.word	0x20000d84
 80052a8:	20000d88 	.word	0x20000d88
 80052ac:	20000d8c 	.word	0x20000d8c

080052b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80052b0:	b590      	push	{r4, r7, lr}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	757b      	strb	r3, [r7, #21]
 80052d2:	e015      	b.n	8005300 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	889b      	ldrh	r3, [r3, #4]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	7d7b      	ldrb	r3, [r7, #21]
 80052dc:	496d      	ldr	r1, [pc, #436]	@ (8005494 <USBD_CDC_Setup+0x1e4>)
 80052de:	5ccb      	ldrb	r3, [r1, r3]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d007      	beq.n	80052f4 <USBD_CDC_Setup+0x44>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	889b      	ldrh	r3, [r3, #4]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	7d7b      	ldrb	r3, [r7, #21]
 80052ec:	496a      	ldr	r1, [pc, #424]	@ (8005498 <USBD_CDC_Setup+0x1e8>)
 80052ee:	5ccb      	ldrb	r3, [r1, r3]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d102      	bne.n	80052fa <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 80052f4:	7d7b      	ldrb	r3, [r7, #21]
 80052f6:	75bb      	strb	r3, [r7, #22]
      break;
 80052f8:	e005      	b.n	8005306 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80052fa:	7d7b      	ldrb	r3, [r7, #21]
 80052fc:	3301      	adds	r3, #1
 80052fe:	757b      	strb	r3, [r7, #21]
 8005300:	7d7b      	ldrb	r3, [r7, #21]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0e6      	beq.n	80052d4 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8005306:	7dbb      	ldrb	r3, [r7, #22]
 8005308:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800530c:	fb02 f303 	mul.w	r3, r2, r3
 8005310:	4a62      	ldr	r2, [pc, #392]	@ (800549c <USBD_CDC_Setup+0x1ec>)
 8005312:	4413      	add	r3, r2
 8005314:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800531e:	2b00      	cmp	r3, #0
 8005320:	d04a      	beq.n	80053b8 <USBD_CDC_Setup+0x108>
 8005322:	2b20      	cmp	r3, #32
 8005324:	f040 80aa 	bne.w	800547c <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	88db      	ldrh	r3, [r3, #6]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d038      	beq.n	80053a2 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	b25b      	sxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	da1d      	bge.n	8005376 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005340:	689c      	ldr	r4, [r3, #8]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	7859      	ldrb	r1, [r3, #1]
 8005346:	7dbb      	ldrb	r3, [r7, #22]
 8005348:	025b      	lsls	r3, r3, #9
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	441a      	add	r2, r3
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	88db      	ldrh	r3, [r3, #6]
 8005352:	7db8      	ldrb	r0, [r7, #22]
 8005354:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	88db      	ldrh	r3, [r3, #6]
 800535a:	2b07      	cmp	r3, #7
 800535c:	bf28      	it	cs
 800535e:	2307      	movcs	r3, #7
 8005360:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8005362:	7dbb      	ldrb	r3, [r7, #22]
 8005364:	025b      	lsls	r3, r3, #9
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4413      	add	r3, r2
 800536a:	89fa      	ldrh	r2, [r7, #14]
 800536c:	4619      	mov	r1, r3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f002 f929 	bl	80075c6 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8005374:	e089      	b.n	800548a <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	785a      	ldrb	r2, [r3, #1]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	88db      	ldrh	r3, [r3, #6]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800538c:	7dbb      	ldrb	r3, [r7, #22]
 800538e:	025b      	lsls	r3, r3, #9
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	18d1      	adds	r1, r2, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	88db      	ldrh	r3, [r3, #6]
 8005398:	461a      	mov	r2, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f002 f93f 	bl	800761e <USBD_CtlPrepareRx>
    break;
 80053a0:	e073      	b.n	800548a <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80053a8:	689c      	ldr	r4, [r3, #8]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	7859      	ldrb	r1, [r3, #1]
 80053ae:	7db8      	ldrb	r0, [r7, #22]
 80053b0:	2300      	movs	r3, #0
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	47a0      	blx	r4
    break;
 80053b6:	e068      	b.n	800548a <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b0b      	cmp	r3, #11
 80053be:	d852      	bhi.n	8005466 <USBD_CDC_Setup+0x1b6>
 80053c0:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <USBD_CDC_Setup+0x118>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053f9 	.word	0x080053f9
 80053cc:	08005475 	.word	0x08005475
 80053d0:	08005467 	.word	0x08005467
 80053d4:	08005467 	.word	0x08005467
 80053d8:	08005467 	.word	0x08005467
 80053dc:	08005467 	.word	0x08005467
 80053e0:	08005467 	.word	0x08005467
 80053e4:	08005467 	.word	0x08005467
 80053e8:	08005467 	.word	0x08005467
 80053ec:	08005467 	.word	0x08005467
 80053f0:	08005423 	.word	0x08005423
 80053f4:	0800544d 	.word	0x0800544d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b03      	cmp	r3, #3
 8005402:	d107      	bne.n	8005414 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005404:	f107 030a 	add.w	r3, r7, #10
 8005408:	2202      	movs	r2, #2
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f002 f8da 	bl	80075c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005412:	e032      	b.n	800547a <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f002 f864 	bl	80074e4 <USBD_CtlError>
        ret = USBD_FAIL;
 800541c:	2303      	movs	r3, #3
 800541e:	75fb      	strb	r3, [r7, #23]
      break;
 8005420:	e02b      	b.n	800547a <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b03      	cmp	r3, #3
 800542c:	d107      	bne.n	800543e <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800542e:	f107 030d 	add.w	r3, r7, #13
 8005432:	2201      	movs	r2, #1
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f002 f8c5 	bl	80075c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800543c:	e01d      	b.n	800547a <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800543e:	6839      	ldr	r1, [r7, #0]
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f002 f84f 	bl	80074e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8005446:	2303      	movs	r3, #3
 8005448:	75fb      	strb	r3, [r7, #23]
      break;
 800544a:	e016      	b.n	800547a <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b03      	cmp	r3, #3
 8005456:	d00f      	beq.n	8005478 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8005458:	6839      	ldr	r1, [r7, #0]
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f002 f842 	bl	80074e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8005460:	2303      	movs	r3, #3
 8005462:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005464:	e008      	b.n	8005478 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f002 f83b 	bl	80074e4 <USBD_CtlError>
      ret = USBD_FAIL;
 800546e:	2303      	movs	r3, #3
 8005470:	75fb      	strb	r3, [r7, #23]
      break;
 8005472:	e002      	b.n	800547a <USBD_CDC_Setup+0x1ca>
      break;
 8005474:	bf00      	nop
 8005476:	e008      	b.n	800548a <USBD_CDC_Setup+0x1da>
      break;
 8005478:	bf00      	nop
    }
    break;
 800547a:	e006      	b.n	800548a <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f002 f830 	bl	80074e4 <USBD_CtlError>
    ret = USBD_FAIL;
 8005484:	2303      	movs	r3, #3
 8005486:	75fb      	strb	r3, [r7, #23]
    break;
 8005488:	bf00      	nop
  }

  return (uint8_t)ret;
 800548a:	7dfb      	ldrb	r3, [r7, #23]
}
 800548c:	4618      	mov	r0, r3
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	bd90      	pop	{r4, r7, pc}
 8005494:	20000d90 	.word	0x20000d90
 8005498:	20000d94 	.word	0x20000d94
 800549c:	20000d9c 	.word	0x20000d9c

080054a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80054b6:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80054bc:	2300      	movs	r3, #0
 80054be:	75bb      	strb	r3, [r7, #22]
 80054c0:	e00d      	b.n	80054de <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	7dbb      	ldrb	r3, [r7, #22]
 80054c6:	4934      	ldr	r1, [pc, #208]	@ (8005598 <USBD_CDC_DataIn+0xf8>)
 80054c8:	5ccb      	ldrb	r3, [r1, r3]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d102      	bne.n	80054d8 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 80054d2:	7dbb      	ldrb	r3, [r7, #22]
 80054d4:	75fb      	strb	r3, [r7, #23]
      break;
 80054d6:	e005      	b.n	80054e4 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80054d8:	7dbb      	ldrb	r3, [r7, #22]
 80054da:	3301      	adds	r3, #1
 80054dc:	75bb      	strb	r3, [r7, #22]
 80054de:	7dbb      	ldrb	r3, [r7, #22]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0ee      	beq.n	80054c2 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80054e4:	7dfb      	ldrb	r3, [r7, #23]
 80054e6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80054ea:	fb02 f303 	mul.w	r3, r2, r3
 80054ee:	4a2b      	ldr	r2, [pc, #172]	@ (800559c <USBD_CDC_DataIn+0xfc>)
 80054f0:	4413      	add	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80054f4:	78fa      	ldrb	r2, [r7, #3]
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	3318      	adds	r3, #24
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d029      	beq.n	800555e <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	3318      	adds	r3, #24
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	78f9      	ldrb	r1, [r7, #3]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	460b      	mov	r3, r1
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	440b      	add	r3, r1
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4403      	add	r3, r0
 800552a:	331c      	adds	r3, #28
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005532:	fb01 f303 	mul.w	r3, r1, r3
 8005536:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005538:	2b00      	cmp	r3, #0
 800553a:	d110      	bne.n	800555e <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	3318      	adds	r3, #24
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005550:	78f9      	ldrb	r1, [r7, #3]
 8005552:	2300      	movs	r3, #0
 8005554:	2200      	movs	r2, #0
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f002 fb15 	bl	8007b86 <USBD_LL_Transmit>
 800555c:	e016      	b.n	800558c <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2200      	movs	r2, #0
 8005562:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00c      	beq.n	800558c <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005578:	691c      	ldr	r4, [r3, #16]
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	7df8      	ldrb	r0, [r7, #23]
 800558a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	bd90      	pop	{r4, r7, pc}
 8005596:	bf00      	nop
 8005598:	20000d84 	.word	0x20000d84
 800559c:	20000d9c 	.word	0x20000d9c

080055a0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80055b4:	2300      	movs	r3, #0
 80055b6:	73bb      	strb	r3, [r7, #14]
 80055b8:	e00b      	b.n	80055d2 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 80055ba:	7bbb      	ldrb	r3, [r7, #14]
 80055bc:	4a17      	ldr	r2, [pc, #92]	@ (800561c <USBD_CDC_DataOut+0x7c>)
 80055be:	5cd3      	ldrb	r3, [r2, r3]
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d102      	bne.n	80055cc <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ca:	e005      	b.n	80055d8 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80055cc:	7bbb      	ldrb	r3, [r7, #14]
 80055ce:	3301      	adds	r3, #1
 80055d0:	73bb      	strb	r3, [r7, #14]
 80055d2:	7bbb      	ldrb	r3, [r7, #14]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	4a0f      	ldr	r2, [pc, #60]	@ (8005620 <USBD_CDC_DataOut+0x80>)
 80055e4:	4413      	add	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f002 fb0c 	bl	8007c0a <USBD_LL_GetRxDataSize>
 80055f2:	4602      	mov	r2, r0
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800560e:	7bf8      	ldrb	r0, [r7, #15]
 8005610:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000d88 	.word	0x20000d88
 8005620:	20000d9c 	.word	0x20000d9c

08005624 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005624:	b590      	push	{r4, r7, lr}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005630:	2300      	movs	r3, #0
 8005632:	73fb      	strb	r3, [r7, #15]
 8005634:	e02d      	b.n	8005692 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800563c:	fb02 f303 	mul.w	r3, r2, r3
 8005640:	4a18      	ldr	r2, [pc, #96]	@ (80056a4 <USBD_CDC_EP0_RxReady+0x80>)
 8005642:	4413      	add	r3, r2
 8005644:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 800564c:	2303      	movs	r3, #3
 800564e:	e024      	b.n	800569a <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005656:	2b00      	cmp	r3, #0
 8005658:	d018      	beq.n	800568c <USBD_CDC_EP0_RxReady+0x68>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005660:	2bff      	cmp	r3, #255	@ 0xff
 8005662:	d013      	beq.n	800568c <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800566a:	689c      	ldr	r4, [r3, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	025b      	lsls	r3, r3, #9
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	441a      	add	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005680:	7bf8      	ldrb	r0, [r7, #15]
 8005682:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	22ff      	movs	r2, #255	@ 0xff
 8005688:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	3301      	adds	r3, #1
 8005690:	73fb      	strb	r3, [r7, #15]
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0ce      	beq.n	8005636 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd90      	pop	{r4, r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000d9c 	.word	0x20000d9c

080056a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	224b      	movs	r2, #75	@ 0x4b
 80056b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80056b6:	4b03      	ldr	r3, [pc, #12]	@ (80056c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	20000108 	.word	0x20000108

080056c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	224b      	movs	r2, #75	@ 0x4b
 80056d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80056d6:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	200000bc 	.word	0x200000bc

080056e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	224b      	movs	r2, #75	@ 0x4b
 80056f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80056f6:	4b03      	ldr	r3, [pc, #12]	@ (8005704 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20000108 	.word	0x20000108

08005708 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	220a      	movs	r2, #10
 8005714:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005716:	4b03      	ldr	r3, [pc, #12]	@ (8005724 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	20000074 	.word	0x20000074

08005728 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005738:	2303      	movs	r3, #3
 800573a:	e004      	b.n	8005746 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	4a09      	ldr	r2, [pc, #36]	@ (8005798 <USBD_CDC_SetTxBuffer+0x44>)
 8005774:	4413      	add	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	20000d9c 	.word	0x20000d9c

0800579c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80057b4:	fb02 f303 	mul.w	r3, r2, r3
 80057b8:	4a06      	ldr	r2, [pc, #24]	@ (80057d4 <USBD_CDC_SetRxBuffer+0x38>)
 80057ba:	4413      	add	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	20000d9c 	.word	0x20000d9c

080057d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	4603      	mov	r3, r0
 80057e0:	6039      	str	r1, [r7, #0]
 80057e2:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
 80057f6:	4a17      	ldr	r2, [pc, #92]	@ (8005854 <USBD_CDC_TransmitPacket+0x7c>)
 80057f8:	4413      	add	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005802:	2b00      	cmp	r3, #0
 8005804:	d121      	bne.n	800584a <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2201      	movs	r2, #1
 800580a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	4a11      	ldr	r2, [pc, #68]	@ (8005858 <USBD_CDC_TransmitPacket+0x80>)
 8005812:	5cd3      	ldrb	r3, [r2, r3]
 8005814:	f003 020f 	and.w	r2, r3, #15
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800581e:	6838      	ldr	r0, [r7, #0]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4403      	add	r3, r0
 800582a:	3318      	adds	r3, #24
 800582c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	4a09      	ldr	r2, [pc, #36]	@ (8005858 <USBD_CDC_TransmitPacket+0x80>)
 8005832:	5cd1      	ldrb	r1, [r2, r3]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005840:	6838      	ldr	r0, [r7, #0]
 8005842:	f002 f9a0 	bl	8007b86 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000d9c 	.word	0x20000d9c
 8005858:	20000d84 	.word	0x20000d84

0800585c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	4603      	mov	r3, r0
 8005864:	6039      	str	r1, [r7, #0]
 8005866:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	4a11      	ldr	r2, [pc, #68]	@ (80058bc <USBD_CDC_ReceivePacket+0x60>)
 8005878:	4413      	add	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	7c1b      	ldrb	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	4a0e      	ldr	r2, [pc, #56]	@ (80058c0 <USBD_CDC_ReceivePacket+0x64>)
 8005888:	5cd1      	ldrb	r1, [r2, r3]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005894:	6838      	ldr	r0, [r7, #0]
 8005896:	f002 f997 	bl	8007bc8 <USBD_LL_PrepareReceive>
 800589a:	e009      	b.n	80058b0 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	4a08      	ldr	r2, [pc, #32]	@ (80058c0 <USBD_CDC_ReceivePacket+0x64>)
 80058a0:	5cd1      	ldrb	r1, [r2, r3]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80058a8:	2340      	movs	r3, #64	@ 0x40
 80058aa:	6838      	ldr	r0, [r7, #0]
 80058ac:	f002 f98c 	bl	8007bc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000d9c 	.word	0x20000d9c
 80058c0:	20000d88 	.word	0x20000d88

080058c4 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	4608      	mov	r0, r1
 80058ce:	4611      	mov	r1, r2
 80058d0:	461a      	mov	r2, r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	70fb      	strb	r3, [r7, #3]
 80058d6:	460b      	mov	r3, r1
 80058d8:	70bb      	strb	r3, [r7, #2]
 80058da:	4613      	mov	r3, r2
 80058dc:	707b      	strb	r3, [r7, #1]
  desc += 9;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3309      	adds	r3, #9
 80058e2:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80058e4:	2300      	movs	r3, #0
 80058e6:	73fb      	strb	r3, [r7, #15]
 80058e8:	e05b      	b.n	80059a2 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3302      	adds	r3, #2
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	3310      	adds	r3, #16
 80058f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80058fa:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	330a      	adds	r3, #10
 8005900:	78fa      	ldrb	r2, [r7, #3]
 8005902:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	331a      	adds	r3, #26
 8005908:	78ba      	ldrb	r2, [r7, #2]
 800590a:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3322      	adds	r3, #34	@ 0x22
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3323      	adds	r3, #35	@ 0x23
 8005918:	78ba      	ldrb	r2, [r7, #2]
 800591a:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3326      	adds	r3, #38	@ 0x26
 8005920:	7e3a      	ldrb	r2, [r7, #24]
 8005922:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	332d      	adds	r3, #45	@ 0x2d
 8005928:	78ba      	ldrb	r2, [r7, #2]
 800592a:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3336      	adds	r3, #54	@ 0x36
 8005930:	7f3a      	ldrb	r2, [r7, #28]
 8005932:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	333d      	adds	r3, #61	@ 0x3d
 8005938:	787a      	ldrb	r2, [r7, #1]
 800593a:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3342      	adds	r3, #66	@ 0x42
 8005940:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	491c      	ldr	r1, [pc, #112]	@ (80059b8 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8005946:	787a      	ldrb	r2, [r7, #1]
 8005948:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	491b      	ldr	r1, [pc, #108]	@ (80059bc <USBD_Update_CDC_ACM_DESC+0xf8>)
 800594e:	7f3a      	ldrb	r2, [r7, #28]
 8005950:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	491a      	ldr	r1, [pc, #104]	@ (80059c0 <USBD_Update_CDC_ACM_DESC+0xfc>)
 8005956:	7e3a      	ldrb	r2, [r7, #24]
 8005958:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	4919      	ldr	r1, [pc, #100]	@ (80059c4 <USBD_Update_CDC_ACM_DESC+0x100>)
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	4918      	ldr	r1, [pc, #96]	@ (80059c8 <USBD_Update_CDC_ACM_DESC+0x104>)
 8005966:	78ba      	ldrb	r2, [r7, #2]
 8005968:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	4917      	ldr	r1, [pc, #92]	@ (80059cc <USBD_Update_CDC_ACM_DESC+0x108>)
 800596e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005972:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8005974:	787b      	ldrb	r3, [r7, #1]
 8005976:	3302      	adds	r3, #2
 8005978:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800597a:	787b      	ldrb	r3, [r7, #1]
 800597c:	3301      	adds	r3, #1
 800597e:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8005980:	7f3b      	ldrb	r3, [r7, #28]
 8005982:	3301      	adds	r3, #1
 8005984:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8005986:	f897 3020 	ldrb.w	r3, [r7, #32]
 800598a:	3301      	adds	r3, #1
 800598c:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	3302      	adds	r3, #2
 8005994:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	3301      	adds	r3, #1
 800599a:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	3301      	adds	r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0a0      	beq.n	80058ea <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000d84 	.word	0x20000d84
 80059bc:	20000d88 	.word	0x20000d88
 80059c0:	20000d8c 	.word	0x20000d8c
 80059c4:	20000d90 	.word	0x20000d90
 80059c8:	20000d94 	.word	0x20000d94
 80059cc:	20000d98 	.word	0x20000d98

080059d0 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 80059dc:	4b08      	ldr	r3, [pc, #32]	@ (8005a00 <USBD_COMPOSITE_Init+0x30>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	4611      	mov	r1, r2
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
 80059e8:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <USBD_COMPOSITE_Init+0x34>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	4611      	mov	r1, r2
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000080 	.word	0x20000080
 8005a04:	200001a0 	.word	0x200001a0

08005a08 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8005a14:	4b08      	ldr	r3, [pc, #32]	@ (8005a38 <USBD_COMPOSITE_DeInit+0x30>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
 8005a20:	4b06      	ldr	r3, [pc, #24]	@ (8005a3c <USBD_COMPOSITE_DeInit+0x34>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	78fa      	ldrb	r2, [r7, #3]
 8005a26:	4611      	mov	r1, r2
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000080 	.word	0x20000080
 8005a3c:	200001a0 	.word	0x200001a0

08005a40 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	73fb      	strb	r3, [r7, #15]
 8005a4e:	e019      	b.n	8005a84 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	889b      	ldrh	r3, [r3, #4]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	4915      	ldr	r1, [pc, #84]	@ (8005ab0 <USBD_COMPOSITE_Setup+0x70>)
 8005a5a:	5ccb      	ldrb	r3, [r1, r3]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d007      	beq.n	8005a70 <USBD_COMPOSITE_Setup+0x30>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	889b      	ldrh	r3, [r3, #4]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	4912      	ldr	r1, [pc, #72]	@ (8005ab4 <USBD_COMPOSITE_Setup+0x74>)
 8005a6a:	5ccb      	ldrb	r3, [r1, r3]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d106      	bne.n	8005a7e <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8005a70:	4b11      	ldr	r3, [pc, #68]	@ (8005ab8 <USBD_COMPOSITE_Setup+0x78>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	e014      	b.n	8005aa8 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	3301      	adds	r3, #1
 8005a82:	73fb      	strb	r3, [r7, #15]
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0e2      	beq.n	8005a50 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_MOUSE.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (LOBYTE(req->wIndex) == HID_KEYBOARD_ITF_NBR)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	889b      	ldrh	r3, [r3, #4]
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	4b0a      	ldr	r3, [pc, #40]	@ (8005abc <USBD_COMPOSITE_Setup+0x7c>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d106      	bne.n	8005aa6 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
 8005a98:	4b09      	ldr	r3, [pc, #36]	@ (8005ac0 <USBD_COMPOSITE_Setup+0x80>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	e000      	b.n	8005aa8 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8005aa6:	2303      	movs	r3, #3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000d90 	.word	0x20000d90
 8005ab4:	20000d94 	.word	0x20000d94
 8005ab8:	20000080 	.word	0x20000080
 8005abc:	200010c0 	.word	0x200010c0
 8005ac0:	200001a0 	.word	0x200001a0

08005ac4 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	73fb      	strb	r3, [r7, #15]
 8005ad4:	e01a      	b.n	8005b0c <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005ad6:	78fa      	ldrb	r2, [r7, #3]
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	4918      	ldr	r1, [pc, #96]	@ (8005b3c <USBD_COMPOSITE_DataIn+0x78>)
 8005adc:	5ccb      	ldrb	r3, [r1, r3]
 8005ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d007      	beq.n	8005af6 <USBD_COMPOSITE_DataIn+0x32>
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	4915      	ldr	r1, [pc, #84]	@ (8005b40 <USBD_COMPOSITE_DataIn+0x7c>)
 8005aec:	5ccb      	ldrb	r3, [r1, r3]
 8005aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d107      	bne.n	8005b06 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005af6:	4b13      	ldr	r3, [pc, #76]	@ (8005b44 <USBD_COMPOSITE_DataIn+0x80>)
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	4611      	mov	r1, r2
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	4798      	blx	r3
 8005b02:	4603      	mov	r3, r0
 8005b04:	e015      	b.n	8005b32 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0e1      	beq.n	8005ad6 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_MOUSE.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (epnum == (HID_KEYBOARD_IN_EP & 0x7F))
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <USBD_COMPOSITE_DataIn+0x84>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d107      	bne.n	8005b30 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
 8005b20:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <USBD_COMPOSITE_DataIn+0x88>)
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	78fa      	ldrb	r2, [r7, #3]
 8005b26:	4611      	mov	r1, r2
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	e000      	b.n	8005b32 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005b30:	2303      	movs	r3, #3
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000d84 	.word	0x20000d84
 8005b40:	20000d8c 	.word	0x20000d8c
 8005b44:	20000080 	.word	0x20000080
 8005b48:	2000019e 	.word	0x2000019e
 8005b4c:	200001a0 	.word	0x200001a0

08005b50 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8005b58:	4b04      	ldr	r3, [pc, #16]	@ (8005b6c <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000080 	.word	0x20000080

08005b70 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	73fb      	strb	r3, [r7, #15]
 8005be0:	e010      	b.n	8005c04 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	4a0b      	ldr	r2, [pc, #44]	@ (8005c14 <USBD_COMPOSITE_DataOut+0x44>)
 8005be6:	5cd3      	ldrb	r3, [r2, r3]
 8005be8:	78fa      	ldrb	r2, [r7, #3]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d107      	bne.n	8005bfe <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8005bee:	4b0a      	ldr	r3, [pc, #40]	@ (8005c18 <USBD_COMPOSITE_DataOut+0x48>)
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4798      	blx	r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	e006      	b.n	8005c0c <USBD_COMPOSITE_DataOut+0x3c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	3301      	adds	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0eb      	beq.n	8005be2 <USBD_COMPOSITE_DataOut+0x12>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005c0a:	2303      	movs	r3, #3
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20000d88 	.word	0x20000d88
 8005c18:	20000080 	.word	0x20000080

08005c1c <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2264      	movs	r2, #100	@ 0x64
 8005c28:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005c2a:	4b03      	ldr	r3, [pc, #12]	@ (8005c38 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	2000101c 	.word	0x2000101c

08005c3c <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2264      	movs	r2, #100	@ 0x64
 8005c48:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8005c4a:	4b03      	ldr	r3, [pc, #12]	@ (8005c58 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	20000fb8 	.word	0x20000fb8

08005c5c <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2264      	movs	r2, #100	@ 0x64
 8005c68:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005c6a:	4b03      	ldr	r3, [pc, #12]	@ (8005c78 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	2000101c 	.word	0x2000101c

08005c7c <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	220a      	movs	r2, #10
 8005c88:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8005c8a:	4b03      	ldr	r3, [pc, #12]	@ (8005c98 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	20000194 	.word	0x20000194

08005c9c <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	@ 0x28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8005caa:	4b20      	ldr	r3, [pc, #128]	@ (8005d2c <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	7afa      	ldrb	r2, [r7, #11]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d836      	bhi.n	8005d22 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	f107 0318 	add.w	r3, r7, #24
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005cca:	e01a      	b.n	8005d02 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8005ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cd0:	4a17      	ldr	r2, [pc, #92]	@ (8005d30 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8005cd2:	5cd3      	ldrb	r3, [r2, r3]
 8005cd4:	7afa      	ldrb	r2, [r7, #11]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d10e      	bne.n	8005cf8 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8005cda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cde:	f107 0014 	add.w	r0, r7, #20
 8005ce2:	4a14      	ldr	r2, [pc, #80]	@ (8005d34 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8005ce4:	2110      	movs	r1, #16
 8005ce6:	f001 ffcf 	bl	8007c88 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8005cea:	f107 0314 	add.w	r3, r7, #20
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4911      	ldr	r1, [pc, #68]	@ (8005d38 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 fc07 	bl	8007506 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005d02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0e0      	beq.n	8005ccc <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_MOUSE_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    if (index == HID_KEYBOARD_STR_DESC_IDX)
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d3c <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	7afa      	ldrb	r2, [r7, #11]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d104      	bne.n	8005d1e <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4908      	ldr	r1, [pc, #32]	@ (8005d38 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005d18:	4809      	ldr	r0, [pc, #36]	@ (8005d40 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8005d1a:	f001 fbf4 	bl	8007506 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8005d1e:	4b06      	ldr	r3, [pc, #24]	@ (8005d38 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005d20:	e000      	b.n	8005d24 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8005d22:	2300      	movs	r3, #0
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3728      	adds	r7, #40	@ 0x28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20000190 	.word	0x20000190
 8005d30:	20000d98 	.word	0x20000d98
 8005d34:	0800867c 	.word	0x0800867c
 8005d38:	20001080 	.word	0x20001080
 8005d3c:	200010c1 	.word	0x200010c1
 8005d40:	0800868c 	.word	0x0800868c

08005d44 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b089      	sub	sp, #36	@ 0x24
 8005d48:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8005d52:	2381      	movs	r3, #129	@ 0x81
 8005d54:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8005d56:	2301      	movs	r3, #1
 8005d58:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_KEYBOARD == 1)
  ptr = USBD_HID_KEYBOARD.GetFSConfigDescriptor(&len);
 8005d5e:	4b6f      	ldr	r3, [pc, #444]	@ (8005f1c <USBD_COMPOSITE_Mount_Class+0x1d8>)
 8005d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d62:	1d3a      	adds	r2, r7, #4
 8005d64:	4610      	mov	r0, r2
 8005d66:	4798      	blx	r3
 8005d68:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8005d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f20 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	7afa      	ldrb	r2, [r7, #11]
 8005d70:	7a79      	ldrb	r1, [r7, #9]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 faf0 	bl	8006358 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3309      	adds	r3, #9
 8005d7c:	88ba      	ldrh	r2, [r7, #4]
 8005d7e:	3a09      	subs	r2, #9
 8005d80:	4619      	mov	r1, r3
 8005d82:	4868      	ldr	r0, [pc, #416]	@ (8005f24 <USBD_COMPOSITE_Mount_Class+0x1e0>)
 8005d84:	f001 ffe8 	bl	8007d58 <memcpy>

  ptr = USBD_HID_KEYBOARD.GetHSConfigDescriptor(&len);
 8005d88:	4b64      	ldr	r3, [pc, #400]	@ (8005f1c <USBD_COMPOSITE_Mount_Class+0x1d8>)
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8c:	1d3a      	adds	r2, r7, #4
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4798      	blx	r3
 8005d92:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8005d94:	4b62      	ldr	r3, [pc, #392]	@ (8005f20 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	7afa      	ldrb	r2, [r7, #11]
 8005d9a:	7a79      	ldrb	r1, [r7, #9]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fadb 	bl	8006358 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3309      	adds	r3, #9
 8005da6:	88ba      	ldrh	r2, [r7, #4]
 8005da8:	3a09      	subs	r2, #9
 8005daa:	4619      	mov	r1, r3
 8005dac:	485e      	ldr	r0, [pc, #376]	@ (8005f28 <USBD_COMPOSITE_Mount_Class+0x1e4>)
 8005dae:	f001 ffd3 	bl	8007d58 <memcpy>

  in_ep_track += 1;
 8005db2:	7afb      	ldrb	r3, [r7, #11]
 8005db4:	3301      	adds	r3, #1
 8005db6:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 8005db8:	7a7b      	ldrb	r3, [r7, #9]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8005dbe:	4b58      	ldr	r3, [pc, #352]	@ (8005f20 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	4b56      	ldr	r3, [pc, #344]	@ (8005f20 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005dc8:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005dca:	4b58      	ldr	r3, [pc, #352]	@ (8005f2c <USBD_COMPOSITE_Mount_Class+0x1e8>)
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	1d3a      	adds	r2, r7, #4
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4798      	blx	r3
 8005dd4:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005dd6:	7a7b      	ldrb	r3, [r7, #9]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	b2d8      	uxtb	r0, r3
 8005ddc:	7afb      	ldrb	r3, [r7, #11]
 8005dde:	3301      	adds	r3, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	4a4f      	ldr	r2, [pc, #316]	@ (8005f20 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	7afc      	ldrb	r4, [r7, #11]
 8005de8:	7a79      	ldrb	r1, [r7, #9]
 8005dea:	9202      	str	r2, [sp, #8]
 8005dec:	7aba      	ldrb	r2, [r7, #10]
 8005dee:	9201      	str	r2, [sp, #4]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	4623      	mov	r3, r4
 8005df4:	4602      	mov	r2, r0
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff fd64 	bl	80058c4 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3309      	adds	r3, #9
 8005e00:	88ba      	ldrh	r2, [r7, #4]
 8005e02:	3a09      	subs	r2, #9
 8005e04:	4619      	mov	r1, r3
 8005e06:	484a      	ldr	r0, [pc, #296]	@ (8005f30 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8005e08:	f001 ffa6 	bl	8007d58 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005e0c:	4b47      	ldr	r3, [pc, #284]	@ (8005f2c <USBD_COMPOSITE_Mount_Class+0x1e8>)
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	1d3a      	adds	r2, r7, #4
 8005e12:	4610      	mov	r0, r2
 8005e14:	4798      	blx	r3
 8005e16:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005e18:	7a7b      	ldrb	r3, [r7, #9]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	b2d8      	uxtb	r0, r3
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	3301      	adds	r3, #1
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	4a3e      	ldr	r2, [pc, #248]	@ (8005f20 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	7afc      	ldrb	r4, [r7, #11]
 8005e2a:	7a79      	ldrb	r1, [r7, #9]
 8005e2c:	9202      	str	r2, [sp, #8]
 8005e2e:	7aba      	ldrb	r2, [r7, #10]
 8005e30:	9201      	str	r2, [sp, #4]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	4623      	mov	r3, r4
 8005e36:	4602      	mov	r2, r0
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7ff fd43 	bl	80058c4 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3309      	adds	r3, #9
 8005e42:	88ba      	ldrh	r2, [r7, #4]
 8005e44:	3a09      	subs	r2, #9
 8005e46:	4619      	mov	r1, r3
 8005e48:	483a      	ldr	r0, [pc, #232]	@ (8005f34 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005e4a:	f001 ff85 	bl	8007d58 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 8005e4e:	7afb      	ldrb	r3, [r7, #11]
 8005e50:	3302      	adds	r3, #2
 8005e52:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8005e54:	7abb      	ldrb	r3, [r7, #10]
 8005e56:	3301      	adds	r3, #1
 8005e58:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8005e5a:	7a7b      	ldrb	r3, [r7, #9]
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8005e60:	4b2f      	ldr	r3, [pc, #188]	@ (8005f20 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	4b2d      	ldr	r3, [pc, #180]	@ (8005f20 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005e6a:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8005e6c:	2364      	movs	r3, #100	@ 0x64
 8005e6e:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8005e70:	4b31      	ldr	r3, [pc, #196]	@ (8005f38 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2209      	movs	r2, #9
 8005e78:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	2202      	movs	r2, #2
 8005e80:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3302      	adds	r3, #2
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3303      	adds	r3, #3
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	7a7a      	ldrb	r2, [r7, #9]
 8005ea0:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3305      	adds	r3, #5
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3306      	adds	r3, #6
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3307      	adds	r3, #7
 8005eb6:	22c0      	movs	r2, #192	@ 0xc0
 8005eb8:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	2232      	movs	r2, #50	@ 0x32
 8005ec0:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8005ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f3c <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8005ec4:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2209      	movs	r2, #9
 8005eca:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3302      	adds	r3, #2
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3303      	adds	r3, #3
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	7a7a      	ldrb	r2, [r7, #9]
 8005ef2:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3305      	adds	r3, #5
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3306      	adds	r3, #6
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3307      	adds	r3, #7
 8005f08:	22c0      	movs	r2, #192	@ 0xc0
 8005f0a:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	2232      	movs	r2, #50	@ 0x32
 8005f12:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd90      	pop	{r4, r7, pc}
 8005f1c:	200001a0 	.word	0x200001a0
 8005f20:	20000190 	.word	0x20000190
 8005f24:	20000fc1 	.word	0x20000fc1
 8005f28:	20001025 	.word	0x20001025
 8005f2c:	20000080 	.word	0x20000080
 8005f30:	20000fda 	.word	0x20000fda
 8005f34:	2000103e 	.word	0x2000103e
 8005f38:	2000101c 	.word	0x2000101c
 8005f3c:	20000fb8 	.word	0x20000fb8

08005f40 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_Keyboard_HandleTypeDef *hhid;

  hhid = &USBD_HID_KBD_Instace;
 8005f4c:	4b24      	ldr	r3, [pc, #144]	@ (8005fe0 <USBD_HID_Init+0xa0>)
 8005f4e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d105      	bne.n	8005f62 <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Keyboard = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
    return (uint8_t)USBD_EMEM;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e03a      	b.n	8005fd8 <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Keyboard = (void *)hhid;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	7c1b      	ldrb	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10d      	bne.n	8005f8e <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_HS_BINTERVAL;
 8005f72:	4b1c      	ldr	r3, [pc, #112]	@ (8005fe4 <USBD_HID_Init+0xa4>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	f003 020f 	and.w	r2, r3, #15
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	3326      	adds	r3, #38	@ 0x26
 8005f88:	2207      	movs	r2, #7
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	e00c      	b.n	8005fa8 <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_FS_BINTERVAL;
 8005f8e:	4b15      	ldr	r3, [pc, #84]	@ (8005fe4 <USBD_HID_Init+0xa4>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f003 020f 	and.w	r2, r3, #15
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3326      	adds	r3, #38	@ 0x26
 8005fa4:	220a      	movs	r2, #10
 8005fa6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_KEYBOARD_IN_EP, USBD_EP_TYPE_INTR, HID_KEYBOARD_EPIN_SIZE);
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe4 <USBD_HID_Init+0xa4>)
 8005faa:	7819      	ldrb	r1, [r3, #0]
 8005fac:	2308      	movs	r3, #8
 8005fae:	2203      	movs	r2, #3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 fd1a 	bl	80079ea <USBD_LL_OpenEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 1U;
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe4 <USBD_HID_Init+0xa4>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	f003 020f 	and.w	r2, r3, #15
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	3324      	adds	r3, #36	@ 0x24
 8005fcc:	2201      	movs	r2, #1
 8005fce:	801a      	strh	r2, [r3, #0]

  hhid->state = KEYBOARD_HID_IDLE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	200010c4 	.word	0x200010c4
 8005fe4:	2000019e 	.word	0x2000019e

08005fe8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_KEYBOARD_IN_EP);
 8005ff4:	4b16      	ldr	r3, [pc, #88]	@ (8006050 <USBD_HID_DeInit+0x68>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fd1b 	bl	8007a36 <USBD_LL_CloseEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 0U;
 8006000:	4b13      	ldr	r3, [pc, #76]	@ (8006050 <USBD_HID_DeInit+0x68>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 020f 	and.w	r2, r3, #15
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	3324      	adds	r3, #36	@ 0x24
 8006016:	2200      	movs	r2, #0
 8006018:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = 0U;
 800601a:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <USBD_HID_DeInit+0x68>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f003 020f 	and.w	r2, r3, #15
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	3326      	adds	r3, #38	@ 0x26
 8006030:	2200      	movs	r2, #0
 8006032:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Keyboard != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Keyboard);
#endif
    pdev->pClassData_HID_Keyboard = NULL;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  }

  return (uint8_t)USBD_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	2000019e 	.word	0x2000019e

08006054 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006064:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006074:	2303      	movs	r3, #3
 8006076:	e0e8      	b.n	800624a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006080:	2b00      	cmp	r3, #0
 8006082:	d046      	beq.n	8006112 <USBD_HID_Setup+0xbe>
 8006084:	2b20      	cmp	r3, #32
 8006086:	f040 80d8 	bne.w	800623a <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	3b02      	subs	r3, #2
 8006090:	2b09      	cmp	r3, #9
 8006092:	d836      	bhi.n	8006102 <USBD_HID_Setup+0xae>
 8006094:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <USBD_HID_Setup+0x48>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060f3 	.word	0x080060f3
 80060a0:	080060d3 	.word	0x080060d3
 80060a4:	08006103 	.word	0x08006103
 80060a8:	08006103 	.word	0x08006103
 80060ac:	08006103 	.word	0x08006103
 80060b0:	08006103 	.word	0x08006103
 80060b4:	08006103 	.word	0x08006103
 80060b8:	08006103 	.word	0x08006103
 80060bc:	080060e1 	.word	0x080060e1
 80060c0:	080060c5 	.word	0x080060c5
    {
    case HID_KEYBOARD_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	885b      	ldrh	r3, [r3, #2]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	601a      	str	r2, [r3, #0]
      break;
 80060d0:	e01e      	b.n	8006110 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 fa74 	bl	80075c6 <USBD_CtlSendData>
      break;
 80060de:	e017      	b.n	8006110 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	885b      	ldrh	r3, [r3, #2]
 80060e4:	0a1b      	lsrs	r3, r3, #8
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	461a      	mov	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	605a      	str	r2, [r3, #4]
      break;
 80060f0:	e00e      	b.n	8006110 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3304      	adds	r3, #4
 80060f6:	2201      	movs	r2, #1
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fa63 	bl	80075c6 <USBD_CtlSendData>
      break;
 8006100:	e006      	b.n	8006110 <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 f9ed 	bl	80074e4 <USBD_CtlError>
      ret = USBD_FAIL;
 800610a:	2303      	movs	r3, #3
 800610c:	75fb      	strb	r3, [r7, #23]
      break;
 800610e:	bf00      	nop
    }
    break;
 8006110:	e09a      	b.n	8006248 <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b0b      	cmp	r3, #11
 8006118:	f200 8086 	bhi.w	8006228 <USBD_HID_Setup+0x1d4>
 800611c:	a201      	add	r2, pc, #4	@ (adr r2, 8006124 <USBD_HID_Setup+0xd0>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006155 	.word	0x08006155
 8006128:	08006237 	.word	0x08006237
 800612c:	08006229 	.word	0x08006229
 8006130:	08006229 	.word	0x08006229
 8006134:	08006229 	.word	0x08006229
 8006138:	08006229 	.word	0x08006229
 800613c:	0800617f 	.word	0x0800617f
 8006140:	08006229 	.word	0x08006229
 8006144:	08006229 	.word	0x08006229
 8006148:	08006229 	.word	0x08006229
 800614c:	080061d7 	.word	0x080061d7
 8006150:	08006201 	.word	0x08006201
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b03      	cmp	r3, #3
 800615e:	d107      	bne.n	8006170 <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006160:	f107 030a 	add.w	r3, r7, #10
 8006164:	2202      	movs	r2, #2
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f001 fa2c 	bl	80075c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800616e:	e063      	b.n	8006238 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 f9b6 	bl	80074e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8006178:	2303      	movs	r3, #3
 800617a:	75fb      	strb	r3, [r7, #23]
      break;
 800617c:	e05c      	b.n	8006238 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_KEYBOARD_REPORT_DESC)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	885b      	ldrh	r3, [r3, #2]
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b22      	cmp	r3, #34	@ 0x22
 8006188:	d108      	bne.n	800619c <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	88db      	ldrh	r3, [r3, #6]
 800618e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006190:	bf28      	it	cs
 8006192:	233f      	movcs	r3, #63	@ 0x3f
 8006194:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_KEYBOARD_ReportDesc;
 8006196:	4b2f      	ldr	r3, [pc, #188]	@ (8006254 <USBD_HID_Setup+0x200>)
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	e015      	b.n	80061c8 <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_KEYBOARD_DESCRIPTOR_TYPE)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	885b      	ldrh	r3, [r3, #2]
 80061a0:	0a1b      	lsrs	r3, r3, #8
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b21      	cmp	r3, #33	@ 0x21
 80061a6:	d108      	bne.n	80061ba <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_KEYBOARD_Desc;
 80061a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006258 <USBD_HID_Setup+0x204>)
 80061aa:	613b      	str	r3, [r7, #16]
        len = MIN(HID_KEYBOARD_DESC_SIZE, req->wLength);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	88db      	ldrh	r3, [r3, #6]
 80061b0:	2b09      	cmp	r3, #9
 80061b2:	bf28      	it	cs
 80061b4:	2309      	movcs	r3, #9
 80061b6:	82bb      	strh	r3, [r7, #20]
 80061b8:	e006      	b.n	80061c8 <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 f991 	bl	80074e4 <USBD_CtlError>
        ret = USBD_FAIL;
 80061c2:	2303      	movs	r3, #3
 80061c4:	75fb      	strb	r3, [r7, #23]
        break;
 80061c6:	e037      	b.n	8006238 <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80061c8:	8abb      	ldrh	r3, [r7, #20]
 80061ca:	461a      	mov	r2, r3
 80061cc:	6939      	ldr	r1, [r7, #16]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 f9f9 	bl	80075c6 <USBD_CtlSendData>
      break;
 80061d4:	e030      	b.n	8006238 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d107      	bne.n	80061f2 <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3308      	adds	r3, #8
 80061e6:	2201      	movs	r2, #1
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f001 f9eb 	bl	80075c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80061f0:	e022      	b.n	8006238 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 f975 	bl	80074e4 <USBD_CtlError>
        ret = USBD_FAIL;
 80061fa:	2303      	movs	r3, #3
 80061fc:	75fb      	strb	r3, [r7, #23]
      break;
 80061fe:	e01b      	b.n	8006238 <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b03      	cmp	r3, #3
 800620a:	d106      	bne.n	800621a <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	885b      	ldrh	r3, [r3, #2]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006218:	e00e      	b.n	8006238 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 f961 	bl	80074e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8006222:	2303      	movs	r3, #3
 8006224:	75fb      	strb	r3, [r7, #23]
      break;
 8006226:	e007      	b.n	8006238 <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 f95a 	bl	80074e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	75fb      	strb	r3, [r7, #23]
      break;
 8006234:	e000      	b.n	8006238 <USBD_HID_Setup+0x1e4>
      break;
 8006236:	bf00      	nop
    }
    break;
 8006238:	e006      	b.n	8006248 <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 f951 	bl	80074e4 <USBD_CtlError>
    ret = USBD_FAIL;
 8006242:	2303      	movs	r3, #3
 8006244:	75fb      	strb	r3, [r7, #23]
    break;
 8006246:	bf00      	nop
  }

  return (uint8_t)ret;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	2000023c 	.word	0x2000023c
 8006258:	20000224 	.word	0x20000224

0800625c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2222      	movs	r2, #34	@ 0x22
 8006268:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 800626a:	4b03      	ldr	r3, [pc, #12]	@ (8006278 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	200001dc 	.word	0x200001dc

0800627c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgHSDesc);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2222      	movs	r2, #34	@ 0x22
 8006288:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgHSDesc;
 800628a:	4b03      	ldr	r3, [pc, #12]	@ (8006298 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	20000200 	.word	0x20000200

0800629c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2222      	movs	r2, #34	@ 0x22
 80062a8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 80062aa:	4b03      	ldr	r3, [pc, #12]	@ (80062b8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	200001dc 	.word	0x200001dc

080062bc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard)->state = KEYBOARD_HID_IDLE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062ce:	2200      	movs	r2, #0
 80062d0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	220a      	movs	r2, #10
 80062ec:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80062ee:	4b03      	ldr	r3, [pc, #12]	@ (80062fc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20000230 	.word	0x20000230

08006300 <USBD_HID_Keybaord_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_Keybaord_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006314:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <USBD_HID_Keybaord_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800631c:	2303      	movs	r3, #3
 800631e:	e014      	b.n	800634a <USBD_HID_Keybaord_SendReport+0x4a>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b03      	cmp	r3, #3
 800632a:	d10d      	bne.n	8006348 <USBD_HID_Keybaord_SendReport+0x48>
  {
    if (hhid->state == KEYBOARD_HID_IDLE)
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	7b1b      	ldrb	r3, [r3, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d109      	bne.n	8006348 <USBD_HID_Keybaord_SendReport+0x48>
    {
      hhid->state = KEYBOARD_HID_BUSY;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2201      	movs	r2, #1
 8006338:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_KEYBOARD_IN_EP, report, len);
 800633a:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <USBD_HID_Keybaord_SendReport+0x54>)
 800633c:	7819      	ldrb	r1, [r3, #0]
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f001 fc1f 	bl	8007b86 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	2000019e 	.word	0x2000019e

08006358 <USBD_Update_HID_KBD_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_KBD_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	4608      	mov	r0, r1
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	4603      	mov	r3, r0
 8006368:	70fb      	strb	r3, [r7, #3]
 800636a:	460b      	mov	r3, r1
 800636c:	70bb      	strb	r3, [r7, #2]
 800636e:	4613      	mov	r3, r2
 8006370:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	330b      	adds	r3, #11
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3311      	adds	r3, #17
 800637e:	787a      	ldrb	r2, [r7, #1]
 8006380:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	331d      	adds	r3, #29
 8006386:	78ba      	ldrb	r2, [r7, #2]
 8006388:	701a      	strb	r2, [r3, #0]

  HID_KEYBOARD_IN_EP = in_ep;
 800638a:	4a07      	ldr	r2, [pc, #28]	@ (80063a8 <USBD_Update_HID_KBD_DESC+0x50>)
 800638c:	78bb      	ldrb	r3, [r7, #2]
 800638e:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_ITF_NBR = itf_no;
 8006390:	4a06      	ldr	r2, [pc, #24]	@ (80063ac <USBD_Update_HID_KBD_DESC+0x54>)
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_STR_DESC_IDX = str_idx;
 8006396:	4a06      	ldr	r2, [pc, #24]	@ (80063b0 <USBD_Update_HID_KBD_DESC+0x58>)
 8006398:	787b      	ldrb	r3, [r7, #1]
 800639a:	7013      	strb	r3, [r2, #0]
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	2000019e 	.word	0x2000019e
 80063ac:	200010c0 	.word	0x200010c0
 80063b0:	200010c1 	.word	0x200010c1

080063b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e01b      	b.n	8006404 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	79fa      	ldrb	r2, [r7, #7]
 80063f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f001 fa7d 	bl	80078f8 <USBD_LL_Init>
 80063fe:	4603      	mov	r3, r0
 8006400:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006402:	7dfb      	ldrb	r3, [r7, #23]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006420:	2303      	movs	r3, #3
 8006422:	e02d      	b.n	8006480 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	7c1b      	ldrb	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d112      	bne.n	800645a <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800643a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01e      	beq.n	800647e <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006448:	f107 020e 	add.w	r2, r7, #14
 800644c:	4610      	mov	r0, r2
 800644e:	4798      	blx	r3
 8006450:	4602      	mov	r2, r0
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 8006458:	e011      	b.n	800647e <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00b      	beq.n	800647e <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646e:	f107 020e 	add.w	r2, r7, #14
 8006472:	4610      	mov	r0, r2
 8006474:	4798      	blx	r3
 8006476:	4602      	mov	r2, r0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 fa8f 	bl	80079b4 <USBD_LL_Start>
 8006496:	4603      	mov	r3, r0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	460b      	mov	r3, r1
 80064c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80064c2:	2303      	movs	r3, #3
 80064c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d009      	beq.n	80064e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	78fa      	ldrb	r2, [r7, #3]
 80064da:	4611      	mov	r1, r2
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	4798      	blx	r3
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	460b      	mov	r3, r1
 80064f8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	78fa      	ldrb	r2, [r7, #3]
 800650e:	4611      	mov	r1, r2
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
  }

  return USBD_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 ff9d 	bl	8007470 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006544:	461a      	mov	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	2b02      	cmp	r3, #2
 8006558:	d01a      	beq.n	8006590 <USBD_LL_SetupStage+0x72>
 800655a:	2b02      	cmp	r3, #2
 800655c:	d822      	bhi.n	80065a4 <USBD_LL_SetupStage+0x86>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <USBD_LL_SetupStage+0x4a>
 8006562:	2b01      	cmp	r3, #1
 8006564:	d00a      	beq.n	800657c <USBD_LL_SetupStage+0x5e>
 8006566:	e01d      	b.n	80065a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fa5d 	bl	8006a30 <USBD_StdDevReq>
 8006576:	4603      	mov	r3, r0
 8006578:	73fb      	strb	r3, [r7, #15]
      break;
 800657a:	e020      	b.n	80065be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fac1 	bl	8006b0c <USBD_StdItfReq>
 800658a:	4603      	mov	r3, r0
 800658c:	73fb      	strb	r3, [r7, #15]
      break;
 800658e:	e016      	b.n	80065be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fb00 	bl	8006b9e <USBD_StdEPReq>
 800659e:	4603      	mov	r3, r0
 80065a0:	73fb      	strb	r3, [r7, #15]
      break;
 80065a2:	e00c      	b.n	80065be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80065aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 fa5e 	bl	8007a74 <USBD_LL_StallEP>
 80065b8:	4603      	mov	r3, r0
 80065ba:	73fb      	strb	r3, [r7, #15]
      break;
 80065bc:	bf00      	nop
  }

  return ret;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	460b      	mov	r3, r1
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065d6:	7afb      	ldrb	r3, [r7, #11]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d138      	bne.n	800664e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80065e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d14a      	bne.n	8006684 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d913      	bls.n	8006622 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	1ad2      	subs	r2, r2, r3
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4293      	cmp	r3, r2
 8006612:	bf28      	it	cs
 8006614:	4613      	movcs	r3, r2
 8006616:	461a      	mov	r2, r3
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f001 f81c 	bl	8007658 <USBD_CtlContinueRx>
 8006620:	e030      	b.n	8006684 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d10b      	bne.n	8006646 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d005      	beq.n	8006646 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f001 f817 	bl	800767a <USBD_CtlSendStatus>
 800664c:	e01a      	b.n	8006684 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d114      	bne.n	8006684 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	7afa      	ldrb	r2, [r7, #11]
 8006670:	4611      	mov	r1, r2
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	4798      	blx	r3
 8006676:	4603      	mov	r3, r0
 8006678:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	e000      	b.n	8006686 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	460b      	mov	r3, r1
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d16b      	bne.n	800677a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3314      	adds	r3, #20
 80066a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d156      	bne.n	8006760 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d914      	bls.n	80066e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	1ad2      	subs	r2, r2, r3
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	461a      	mov	r2, r3
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 ff91 	bl	80075fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066da:	2300      	movs	r3, #0
 80066dc:	2200      	movs	r2, #0
 80066de:	2100      	movs	r1, #0
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f001 fa71 	bl	8007bc8 <USBD_LL_PrepareReceive>
 80066e6:	e03b      	b.n	8006760 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d11c      	bne.n	800672e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d316      	bcc.n	800672e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800670a:	429a      	cmp	r2, r3
 800670c:	d20f      	bcs.n	800672e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800670e:	2200      	movs	r2, #0
 8006710:	2100      	movs	r1, #0
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 ff72 	bl	80075fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006720:	2300      	movs	r3, #0
 8006722:	2200      	movs	r2, #0
 8006724:	2100      	movs	r1, #0
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f001 fa4e 	bl	8007bc8 <USBD_LL_PrepareReceive>
 800672c:	e018      	b.n	8006760 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b03      	cmp	r3, #3
 8006738:	d10b      	bne.n	8006752 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006752:	2180      	movs	r1, #128	@ 0x80
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f001 f98d 	bl	8007a74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 ffa0 	bl	80076a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006766:	2b01      	cmp	r3, #1
 8006768:	d122      	bne.n	80067b0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff fe98 	bl	80064a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006778:	e01a      	b.n	80067b0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b03      	cmp	r3, #3
 8006784:	d114      	bne.n	80067b0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	7afa      	ldrb	r2, [r7, #11]
 800679c:	4611      	mov	r1, r2
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	4798      	blx	r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	e000      	b.n	80067b2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e02a      	b.n	8006844 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d009      	beq.n	800680e <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6852      	ldr	r2, [r2, #4]
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	4611      	mov	r1, r2
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800680e:	2340      	movs	r3, #64	@ 0x40
 8006810:	2200      	movs	r2, #0
 8006812:	2100      	movs	r1, #0
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 f8e8 	bl	80079ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2240      	movs	r2, #64	@ 0x40
 8006826:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800682a:	2340      	movs	r3, #64	@ 0x40
 800682c:	2200      	movs	r2, #0
 800682e:	2180      	movs	r1, #128	@ 0x80
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 f8da 	bl	80079ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2240      	movs	r2, #64	@ 0x40
 8006840:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800687a:	b2da      	uxtb	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2204      	movs	r2, #4
 8006886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d106      	bne.n	80068ba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80068da:	2303      	movs	r3, #3
 80068dc:	e012      	b.n	8006904 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d10b      	bne.n	8006902 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006922:	2303      	movs	r3, #3
 8006924:	e014      	b.n	8006950 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b03      	cmp	r3, #3
 8006930:	d10d      	bne.n	800694e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	78fa      	ldrb	r2, [r7, #3]
 8006948:	4611      	mov	r1, r2
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800696e:	2303      	movs	r3, #3
 8006970:	e014      	b.n	800699c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b03      	cmp	r3, #3
 800697c:	d10d      	bne.n	800699a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006992:	78fa      	ldrb	r2, [r7, #3]
 8006994:	4611      	mov	r1, r2
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d009      	beq.n	80069e8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6852      	ldr	r2, [r2, #4]
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	4611      	mov	r1, r2
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
  }

  return USBD_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	3301      	adds	r3, #1
 8006a08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a10:	8a3b      	ldrh	r3, [r7, #16]
 8006a12:	021b      	lsls	r3, r3, #8
 8006a14:	b21a      	sxth	r2, r3
 8006a16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	b21b      	sxth	r3, r3
 8006a1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a20:	89fb      	ldrh	r3, [r7, #14]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
	...

08006a30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a46:	2b40      	cmp	r3, #64	@ 0x40
 8006a48:	d005      	beq.n	8006a56 <USBD_StdDevReq+0x26>
 8006a4a:	2b40      	cmp	r3, #64	@ 0x40
 8006a4c:	d853      	bhi.n	8006af6 <USBD_StdDevReq+0xc6>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <USBD_StdDevReq+0x3a>
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d14f      	bne.n	8006af6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]
      break;
 8006a68:	e04a      	b.n	8006b00 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	785b      	ldrb	r3, [r3, #1]
 8006a6e:	2b09      	cmp	r3, #9
 8006a70:	d83b      	bhi.n	8006aea <USBD_StdDevReq+0xba>
 8006a72:	a201      	add	r2, pc, #4	@ (adr r2, 8006a78 <USBD_StdDevReq+0x48>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006acd 	.word	0x08006acd
 8006a7c:	08006ae1 	.word	0x08006ae1
 8006a80:	08006aeb 	.word	0x08006aeb
 8006a84:	08006ad7 	.word	0x08006ad7
 8006a88:	08006aeb 	.word	0x08006aeb
 8006a8c:	08006aab 	.word	0x08006aab
 8006a90:	08006aa1 	.word	0x08006aa1
 8006a94:	08006aeb 	.word	0x08006aeb
 8006a98:	08006ac3 	.word	0x08006ac3
 8006a9c:	08006ab5 	.word	0x08006ab5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f9de 	bl	8006e64 <USBD_GetDescriptor>
          break;
 8006aa8:	e024      	b.n	8006af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fb55 	bl	800715c <USBD_SetAddress>
          break;
 8006ab2:	e01f      	b.n	8006af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fb94 	bl	80071e4 <USBD_SetConfig>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
          break;
 8006ac0:	e018      	b.n	8006af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fc33 	bl	8007330 <USBD_GetConfig>
          break;
 8006aca:	e013      	b.n	8006af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fc64 	bl	800739c <USBD_GetStatus>
          break;
 8006ad4:	e00e      	b.n	8006af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fc93 	bl	8007404 <USBD_SetFeature>
          break;
 8006ade:	e009      	b.n	8006af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fca2 	bl	800742c <USBD_ClrFeature>
          break;
 8006ae8:	e004      	b.n	8006af4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fcf9 	bl	80074e4 <USBD_CtlError>
          break;
 8006af2:	bf00      	nop
      }
      break;
 8006af4:	e004      	b.n	8006b00 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fcf3 	bl	80074e4 <USBD_CtlError>
      break;
 8006afe:	bf00      	nop
  }

  return ret;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop

08006b0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b22:	2b40      	cmp	r3, #64	@ 0x40
 8006b24:	d005      	beq.n	8006b32 <USBD_StdItfReq+0x26>
 8006b26:	2b40      	cmp	r3, #64	@ 0x40
 8006b28:	d82f      	bhi.n	8006b8a <USBD_StdItfReq+0x7e>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <USBD_StdItfReq+0x26>
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d12b      	bne.n	8006b8a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d81d      	bhi.n	8006b7c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	889b      	ldrh	r3, [r3, #4]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b0f      	cmp	r3, #15
 8006b48:	d813      	bhi.n	8006b72 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	88db      	ldrh	r3, [r3, #6]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d110      	bne.n	8006b86 <USBD_StdItfReq+0x7a>
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10d      	bne.n	8006b86 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fd85 	bl	800767a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b70:	e009      	b.n	8006b86 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fcb5 	bl	80074e4 <USBD_CtlError>
          break;
 8006b7a:	e004      	b.n	8006b86 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fcb0 	bl	80074e4 <USBD_CtlError>
          break;
 8006b84:	e000      	b.n	8006b88 <USBD_StdItfReq+0x7c>
          break;
 8006b86:	bf00      	nop
      }
      break;
 8006b88:	e004      	b.n	8006b94 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fca9 	bl	80074e4 <USBD_CtlError>
      break;
 8006b92:	bf00      	nop
  }

  return ret;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	889b      	ldrh	r3, [r3, #4]
 8006bb0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bba:	2b40      	cmp	r3, #64	@ 0x40
 8006bbc:	d007      	beq.n	8006bce <USBD_StdEPReq+0x30>
 8006bbe:	2b40      	cmp	r3, #64	@ 0x40
 8006bc0:	f200 8145 	bhi.w	8006e4e <USBD_StdEPReq+0x2b0>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00c      	beq.n	8006be2 <USBD_StdEPReq+0x44>
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	f040 8140 	bne.w	8006e4e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
      break;
 8006be0:	e13a      	b.n	8006e58 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d007      	beq.n	8006bfa <USBD_StdEPReq+0x5c>
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	f300 8129 	bgt.w	8006e42 <USBD_StdEPReq+0x2a4>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d07f      	beq.n	8006cf4 <USBD_StdEPReq+0x156>
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d03c      	beq.n	8006c72 <USBD_StdEPReq+0xd4>
 8006bf8:	e123      	b.n	8006e42 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d002      	beq.n	8006c0c <USBD_StdEPReq+0x6e>
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d016      	beq.n	8006c38 <USBD_StdEPReq+0x9a>
 8006c0a:	e02c      	b.n	8006c66 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00d      	beq.n	8006c2e <USBD_StdEPReq+0x90>
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b80      	cmp	r3, #128	@ 0x80
 8006c16:	d00a      	beq.n	8006c2e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 ff29 	bl	8007a74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c22:	2180      	movs	r1, #128	@ 0x80
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 ff25 	bl	8007a74 <USBD_LL_StallEP>
 8006c2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c2c:	e020      	b.n	8006c70 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fc57 	bl	80074e4 <USBD_CtlError>
              break;
 8006c36:	e01b      	b.n	8006c70 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	885b      	ldrh	r3, [r3, #2]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10e      	bne.n	8006c5e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <USBD_StdEPReq+0xc0>
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b80      	cmp	r3, #128	@ 0x80
 8006c4a:	d008      	beq.n	8006c5e <USBD_StdEPReq+0xc0>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	88db      	ldrh	r3, [r3, #6]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 ff0b 	bl	8007a74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fd0b 	bl	800767a <USBD_CtlSendStatus>

              break;
 8006c64:	e004      	b.n	8006c70 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fc3b 	bl	80074e4 <USBD_CtlError>
              break;
 8006c6e:	bf00      	nop
          }
          break;
 8006c70:	e0ec      	b.n	8006e4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d002      	beq.n	8006c84 <USBD_StdEPReq+0xe6>
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d016      	beq.n	8006cb0 <USBD_StdEPReq+0x112>
 8006c82:	e030      	b.n	8006ce6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <USBD_StdEPReq+0x108>
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	2b80      	cmp	r3, #128	@ 0x80
 8006c8e:	d00a      	beq.n	8006ca6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 feed 	bl	8007a74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c9a:	2180      	movs	r1, #128	@ 0x80
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fee9 	bl	8007a74 <USBD_LL_StallEP>
 8006ca2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ca4:	e025      	b.n	8006cf2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fc1b 	bl	80074e4 <USBD_CtlError>
              break;
 8006cae:	e020      	b.n	8006cf2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	885b      	ldrh	r3, [r3, #2]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11b      	bne.n	8006cf0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fef3 	bl	8007ab2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fcd4 	bl	800767a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	4798      	blx	r3
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006ce4:	e004      	b.n	8006cf0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fbfb 	bl	80074e4 <USBD_CtlError>
              break;
 8006cee:	e000      	b.n	8006cf2 <USBD_StdEPReq+0x154>
              break;
 8006cf0:	bf00      	nop
          }
          break;
 8006cf2:	e0ab      	b.n	8006e4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d002      	beq.n	8006d06 <USBD_StdEPReq+0x168>
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d032      	beq.n	8006d6a <USBD_StdEPReq+0x1cc>
 8006d04:	e097      	b.n	8006e36 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d007      	beq.n	8006d1c <USBD_StdEPReq+0x17e>
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	2b80      	cmp	r3, #128	@ 0x80
 8006d10:	d004      	beq.n	8006d1c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fbe5 	bl	80074e4 <USBD_CtlError>
                break;
 8006d1a:	e091      	b.n	8006e40 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	da0b      	bge.n	8006d3c <USBD_StdEPReq+0x19e>
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	3310      	adds	r3, #16
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4413      	add	r3, r2
 8006d38:	3304      	adds	r3, #4
 8006d3a:	e00b      	b.n	8006d54 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	4413      	add	r3, r2
 8006d52:	3304      	adds	r3, #4
 8006d54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fc2f 	bl	80075c6 <USBD_CtlSendData>
              break;
 8006d68:	e06a      	b.n	8006e40 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da11      	bge.n	8006d96 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	f003 020f 	and.w	r2, r3, #15
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	3324      	adds	r3, #36	@ 0x24
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d117      	bne.n	8006dbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fba8 	bl	80074e4 <USBD_CtlError>
                  break;
 8006d94:	e054      	b.n	8006e40 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	f003 020f 	and.w	r2, r3, #15
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d104      	bne.n	8006dbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fb95 	bl	80074e4 <USBD_CtlError>
                  break;
 8006dba:	e041      	b.n	8006e40 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	da0b      	bge.n	8006ddc <USBD_StdEPReq+0x23e>
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	3310      	adds	r3, #16
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3304      	adds	r3, #4
 8006dda:	e00b      	b.n	8006df4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	4413      	add	r3, r2
 8006df2:	3304      	adds	r3, #4
 8006df4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <USBD_StdEPReq+0x264>
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	2b80      	cmp	r3, #128	@ 0x80
 8006e00:	d103      	bne.n	8006e0a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e00e      	b.n	8006e28 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fe6e 	bl	8007af0 <USBD_LL_IsStallEP>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e002      	b.n	8006e28 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fbc9 	bl	80075c6 <USBD_CtlSendData>
              break;
 8006e34:	e004      	b.n	8006e40 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fb53 	bl	80074e4 <USBD_CtlError>
              break;
 8006e3e:	bf00      	nop
          }
          break;
 8006e40:	e004      	b.n	8006e4c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fb4d 	bl	80074e4 <USBD_CtlError>
          break;
 8006e4a:	bf00      	nop
      }
      break;
 8006e4c:	e004      	b.n	8006e58 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fb47 	bl	80074e4 <USBD_CtlError>
      break;
 8006e56:	bf00      	nop
  }

  return ret;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	0a1b      	lsrs	r3, r3, #8
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	2b06      	cmp	r3, #6
 8006e86:	f200 813b 	bhi.w	8007100 <USBD_GetDescriptor+0x29c>
 8006e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e90 <USBD_GetDescriptor+0x2c>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006ead 	.word	0x08006ead
 8006e94:	08006ec5 	.word	0x08006ec5
 8006e98:	08006f05 	.word	0x08006f05
 8006e9c:	08007101 	.word	0x08007101
 8006ea0:	08007101 	.word	0x08007101
 8006ea4:	080070a1 	.word	0x080070a1
 8006ea8:	080070cd 	.word	0x080070cd
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	7c12      	ldrb	r2, [r2, #16]
 8006eb8:	f107 0108 	add.w	r1, r7, #8
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4798      	blx	r3
 8006ec0:	60f8      	str	r0, [r7, #12]
      break;
 8006ec2:	e125      	b.n	8007110 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7c1b      	ldrb	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10d      	bne.n	8006ee8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed4:	f107 0208 	add.w	r2, r7, #8
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ee6:	e113      	b.n	8007110 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	f107 0208 	add.w	r2, r7, #8
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
 8006ef8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	2202      	movs	r2, #2
 8006f00:	701a      	strb	r2, [r3, #0]
      break;
 8006f02:	e105      	b.n	8007110 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	885b      	ldrh	r3, [r3, #2]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	f200 80ac 	bhi.w	8007068 <USBD_GetDescriptor+0x204>
 8006f10:	a201      	add	r2, pc, #4	@ (adr r2, 8006f18 <USBD_GetDescriptor+0xb4>)
 8006f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f16:	bf00      	nop
 8006f18:	08006f31 	.word	0x08006f31
 8006f1c:	08006f65 	.word	0x08006f65
 8006f20:	08006f99 	.word	0x08006f99
 8006f24:	08006fcd 	.word	0x08006fcd
 8006f28:	08007001 	.word	0x08007001
 8006f2c:	08007035 	.word	0x08007035
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	7c12      	ldrb	r2, [r2, #16]
 8006f48:	f107 0108 	add.w	r1, r7, #8
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4798      	blx	r3
 8006f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f52:	e0a4      	b.n	800709e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fac4 	bl	80074e4 <USBD_CtlError>
            err++;
 8006f5c:	7afb      	ldrb	r3, [r7, #11]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	72fb      	strb	r3, [r7, #11]
          break;
 8006f62:	e09c      	b.n	800709e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	7c12      	ldrb	r2, [r2, #16]
 8006f7c:	f107 0108 	add.w	r1, r7, #8
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f86:	e08a      	b.n	800709e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 faaa 	bl	80074e4 <USBD_CtlError>
            err++;
 8006f90:	7afb      	ldrb	r3, [r7, #11]
 8006f92:	3301      	adds	r3, #1
 8006f94:	72fb      	strb	r3, [r7, #11]
          break;
 8006f96:	e082      	b.n	800709e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7c12      	ldrb	r2, [r2, #16]
 8006fb0:	f107 0108 	add.w	r1, r7, #8
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fba:	e070      	b.n	800709e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa90 	bl	80074e4 <USBD_CtlError>
            err++;
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fca:	e068      	b.n	800709e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7c12      	ldrb	r2, [r2, #16]
 8006fe4:	f107 0108 	add.w	r1, r7, #8
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fee:	e056      	b.n	800709e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa76 	bl	80074e4 <USBD_CtlError>
            err++;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ffe:	e04e      	b.n	800709e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	7c12      	ldrb	r2, [r2, #16]
 8007018:	f107 0108 	add.w	r1, r7, #8
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3
 8007020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007022:	e03c      	b.n	800709e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa5c 	bl	80074e4 <USBD_CtlError>
            err++;
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	3301      	adds	r3, #1
 8007030:	72fb      	strb	r3, [r7, #11]
          break;
 8007032:	e034      	b.n	800709e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	7c12      	ldrb	r2, [r2, #16]
 800704c:	f107 0108 	add.w	r1, r7, #8
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
 8007054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007056:	e022      	b.n	800709e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa42 	bl	80074e4 <USBD_CtlError>
            err++;
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	3301      	adds	r3, #1
 8007064:	72fb      	strb	r3, [r7, #11]
          break;
 8007066:	e01a      	b.n	800709e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800706e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00c      	beq.n	800708e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	8852      	ldrh	r2, [r2, #2]
 8007080:	b2d1      	uxtb	r1, r2
 8007082:	f107 0208 	add.w	r2, r7, #8
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
 800708a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800708c:	e006      	b.n	800709c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fa27 	bl	80074e4 <USBD_CtlError>
            err++;
 8007096:	7afb      	ldrb	r3, [r7, #11]
 8007098:	3301      	adds	r3, #1
 800709a:	72fb      	strb	r3, [r7, #11]
          break;
 800709c:	bf00      	nop
      }
      break;
 800709e:	e037      	b.n	8007110 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7c1b      	ldrb	r3, [r3, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d109      	bne.n	80070bc <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b0:	f107 0208 	add.w	r2, r7, #8
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
 80070b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070ba:	e029      	b.n	8007110 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa10 	bl	80074e4 <USBD_CtlError>
        err++;
 80070c4:	7afb      	ldrb	r3, [r7, #11]
 80070c6:	3301      	adds	r3, #1
 80070c8:	72fb      	strb	r3, [r7, #11]
      break;
 80070ca:	e021      	b.n	8007110 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	7c1b      	ldrb	r3, [r3, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10d      	bne.n	80070f0 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070dc:	f107 0208 	add.w	r2, r7, #8
 80070e0:	4610      	mov	r0, r2
 80070e2:	4798      	blx	r3
 80070e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3301      	adds	r3, #1
 80070ea:	2207      	movs	r2, #7
 80070ec:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070ee:	e00f      	b.n	8007110 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9f6 	bl	80074e4 <USBD_CtlError>
        err++;
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	3301      	adds	r3, #1
 80070fc:	72fb      	strb	r3, [r7, #11]
      break;
 80070fe:	e007      	b.n	8007110 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9ee 	bl	80074e4 <USBD_CtlError>
      err++;
 8007108:	7afb      	ldrb	r3, [r7, #11]
 800710a:	3301      	adds	r3, #1
 800710c:	72fb      	strb	r3, [r7, #11]
      break;
 800710e:	bf00      	nop
  }

  if (err != 0U)
 8007110:	7afb      	ldrb	r3, [r7, #11]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d11e      	bne.n	8007154 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	88db      	ldrh	r3, [r3, #6]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d016      	beq.n	800714c <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800711e:	893b      	ldrh	r3, [r7, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00e      	beq.n	8007142 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	88da      	ldrh	r2, [r3, #6]
 8007128:	893b      	ldrh	r3, [r7, #8]
 800712a:	4293      	cmp	r3, r2
 800712c:	bf28      	it	cs
 800712e:	4613      	movcs	r3, r2
 8007130:	b29b      	uxth	r3, r3
 8007132:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007134:	893b      	ldrh	r3, [r7, #8]
 8007136:	461a      	mov	r2, r3
 8007138:	68f9      	ldr	r1, [r7, #12]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa43 	bl	80075c6 <USBD_CtlSendData>
 8007140:	e009      	b.n	8007156 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f9cd 	bl	80074e4 <USBD_CtlError>
 800714a:	e004      	b.n	8007156 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fa94 	bl	800767a <USBD_CtlSendStatus>
 8007152:	e000      	b.n	8007156 <USBD_GetDescriptor+0x2f2>
    return;
 8007154:	bf00      	nop
  }
}
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	889b      	ldrh	r3, [r3, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d131      	bne.n	80071d2 <USBD_SetAddress+0x76>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	88db      	ldrh	r3, [r3, #6]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d12d      	bne.n	80071d2 <USBD_SetAddress+0x76>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	885b      	ldrh	r3, [r3, #2]
 800717a:	2b7f      	cmp	r3, #127	@ 0x7f
 800717c:	d829      	bhi.n	80071d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007188:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b03      	cmp	r3, #3
 8007194:	d104      	bne.n	80071a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f9a3 	bl	80074e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800719e:	e01d      	b.n	80071dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	7bfa      	ldrb	r2, [r7, #15]
 80071a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fccb 	bl	8007b48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa61 	bl	800767a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d004      	beq.n	80071c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2202      	movs	r2, #2
 80071c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c6:	e009      	b.n	80071dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d0:	e004      	b.n	80071dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f985 	bl	80074e4 <USBD_CtlError>
  }
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	885b      	ldrh	r3, [r3, #2]
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	4b4c      	ldr	r3, [pc, #304]	@ (800732c <USBD_SetConfig+0x148>)
 80071fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071fc:	4b4b      	ldr	r3, [pc, #300]	@ (800732c <USBD_SetConfig+0x148>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d905      	bls.n	8007210 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f96c 	bl	80074e4 <USBD_CtlError>
    return USBD_FAIL;
 800720c:	2303      	movs	r3, #3
 800720e:	e088      	b.n	8007322 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d002      	beq.n	8007222 <USBD_SetConfig+0x3e>
 800721c:	2b03      	cmp	r3, #3
 800721e:	d025      	beq.n	800726c <USBD_SetConfig+0x88>
 8007220:	e071      	b.n	8007306 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007222:	4b42      	ldr	r3, [pc, #264]	@ (800732c <USBD_SetConfig+0x148>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01c      	beq.n	8007264 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800722a:	4b40      	ldr	r3, [pc, #256]	@ (800732c <USBD_SetConfig+0x148>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007234:	4b3d      	ldr	r3, [pc, #244]	@ (800732c <USBD_SetConfig+0x148>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff f93b 	bl	80064b6 <USBD_SetClassConfig>
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d004      	beq.n	8007254 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f949 	bl	80074e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007252:	e065      	b.n	8007320 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fa10 	bl	800767a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2203      	movs	r2, #3
 800725e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007262:	e05d      	b.n	8007320 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fa08 	bl	800767a <USBD_CtlSendStatus>
      break;
 800726a:	e059      	b.n	8007320 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800726c:	4b2f      	ldr	r3, [pc, #188]	@ (800732c <USBD_SetConfig+0x148>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d112      	bne.n	800729a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800727c:	4b2b      	ldr	r3, [pc, #172]	@ (800732c <USBD_SetConfig+0x148>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	461a      	mov	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007286:	4b29      	ldr	r3, [pc, #164]	@ (800732c <USBD_SetConfig+0x148>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff f92e 	bl	80064ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f9f1 	bl	800767a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007298:	e042      	b.n	8007320 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800729a:	4b24      	ldr	r3, [pc, #144]	@ (800732c <USBD_SetConfig+0x148>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d02a      	beq.n	80072fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff f91c 	bl	80064ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072b6:	4b1d      	ldr	r3, [pc, #116]	@ (800732c <USBD_SetConfig+0x148>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072c0:	4b1a      	ldr	r3, [pc, #104]	@ (800732c <USBD_SetConfig+0x148>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff f8f5 	bl	80064b6 <USBD_SetClassConfig>
 80072cc:	4603      	mov	r3, r0
 80072ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00f      	beq.n	80072f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f903 	bl	80074e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff f901 	bl	80064ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80072f4:	e014      	b.n	8007320 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f9bf 	bl	800767a <USBD_CtlSendStatus>
      break;
 80072fc:	e010      	b.n	8007320 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f9bb 	bl	800767a <USBD_CtlSendStatus>
      break;
 8007304:	e00c      	b.n	8007320 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f8eb 	bl	80074e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800730e:	4b07      	ldr	r3, [pc, #28]	@ (800732c <USBD_SetConfig+0x148>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff f8ea 	bl	80064ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800731a:	2303      	movs	r3, #3
 800731c:	73fb      	strb	r3, [r7, #15]
      break;
 800731e:	bf00      	nop
  }

  return ret;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	200010d4 	.word	0x200010d4

08007330 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	88db      	ldrh	r3, [r3, #6]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d004      	beq.n	800734c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f8cd 	bl	80074e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800734a:	e023      	b.n	8007394 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	dc02      	bgt.n	800735e <USBD_GetConfig+0x2e>
 8007358:	2b00      	cmp	r3, #0
 800735a:	dc03      	bgt.n	8007364 <USBD_GetConfig+0x34>
 800735c:	e015      	b.n	800738a <USBD_GetConfig+0x5a>
 800735e:	2b03      	cmp	r3, #3
 8007360:	d00b      	beq.n	800737a <USBD_GetConfig+0x4a>
 8007362:	e012      	b.n	800738a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3308      	adds	r3, #8
 800736e:	2201      	movs	r2, #1
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f927 	bl	80075c6 <USBD_CtlSendData>
        break;
 8007378:	e00c      	b.n	8007394 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3304      	adds	r3, #4
 800737e:	2201      	movs	r2, #1
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f91f 	bl	80075c6 <USBD_CtlSendData>
        break;
 8007388:	e004      	b.n	8007394 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f8a9 	bl	80074e4 <USBD_CtlError>
        break;
 8007392:	bf00      	nop
}
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d81e      	bhi.n	80073f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	88db      	ldrh	r3, [r3, #6]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d004      	beq.n	80073c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f890 	bl	80074e4 <USBD_CtlError>
        break;
 80073c4:	e01a      	b.n	80073fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f043 0202 	orr.w	r2, r3, #2
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	330c      	adds	r3, #12
 80073e6:	2202      	movs	r2, #2
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f8eb 	bl	80075c6 <USBD_CtlSendData>
      break;
 80073f0:	e004      	b.n	80073fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f875 	bl	80074e4 <USBD_CtlError>
      break;
 80073fa:	bf00      	nop
  }
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	885b      	ldrh	r3, [r3, #2]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d106      	bne.n	8007424 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f92b 	bl	800767a <USBD_CtlSendStatus>
  }
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800743c:	b2db      	uxtb	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	2b02      	cmp	r3, #2
 8007442:	d80b      	bhi.n	800745c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	885b      	ldrh	r3, [r3, #2]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d10c      	bne.n	8007466 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f910 	bl	800767a <USBD_CtlSendStatus>
      }
      break;
 800745a:	e004      	b.n	8007466 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f840 	bl	80074e4 <USBD_CtlError>
      break;
 8007464:	e000      	b.n	8007468 <USBD_ClrFeature+0x3c>
      break;
 8007466:	bf00      	nop
  }
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3301      	adds	r3, #1
 800748a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	781a      	ldrb	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7ff faa9 	bl	80069f2 <SWAPBYTE>
 80074a0:	4603      	mov	r3, r0
 80074a2:	461a      	mov	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3301      	adds	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff fa9c 	bl	80069f2 <SWAPBYTE>
 80074ba:	4603      	mov	r3, r0
 80074bc:	461a      	mov	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3301      	adds	r3, #1
 80074c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7ff fa8f 	bl	80069f2 <SWAPBYTE>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	80da      	strh	r2, [r3, #6]
}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ee:	2180      	movs	r1, #128	@ 0x80
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fabf 	bl	8007a74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80074f6:	2100      	movs	r1, #0
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fabb 	bl	8007a74 <USBD_LL_StallEP>
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d036      	beq.n	800758a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007520:	6938      	ldr	r0, [r7, #16]
 8007522:	f000 f836 	bl	8007592 <USBD_GetLen>
 8007526:	4603      	mov	r3, r0
 8007528:	3301      	adds	r3, #1
 800752a:	b29b      	uxth	r3, r3
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	4413      	add	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	7812      	ldrb	r2, [r2, #0]
 800753e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	3301      	adds	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	4413      	add	r3, r2
 800754c:	2203      	movs	r2, #3
 800754e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	3301      	adds	r3, #1
 8007554:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007556:	e013      	b.n	8007580 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	4413      	add	r3, r2
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	7812      	ldrb	r2, [r2, #0]
 8007562:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	3301      	adds	r3, #1
 8007568:	613b      	str	r3, [r7, #16]
    idx++;
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	3301      	adds	r3, #1
 800756e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	4413      	add	r3, r2
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]
    idx++;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	3301      	adds	r3, #1
 800757e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e7      	bne.n	8007558 <USBD_GetString+0x52>
 8007588:	e000      	b.n	800758c <USBD_GetString+0x86>
    return;
 800758a:	bf00      	nop
  }
}
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007592:	b480      	push	{r7}
 8007594:	b085      	sub	sp, #20
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80075a2:	e005      	b.n	80075b0 <USBD_GetLen+0x1e>
  {
    len++;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	3301      	adds	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	3301      	adds	r3, #1
 80075ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1f5      	bne.n	80075a4 <USBD_GetLen+0x12>
  }

  return len;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	2100      	movs	r1, #0
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 faca 	bl	8007b86 <USBD_LL_Transmit>

  return USBD_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	2100      	movs	r1, #0
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fab9 	bl	8007b86 <USBD_LL_Transmit>

  return USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2203      	movs	r2, #3
 800762e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	2100      	movs	r1, #0
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fabd 	bl	8007bc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	2100      	movs	r1, #0
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 faac 	bl	8007bc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2204      	movs	r2, #4
 8007686:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800768a:	2300      	movs	r3, #0
 800768c:	2200      	movs	r2, #0
 800768e:	2100      	movs	r1, #0
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fa78 	bl	8007b86 <USBD_LL_Transmit>

  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2205      	movs	r2, #5
 80076ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076b0:	2300      	movs	r3, #0
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fa86 	bl	8007bc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
 80076d2:	4613      	mov	r3, r2
 80076d4:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 80076d6:	883b      	ldrh	r3, [r7, #0]
 80076d8:	089b      	lsrs	r3, r3, #2
 80076da:	b29a      	uxth	r2, r3
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7fb fa19 	bl	8002b18 <HAL_PCDEx_SetTxFiFo>
 80076e6:	4603      	mov	r3, r0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 80076fc:	887b      	ldrh	r3, [r7, #2]
 80076fe:	089b      	lsrs	r3, r3, #2
 8007700:	b29b      	uxth	r3, r3
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7fb fa4e 	bl	8002ba6 <HAL_PCDEx_SetRxFiFo>
 800770a:	4603      	mov	r3, r0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f7fe fef7 	bl	800651e <USBD_LL_SetupStage>
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800774a:	78fa      	ldrb	r2, [r7, #3]
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	440b      	add	r3, r1
 8007758:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	4619      	mov	r1, r3
 8007762:	f7fe ff31 	bl	80065c8 <USBD_LL_DataOutStage>
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007780:	78fa      	ldrb	r2, [r7, #3]
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	4613      	mov	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	3320      	adds	r3, #32
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	4619      	mov	r1, r3
 8007796:	f7fe ff7a 	bl	800668e <USBD_LL_DataInStage>
}
 800779a:	bf00      	nop
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff f889 	bl	80068c8 <USBD_LL_SOF>
}
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80077c6:	2301      	movs	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	79db      	ldrb	r3, [r3, #7]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d102      	bne.n	80077d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 80077d2:	2301      	movs	r3, #1
 80077d4:	73fb      	strb	r3, [r7, #15]
 80077d6:	e008      	b.n	80077ea <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	79db      	ldrb	r3, [r3, #7]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
 80077e4:	e001      	b.n	80077ea <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 80077e6:	f7f9 faef 	bl	8000dc8 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077f0:	7bfa      	ldrb	r2, [r7, #15]
 80077f2:	4611      	mov	r1, r2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff f829 	bl	800684c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe ffda 	bl	80067ba <USBD_LL_Reset>
}
 8007806:	bf00      	nop
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
	...

08007810 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff f824 	bl	800686c <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6812      	ldr	r2, [r2, #0]
 8007832:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007836:	f043 0301 	orr.w	r3, r3, #1
 800783a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7adb      	ldrb	r3, [r3, #11]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007844:	4b04      	ldr	r3, [pc, #16]	@ (8007858 <HAL_PCD_SuspendCallback+0x48>)
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	4a03      	ldr	r2, [pc, #12]	@ (8007858 <HAL_PCD_SuspendCallback+0x48>)
 800784a:	f043 0306 	orr.w	r3, r3, #6
 800784e:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed00 	.word	0xe000ed00

0800785c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff f814 	bl	8006898 <USBD_LL_Resume>
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff f862 	bl	8006958 <USBD_LL_IsoOUTIncomplete>
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff f82a 	bl	800690c <USBD_LL_IsoINIncomplete>
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff f868 	bl	80069a4 <USBD_LL_DevConnected>
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff f865 	bl	80069ba <USBD_LL_DevDisconnected>
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8007900:	4b27      	ldr	r3, [pc, #156]	@ (80079a0 <USBD_LL_Init+0xa8>)
 8007902:	4a28      	ldr	r2, [pc, #160]	@ (80079a4 <USBD_LL_Init+0xac>)
 8007904:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d143      	bne.n	8007996 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800790e:	4b24      	ldr	r3, [pc, #144]	@ (80079a0 <USBD_LL_Init+0xa8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 8007918:	4b21      	ldr	r3, [pc, #132]	@ (80079a0 <USBD_LL_Init+0xa8>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 8007922:	4b1f      	ldr	r3, [pc, #124]	@ (80079a0 <USBD_LL_Init+0xa8>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff fee0 	bl	80076f0 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 8007930:	4b1b      	ldr	r3, [pc, #108]	@ (80079a0 <USBD_LL_Init+0xa8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2240      	movs	r2, #64	@ 0x40
 8007936:	2100      	movs	r1, #0
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff fec4 	bl	80076c6 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_MOUSE == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_MOUSE_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
 800793e:	4b18      	ldr	r3, [pc, #96]	@ (80079a0 <USBD_LL_Init+0xa8>)
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	4b19      	ldr	r3, [pc, #100]	@ (80079a8 <USBD_LL_Init+0xb0>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2240      	movs	r2, #64	@ 0x40
 800794e:	4619      	mov	r1, r3
 8007950:	f7ff feb9 	bl	80076c6 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
 8007958:	e01a      	b.n	8007990 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800795a:	4b11      	ldr	r3, [pc, #68]	@ (80079a0 <USBD_LL_Init+0xa8>)
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	4a12      	ldr	r2, [pc, #72]	@ (80079ac <USBD_LL_Init+0xb4>)
 8007962:	5cd3      	ldrb	r3, [r2, r3]
 8007964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2280      	movs	r2, #128	@ 0x80
 800796c:	4619      	mov	r1, r3
 800796e:	f7ff feaa 	bl	80076c6 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 8007972:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <USBD_LL_Init+0xa8>)
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	4a0d      	ldr	r2, [pc, #52]	@ (80079b0 <USBD_LL_Init+0xb8>)
 800797a:	5cd3      	ldrb	r3, [r2, r3]
 800797c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2240      	movs	r2, #64	@ 0x40
 8007984:	4619      	mov	r1, r3
 8007986:	f7ff fe9e 	bl	80076c6 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	3301      	adds	r3, #1
 800798e:	73fb      	strb	r3, [r7, #15]
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0e1      	beq.n	800795a <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	200010d8 	.word	0x200010d8
 80079a4:	200002f8 	.word	0x200002f8
 80079a8:	2000019e 	.word	0x2000019e
 80079ac:	20000d84 	.word	0x20000d84
 80079b0:	20000d8c 	.word	0x20000d8c

080079b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7f9 ffc4 	bl	8001958 <HAL_PCD_Start>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 f92a 	bl	8007c30 <USBD_Get_USB_Status>
 80079dc:	4603      	mov	r3, r0
 80079de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	4608      	mov	r0, r1
 80079f4:	4611      	mov	r1, r2
 80079f6:	461a      	mov	r2, r3
 80079f8:	4603      	mov	r3, r0
 80079fa:	70fb      	strb	r3, [r7, #3]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70bb      	strb	r3, [r7, #2]
 8007a00:	4613      	mov	r3, r2
 8007a02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 8007a12:	78bb      	ldrb	r3, [r7, #2]
 8007a14:	883a      	ldrh	r2, [r7, #0]
 8007a16:	78f9      	ldrb	r1, [r7, #3]
 8007a18:	f7fa fc98 	bl	800234c <HAL_PCD_EP_Open>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f904 	bl	8007c30 <USBD_Get_USB_Status>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	4611      	mov	r1, r2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fa fce3 	bl	8002420 <HAL_PCD_EP_Close>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 f8e5 	bl	8007c30 <USBD_Get_USB_Status>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8007a8e:	78fa      	ldrb	r2, [r7, #3]
 8007a90:	4611      	mov	r1, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fa fd9b 	bl	80025ce <HAL_PCD_EP_SetStall>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f8c6 	bl	8007c30 <USBD_Get_USB_Status>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	460b      	mov	r3, r1
 8007abc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fa fddf 	bl	8002694 <HAL_PCD_EP_ClrStall>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 f8a7 	bl	8007c30 <USBD_Get_USB_Status>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8007b02:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8007b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	da0b      	bge.n	8007b24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b12:	68f9      	ldr	r1, [r7, #12]
 8007b14:	4613      	mov	r3, r2
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	4413      	add	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	440b      	add	r3, r1
 8007b1e:	3316      	adds	r3, #22
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	e00b      	b.n	8007b3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b2a:	68f9      	ldr	r1, [r7, #12]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	440b      	add	r3, r1
 8007b36:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007b3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fa fbcc 	bl	8002304 <HAL_PCD_SetAddress>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 f85c 	bl	8007c30 <USBD_Get_USB_Status>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b086      	sub	sp, #24
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	460b      	mov	r3, r1
 8007b94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 8007ba4:	7af9      	ldrb	r1, [r7, #11]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	f7fa fcd6 	bl	800255a <HAL_PCD_EP_Transmit>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 f83b 	bl	8007c30 <USBD_Get_USB_Status>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	607a      	str	r2, [r7, #4]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 8007be6:	7af9      	ldrb	r1, [r7, #11]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	f7fa fc62 	bl	80024b4 <HAL_PCD_EP_Receive>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f81a 	bl	8007c30 <USBD_Get_USB_Status>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c00:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	4611      	mov	r1, r2
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fa fc82 	bl	800252a <HAL_PCD_EP_GetRxCount>
 8007c26:	4603      	mov	r3, r0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d817      	bhi.n	8007c74 <USBD_Get_USB_Status+0x44>
 8007c44:	a201      	add	r2, pc, #4	@ (adr r2, 8007c4c <USBD_Get_USB_Status+0x1c>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007c5d 	.word	0x08007c5d
 8007c50:	08007c63 	.word	0x08007c63
 8007c54:	08007c69 	.word	0x08007c69
 8007c58:	08007c6f 	.word	0x08007c6f
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c60:	e00b      	b.n	8007c7a <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 8007c62:	2303      	movs	r3, #3
 8007c64:	73fb      	strb	r3, [r7, #15]
    break;
 8007c66:	e008      	b.n	8007c7a <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c6c:	e005      	b.n	8007c7a <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	73fb      	strb	r3, [r7, #15]
    break;
 8007c72:	e002      	b.n	8007c7a <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8007c74:	2303      	movs	r3, #3
 8007c76:	73fb      	strb	r3, [r7, #15]
    break;
 8007c78:	bf00      	nop
  }
  return usb_status;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <sniprintf>:
 8007c88:	b40c      	push	{r2, r3}
 8007c8a:	b530      	push	{r4, r5, lr}
 8007c8c:	4b17      	ldr	r3, [pc, #92]	@ (8007cec <sniprintf+0x64>)
 8007c8e:	1e0c      	subs	r4, r1, #0
 8007c90:	681d      	ldr	r5, [r3, #0]
 8007c92:	b09d      	sub	sp, #116	@ 0x74
 8007c94:	da08      	bge.n	8007ca8 <sniprintf+0x20>
 8007c96:	238b      	movs	r3, #139	@ 0x8b
 8007c98:	602b      	str	r3, [r5, #0]
 8007c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9e:	b01d      	add	sp, #116	@ 0x74
 8007ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ca4:	b002      	add	sp, #8
 8007ca6:	4770      	bx	lr
 8007ca8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007cac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007cb0:	bf14      	ite	ne
 8007cb2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007cb6:	4623      	moveq	r3, r4
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	9307      	str	r3, [sp, #28]
 8007cbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007cc0:	9002      	str	r0, [sp, #8]
 8007cc2:	9006      	str	r0, [sp, #24]
 8007cc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007cc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007cca:	ab21      	add	r3, sp, #132	@ 0x84
 8007ccc:	a902      	add	r1, sp, #8
 8007cce:	4628      	mov	r0, r5
 8007cd0:	9301      	str	r3, [sp, #4]
 8007cd2:	f000 f9a3 	bl	800801c <_svfiprintf_r>
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	bfbc      	itt	lt
 8007cda:	238b      	movlt	r3, #139	@ 0x8b
 8007cdc:	602b      	strlt	r3, [r5, #0]
 8007cde:	2c00      	cmp	r4, #0
 8007ce0:	d0dd      	beq.n	8007c9e <sniprintf+0x16>
 8007ce2:	9b02      	ldr	r3, [sp, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	701a      	strb	r2, [r3, #0]
 8007ce8:	e7d9      	b.n	8007c9e <sniprintf+0x16>
 8007cea:	bf00      	nop
 8007cec:	2000027c 	.word	0x2000027c

08007cf0 <memset>:
 8007cf0:	4402      	add	r2, r0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d100      	bne.n	8007cfa <memset+0xa>
 8007cf8:	4770      	bx	lr
 8007cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cfe:	e7f9      	b.n	8007cf4 <memset+0x4>

08007d00 <__errno>:
 8007d00:	4b01      	ldr	r3, [pc, #4]	@ (8007d08 <__errno+0x8>)
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	2000027c 	.word	0x2000027c

08007d0c <__libc_init_array>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8007d44 <__libc_init_array+0x38>)
 8007d10:	4c0d      	ldr	r4, [pc, #52]	@ (8007d48 <__libc_init_array+0x3c>)
 8007d12:	1b64      	subs	r4, r4, r5
 8007d14:	10a4      	asrs	r4, r4, #2
 8007d16:	2600      	movs	r6, #0
 8007d18:	42a6      	cmp	r6, r4
 8007d1a:	d109      	bne.n	8007d30 <__libc_init_array+0x24>
 8007d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8007d4c <__libc_init_array+0x40>)
 8007d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8007d50 <__libc_init_array+0x44>)
 8007d20:	f000 fc66 	bl	80085f0 <_init>
 8007d24:	1b64      	subs	r4, r4, r5
 8007d26:	10a4      	asrs	r4, r4, #2
 8007d28:	2600      	movs	r6, #0
 8007d2a:	42a6      	cmp	r6, r4
 8007d2c:	d105      	bne.n	8007d3a <__libc_init_array+0x2e>
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d34:	4798      	blx	r3
 8007d36:	3601      	adds	r6, #1
 8007d38:	e7ee      	b.n	8007d18 <__libc_init_array+0xc>
 8007d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3e:	4798      	blx	r3
 8007d40:	3601      	adds	r6, #1
 8007d42:	e7f2      	b.n	8007d2a <__libc_init_array+0x1e>
 8007d44:	080086ec 	.word	0x080086ec
 8007d48:	080086ec 	.word	0x080086ec
 8007d4c:	080086ec 	.word	0x080086ec
 8007d50:	080086f0 	.word	0x080086f0

08007d54 <__retarget_lock_acquire_recursive>:
 8007d54:	4770      	bx	lr

08007d56 <__retarget_lock_release_recursive>:
 8007d56:	4770      	bx	lr

08007d58 <memcpy>:
 8007d58:	440a      	add	r2, r1
 8007d5a:	4291      	cmp	r1, r2
 8007d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d60:	d100      	bne.n	8007d64 <memcpy+0xc>
 8007d62:	4770      	bx	lr
 8007d64:	b510      	push	{r4, lr}
 8007d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d6e:	4291      	cmp	r1, r2
 8007d70:	d1f9      	bne.n	8007d66 <memcpy+0xe>
 8007d72:	bd10      	pop	{r4, pc}

08007d74 <_free_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4605      	mov	r5, r0
 8007d78:	2900      	cmp	r1, #0
 8007d7a:	d041      	beq.n	8007e00 <_free_r+0x8c>
 8007d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d80:	1f0c      	subs	r4, r1, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	bfb8      	it	lt
 8007d86:	18e4      	addlt	r4, r4, r3
 8007d88:	f000 f8e0 	bl	8007f4c <__malloc_lock>
 8007d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e04 <_free_r+0x90>)
 8007d8e:	6813      	ldr	r3, [r2, #0]
 8007d90:	b933      	cbnz	r3, 8007da0 <_free_r+0x2c>
 8007d92:	6063      	str	r3, [r4, #4]
 8007d94:	6014      	str	r4, [r2, #0]
 8007d96:	4628      	mov	r0, r5
 8007d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d9c:	f000 b8dc 	b.w	8007f58 <__malloc_unlock>
 8007da0:	42a3      	cmp	r3, r4
 8007da2:	d908      	bls.n	8007db6 <_free_r+0x42>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	1821      	adds	r1, r4, r0
 8007da8:	428b      	cmp	r3, r1
 8007daa:	bf01      	itttt	eq
 8007dac:	6819      	ldreq	r1, [r3, #0]
 8007dae:	685b      	ldreq	r3, [r3, #4]
 8007db0:	1809      	addeq	r1, r1, r0
 8007db2:	6021      	streq	r1, [r4, #0]
 8007db4:	e7ed      	b.n	8007d92 <_free_r+0x1e>
 8007db6:	461a      	mov	r2, r3
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	b10b      	cbz	r3, 8007dc0 <_free_r+0x4c>
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	d9fa      	bls.n	8007db6 <_free_r+0x42>
 8007dc0:	6811      	ldr	r1, [r2, #0]
 8007dc2:	1850      	adds	r0, r2, r1
 8007dc4:	42a0      	cmp	r0, r4
 8007dc6:	d10b      	bne.n	8007de0 <_free_r+0x6c>
 8007dc8:	6820      	ldr	r0, [r4, #0]
 8007dca:	4401      	add	r1, r0
 8007dcc:	1850      	adds	r0, r2, r1
 8007dce:	4283      	cmp	r3, r0
 8007dd0:	6011      	str	r1, [r2, #0]
 8007dd2:	d1e0      	bne.n	8007d96 <_free_r+0x22>
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	6053      	str	r3, [r2, #4]
 8007dda:	4408      	add	r0, r1
 8007ddc:	6010      	str	r0, [r2, #0]
 8007dde:	e7da      	b.n	8007d96 <_free_r+0x22>
 8007de0:	d902      	bls.n	8007de8 <_free_r+0x74>
 8007de2:	230c      	movs	r3, #12
 8007de4:	602b      	str	r3, [r5, #0]
 8007de6:	e7d6      	b.n	8007d96 <_free_r+0x22>
 8007de8:	6820      	ldr	r0, [r4, #0]
 8007dea:	1821      	adds	r1, r4, r0
 8007dec:	428b      	cmp	r3, r1
 8007dee:	bf04      	itt	eq
 8007df0:	6819      	ldreq	r1, [r3, #0]
 8007df2:	685b      	ldreq	r3, [r3, #4]
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	bf04      	itt	eq
 8007df8:	1809      	addeq	r1, r1, r0
 8007dfa:	6021      	streq	r1, [r4, #0]
 8007dfc:	6054      	str	r4, [r2, #4]
 8007dfe:	e7ca      	b.n	8007d96 <_free_r+0x22>
 8007e00:	bd38      	pop	{r3, r4, r5, pc}
 8007e02:	bf00      	nop
 8007e04:	20001220 	.word	0x20001220

08007e08 <sbrk_aligned>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	4e0f      	ldr	r6, [pc, #60]	@ (8007e48 <sbrk_aligned+0x40>)
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	6831      	ldr	r1, [r6, #0]
 8007e10:	4605      	mov	r5, r0
 8007e12:	b911      	cbnz	r1, 8007e1a <sbrk_aligned+0x12>
 8007e14:	f000 fba6 	bl	8008564 <_sbrk_r>
 8007e18:	6030      	str	r0, [r6, #0]
 8007e1a:	4621      	mov	r1, r4
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 fba1 	bl	8008564 <_sbrk_r>
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	d103      	bne.n	8007e2e <sbrk_aligned+0x26>
 8007e26:	f04f 34ff 	mov.w	r4, #4294967295
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	bd70      	pop	{r4, r5, r6, pc}
 8007e2e:	1cc4      	adds	r4, r0, #3
 8007e30:	f024 0403 	bic.w	r4, r4, #3
 8007e34:	42a0      	cmp	r0, r4
 8007e36:	d0f8      	beq.n	8007e2a <sbrk_aligned+0x22>
 8007e38:	1a21      	subs	r1, r4, r0
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 fb92 	bl	8008564 <_sbrk_r>
 8007e40:	3001      	adds	r0, #1
 8007e42:	d1f2      	bne.n	8007e2a <sbrk_aligned+0x22>
 8007e44:	e7ef      	b.n	8007e26 <sbrk_aligned+0x1e>
 8007e46:	bf00      	nop
 8007e48:	2000121c 	.word	0x2000121c

08007e4c <_malloc_r>:
 8007e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e50:	1ccd      	adds	r5, r1, #3
 8007e52:	f025 0503 	bic.w	r5, r5, #3
 8007e56:	3508      	adds	r5, #8
 8007e58:	2d0c      	cmp	r5, #12
 8007e5a:	bf38      	it	cc
 8007e5c:	250c      	movcc	r5, #12
 8007e5e:	2d00      	cmp	r5, #0
 8007e60:	4606      	mov	r6, r0
 8007e62:	db01      	blt.n	8007e68 <_malloc_r+0x1c>
 8007e64:	42a9      	cmp	r1, r5
 8007e66:	d904      	bls.n	8007e72 <_malloc_r+0x26>
 8007e68:	230c      	movs	r3, #12
 8007e6a:	6033      	str	r3, [r6, #0]
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f48 <_malloc_r+0xfc>
 8007e76:	f000 f869 	bl	8007f4c <__malloc_lock>
 8007e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e7e:	461c      	mov	r4, r3
 8007e80:	bb44      	cbnz	r4, 8007ed4 <_malloc_r+0x88>
 8007e82:	4629      	mov	r1, r5
 8007e84:	4630      	mov	r0, r6
 8007e86:	f7ff ffbf 	bl	8007e08 <sbrk_aligned>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	d158      	bne.n	8007f42 <_malloc_r+0xf6>
 8007e90:	f8d8 4000 	ldr.w	r4, [r8]
 8007e94:	4627      	mov	r7, r4
 8007e96:	2f00      	cmp	r7, #0
 8007e98:	d143      	bne.n	8007f22 <_malloc_r+0xd6>
 8007e9a:	2c00      	cmp	r4, #0
 8007e9c:	d04b      	beq.n	8007f36 <_malloc_r+0xea>
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	4639      	mov	r1, r7
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	eb04 0903 	add.w	r9, r4, r3
 8007ea8:	f000 fb5c 	bl	8008564 <_sbrk_r>
 8007eac:	4581      	cmp	r9, r0
 8007eae:	d142      	bne.n	8007f36 <_malloc_r+0xea>
 8007eb0:	6821      	ldr	r1, [r4, #0]
 8007eb2:	1a6d      	subs	r5, r5, r1
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f7ff ffa6 	bl	8007e08 <sbrk_aligned>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d03a      	beq.n	8007f36 <_malloc_r+0xea>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	442b      	add	r3, r5
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	bb62      	cbnz	r2, 8007f28 <_malloc_r+0xdc>
 8007ece:	f8c8 7000 	str.w	r7, [r8]
 8007ed2:	e00f      	b.n	8007ef4 <_malloc_r+0xa8>
 8007ed4:	6822      	ldr	r2, [r4, #0]
 8007ed6:	1b52      	subs	r2, r2, r5
 8007ed8:	d420      	bmi.n	8007f1c <_malloc_r+0xd0>
 8007eda:	2a0b      	cmp	r2, #11
 8007edc:	d917      	bls.n	8007f0e <_malloc_r+0xc2>
 8007ede:	1961      	adds	r1, r4, r5
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	6025      	str	r5, [r4, #0]
 8007ee4:	bf18      	it	ne
 8007ee6:	6059      	strne	r1, [r3, #4]
 8007ee8:	6863      	ldr	r3, [r4, #4]
 8007eea:	bf08      	it	eq
 8007eec:	f8c8 1000 	streq.w	r1, [r8]
 8007ef0:	5162      	str	r2, [r4, r5]
 8007ef2:	604b      	str	r3, [r1, #4]
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f000 f82f 	bl	8007f58 <__malloc_unlock>
 8007efa:	f104 000b 	add.w	r0, r4, #11
 8007efe:	1d23      	adds	r3, r4, #4
 8007f00:	f020 0007 	bic.w	r0, r0, #7
 8007f04:	1ac2      	subs	r2, r0, r3
 8007f06:	bf1c      	itt	ne
 8007f08:	1a1b      	subne	r3, r3, r0
 8007f0a:	50a3      	strne	r3, [r4, r2]
 8007f0c:	e7af      	b.n	8007e6e <_malloc_r+0x22>
 8007f0e:	6862      	ldr	r2, [r4, #4]
 8007f10:	42a3      	cmp	r3, r4
 8007f12:	bf0c      	ite	eq
 8007f14:	f8c8 2000 	streq.w	r2, [r8]
 8007f18:	605a      	strne	r2, [r3, #4]
 8007f1a:	e7eb      	b.n	8007ef4 <_malloc_r+0xa8>
 8007f1c:	4623      	mov	r3, r4
 8007f1e:	6864      	ldr	r4, [r4, #4]
 8007f20:	e7ae      	b.n	8007e80 <_malloc_r+0x34>
 8007f22:	463c      	mov	r4, r7
 8007f24:	687f      	ldr	r7, [r7, #4]
 8007f26:	e7b6      	b.n	8007e96 <_malloc_r+0x4a>
 8007f28:	461a      	mov	r2, r3
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	d1fb      	bne.n	8007f28 <_malloc_r+0xdc>
 8007f30:	2300      	movs	r3, #0
 8007f32:	6053      	str	r3, [r2, #4]
 8007f34:	e7de      	b.n	8007ef4 <_malloc_r+0xa8>
 8007f36:	230c      	movs	r3, #12
 8007f38:	6033      	str	r3, [r6, #0]
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f000 f80c 	bl	8007f58 <__malloc_unlock>
 8007f40:	e794      	b.n	8007e6c <_malloc_r+0x20>
 8007f42:	6005      	str	r5, [r0, #0]
 8007f44:	e7d6      	b.n	8007ef4 <_malloc_r+0xa8>
 8007f46:	bf00      	nop
 8007f48:	20001220 	.word	0x20001220

08007f4c <__malloc_lock>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	@ (8007f54 <__malloc_lock+0x8>)
 8007f4e:	f7ff bf01 	b.w	8007d54 <__retarget_lock_acquire_recursive>
 8007f52:	bf00      	nop
 8007f54:	20001218 	.word	0x20001218

08007f58 <__malloc_unlock>:
 8007f58:	4801      	ldr	r0, [pc, #4]	@ (8007f60 <__malloc_unlock+0x8>)
 8007f5a:	f7ff befc 	b.w	8007d56 <__retarget_lock_release_recursive>
 8007f5e:	bf00      	nop
 8007f60:	20001218 	.word	0x20001218

08007f64 <__ssputs_r>:
 8007f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f68:	688e      	ldr	r6, [r1, #8]
 8007f6a:	461f      	mov	r7, r3
 8007f6c:	42be      	cmp	r6, r7
 8007f6e:	680b      	ldr	r3, [r1, #0]
 8007f70:	4682      	mov	sl, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	4690      	mov	r8, r2
 8007f76:	d82d      	bhi.n	8007fd4 <__ssputs_r+0x70>
 8007f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f80:	d026      	beq.n	8007fd0 <__ssputs_r+0x6c>
 8007f82:	6965      	ldr	r5, [r4, #20]
 8007f84:	6909      	ldr	r1, [r1, #16]
 8007f86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f8a:	eba3 0901 	sub.w	r9, r3, r1
 8007f8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f92:	1c7b      	adds	r3, r7, #1
 8007f94:	444b      	add	r3, r9
 8007f96:	106d      	asrs	r5, r5, #1
 8007f98:	429d      	cmp	r5, r3
 8007f9a:	bf38      	it	cc
 8007f9c:	461d      	movcc	r5, r3
 8007f9e:	0553      	lsls	r3, r2, #21
 8007fa0:	d527      	bpl.n	8007ff2 <__ssputs_r+0x8e>
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7ff ff52 	bl	8007e4c <_malloc_r>
 8007fa8:	4606      	mov	r6, r0
 8007faa:	b360      	cbz	r0, 8008006 <__ssputs_r+0xa2>
 8007fac:	6921      	ldr	r1, [r4, #16]
 8007fae:	464a      	mov	r2, r9
 8007fb0:	f7ff fed2 	bl	8007d58 <memcpy>
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fbe:	81a3      	strh	r3, [r4, #12]
 8007fc0:	6126      	str	r6, [r4, #16]
 8007fc2:	6165      	str	r5, [r4, #20]
 8007fc4:	444e      	add	r6, r9
 8007fc6:	eba5 0509 	sub.w	r5, r5, r9
 8007fca:	6026      	str	r6, [r4, #0]
 8007fcc:	60a5      	str	r5, [r4, #8]
 8007fce:	463e      	mov	r6, r7
 8007fd0:	42be      	cmp	r6, r7
 8007fd2:	d900      	bls.n	8007fd6 <__ssputs_r+0x72>
 8007fd4:	463e      	mov	r6, r7
 8007fd6:	6820      	ldr	r0, [r4, #0]
 8007fd8:	4632      	mov	r2, r6
 8007fda:	4641      	mov	r1, r8
 8007fdc:	f000 faa8 	bl	8008530 <memmove>
 8007fe0:	68a3      	ldr	r3, [r4, #8]
 8007fe2:	1b9b      	subs	r3, r3, r6
 8007fe4:	60a3      	str	r3, [r4, #8]
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	4433      	add	r3, r6
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	2000      	movs	r0, #0
 8007fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff2:	462a      	mov	r2, r5
 8007ff4:	f000 fac6 	bl	8008584 <_realloc_r>
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d1e0      	bne.n	8007fc0 <__ssputs_r+0x5c>
 8007ffe:	6921      	ldr	r1, [r4, #16]
 8008000:	4650      	mov	r0, sl
 8008002:	f7ff feb7 	bl	8007d74 <_free_r>
 8008006:	230c      	movs	r3, #12
 8008008:	f8ca 3000 	str.w	r3, [sl]
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	e7e9      	b.n	8007fee <__ssputs_r+0x8a>
	...

0800801c <_svfiprintf_r>:
 800801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	4698      	mov	r8, r3
 8008022:	898b      	ldrh	r3, [r1, #12]
 8008024:	061b      	lsls	r3, r3, #24
 8008026:	b09d      	sub	sp, #116	@ 0x74
 8008028:	4607      	mov	r7, r0
 800802a:	460d      	mov	r5, r1
 800802c:	4614      	mov	r4, r2
 800802e:	d510      	bpl.n	8008052 <_svfiprintf_r+0x36>
 8008030:	690b      	ldr	r3, [r1, #16]
 8008032:	b973      	cbnz	r3, 8008052 <_svfiprintf_r+0x36>
 8008034:	2140      	movs	r1, #64	@ 0x40
 8008036:	f7ff ff09 	bl	8007e4c <_malloc_r>
 800803a:	6028      	str	r0, [r5, #0]
 800803c:	6128      	str	r0, [r5, #16]
 800803e:	b930      	cbnz	r0, 800804e <_svfiprintf_r+0x32>
 8008040:	230c      	movs	r3, #12
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	b01d      	add	sp, #116	@ 0x74
 800804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804e:	2340      	movs	r3, #64	@ 0x40
 8008050:	616b      	str	r3, [r5, #20]
 8008052:	2300      	movs	r3, #0
 8008054:	9309      	str	r3, [sp, #36]	@ 0x24
 8008056:	2320      	movs	r3, #32
 8008058:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800805c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008060:	2330      	movs	r3, #48	@ 0x30
 8008062:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008200 <_svfiprintf_r+0x1e4>
 8008066:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800806a:	f04f 0901 	mov.w	r9, #1
 800806e:	4623      	mov	r3, r4
 8008070:	469a      	mov	sl, r3
 8008072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008076:	b10a      	cbz	r2, 800807c <_svfiprintf_r+0x60>
 8008078:	2a25      	cmp	r2, #37	@ 0x25
 800807a:	d1f9      	bne.n	8008070 <_svfiprintf_r+0x54>
 800807c:	ebba 0b04 	subs.w	fp, sl, r4
 8008080:	d00b      	beq.n	800809a <_svfiprintf_r+0x7e>
 8008082:	465b      	mov	r3, fp
 8008084:	4622      	mov	r2, r4
 8008086:	4629      	mov	r1, r5
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff ff6b 	bl	8007f64 <__ssputs_r>
 800808e:	3001      	adds	r0, #1
 8008090:	f000 80a7 	beq.w	80081e2 <_svfiprintf_r+0x1c6>
 8008094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008096:	445a      	add	r2, fp
 8008098:	9209      	str	r2, [sp, #36]	@ 0x24
 800809a:	f89a 3000 	ldrb.w	r3, [sl]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 809f 	beq.w	80081e2 <_svfiprintf_r+0x1c6>
 80080a4:	2300      	movs	r3, #0
 80080a6:	f04f 32ff 	mov.w	r2, #4294967295
 80080aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ae:	f10a 0a01 	add.w	sl, sl, #1
 80080b2:	9304      	str	r3, [sp, #16]
 80080b4:	9307      	str	r3, [sp, #28]
 80080b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80080bc:	4654      	mov	r4, sl
 80080be:	2205      	movs	r2, #5
 80080c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c4:	484e      	ldr	r0, [pc, #312]	@ (8008200 <_svfiprintf_r+0x1e4>)
 80080c6:	f7f8 f893 	bl	80001f0 <memchr>
 80080ca:	9a04      	ldr	r2, [sp, #16]
 80080cc:	b9d8      	cbnz	r0, 8008106 <_svfiprintf_r+0xea>
 80080ce:	06d0      	lsls	r0, r2, #27
 80080d0:	bf44      	itt	mi
 80080d2:	2320      	movmi	r3, #32
 80080d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080d8:	0711      	lsls	r1, r2, #28
 80080da:	bf44      	itt	mi
 80080dc:	232b      	movmi	r3, #43	@ 0x2b
 80080de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080e2:	f89a 3000 	ldrb.w	r3, [sl]
 80080e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80080e8:	d015      	beq.n	8008116 <_svfiprintf_r+0xfa>
 80080ea:	9a07      	ldr	r2, [sp, #28]
 80080ec:	4654      	mov	r4, sl
 80080ee:	2000      	movs	r0, #0
 80080f0:	f04f 0c0a 	mov.w	ip, #10
 80080f4:	4621      	mov	r1, r4
 80080f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080fa:	3b30      	subs	r3, #48	@ 0x30
 80080fc:	2b09      	cmp	r3, #9
 80080fe:	d94b      	bls.n	8008198 <_svfiprintf_r+0x17c>
 8008100:	b1b0      	cbz	r0, 8008130 <_svfiprintf_r+0x114>
 8008102:	9207      	str	r2, [sp, #28]
 8008104:	e014      	b.n	8008130 <_svfiprintf_r+0x114>
 8008106:	eba0 0308 	sub.w	r3, r0, r8
 800810a:	fa09 f303 	lsl.w	r3, r9, r3
 800810e:	4313      	orrs	r3, r2
 8008110:	9304      	str	r3, [sp, #16]
 8008112:	46a2      	mov	sl, r4
 8008114:	e7d2      	b.n	80080bc <_svfiprintf_r+0xa0>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	1d19      	adds	r1, r3, #4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	9103      	str	r1, [sp, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	bfbb      	ittet	lt
 8008122:	425b      	neglt	r3, r3
 8008124:	f042 0202 	orrlt.w	r2, r2, #2
 8008128:	9307      	strge	r3, [sp, #28]
 800812a:	9307      	strlt	r3, [sp, #28]
 800812c:	bfb8      	it	lt
 800812e:	9204      	strlt	r2, [sp, #16]
 8008130:	7823      	ldrb	r3, [r4, #0]
 8008132:	2b2e      	cmp	r3, #46	@ 0x2e
 8008134:	d10a      	bne.n	800814c <_svfiprintf_r+0x130>
 8008136:	7863      	ldrb	r3, [r4, #1]
 8008138:	2b2a      	cmp	r3, #42	@ 0x2a
 800813a:	d132      	bne.n	80081a2 <_svfiprintf_r+0x186>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	1d1a      	adds	r2, r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	9203      	str	r2, [sp, #12]
 8008144:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008148:	3402      	adds	r4, #2
 800814a:	9305      	str	r3, [sp, #20]
 800814c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008210 <_svfiprintf_r+0x1f4>
 8008150:	7821      	ldrb	r1, [r4, #0]
 8008152:	2203      	movs	r2, #3
 8008154:	4650      	mov	r0, sl
 8008156:	f7f8 f84b 	bl	80001f0 <memchr>
 800815a:	b138      	cbz	r0, 800816c <_svfiprintf_r+0x150>
 800815c:	9b04      	ldr	r3, [sp, #16]
 800815e:	eba0 000a 	sub.w	r0, r0, sl
 8008162:	2240      	movs	r2, #64	@ 0x40
 8008164:	4082      	lsls	r2, r0
 8008166:	4313      	orrs	r3, r2
 8008168:	3401      	adds	r4, #1
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008170:	4824      	ldr	r0, [pc, #144]	@ (8008204 <_svfiprintf_r+0x1e8>)
 8008172:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008176:	2206      	movs	r2, #6
 8008178:	f7f8 f83a 	bl	80001f0 <memchr>
 800817c:	2800      	cmp	r0, #0
 800817e:	d036      	beq.n	80081ee <_svfiprintf_r+0x1d2>
 8008180:	4b21      	ldr	r3, [pc, #132]	@ (8008208 <_svfiprintf_r+0x1ec>)
 8008182:	bb1b      	cbnz	r3, 80081cc <_svfiprintf_r+0x1b0>
 8008184:	9b03      	ldr	r3, [sp, #12]
 8008186:	3307      	adds	r3, #7
 8008188:	f023 0307 	bic.w	r3, r3, #7
 800818c:	3308      	adds	r3, #8
 800818e:	9303      	str	r3, [sp, #12]
 8008190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008192:	4433      	add	r3, r6
 8008194:	9309      	str	r3, [sp, #36]	@ 0x24
 8008196:	e76a      	b.n	800806e <_svfiprintf_r+0x52>
 8008198:	fb0c 3202 	mla	r2, ip, r2, r3
 800819c:	460c      	mov	r4, r1
 800819e:	2001      	movs	r0, #1
 80081a0:	e7a8      	b.n	80080f4 <_svfiprintf_r+0xd8>
 80081a2:	2300      	movs	r3, #0
 80081a4:	3401      	adds	r4, #1
 80081a6:	9305      	str	r3, [sp, #20]
 80081a8:	4619      	mov	r1, r3
 80081aa:	f04f 0c0a 	mov.w	ip, #10
 80081ae:	4620      	mov	r0, r4
 80081b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b4:	3a30      	subs	r2, #48	@ 0x30
 80081b6:	2a09      	cmp	r2, #9
 80081b8:	d903      	bls.n	80081c2 <_svfiprintf_r+0x1a6>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0c6      	beq.n	800814c <_svfiprintf_r+0x130>
 80081be:	9105      	str	r1, [sp, #20]
 80081c0:	e7c4      	b.n	800814c <_svfiprintf_r+0x130>
 80081c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80081c6:	4604      	mov	r4, r0
 80081c8:	2301      	movs	r3, #1
 80081ca:	e7f0      	b.n	80081ae <_svfiprintf_r+0x192>
 80081cc:	ab03      	add	r3, sp, #12
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	462a      	mov	r2, r5
 80081d2:	4b0e      	ldr	r3, [pc, #56]	@ (800820c <_svfiprintf_r+0x1f0>)
 80081d4:	a904      	add	r1, sp, #16
 80081d6:	4638      	mov	r0, r7
 80081d8:	f3af 8000 	nop.w
 80081dc:	1c42      	adds	r2, r0, #1
 80081de:	4606      	mov	r6, r0
 80081e0:	d1d6      	bne.n	8008190 <_svfiprintf_r+0x174>
 80081e2:	89ab      	ldrh	r3, [r5, #12]
 80081e4:	065b      	lsls	r3, r3, #25
 80081e6:	f53f af2d 	bmi.w	8008044 <_svfiprintf_r+0x28>
 80081ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081ec:	e72c      	b.n	8008048 <_svfiprintf_r+0x2c>
 80081ee:	ab03      	add	r3, sp, #12
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	462a      	mov	r2, r5
 80081f4:	4b05      	ldr	r3, [pc, #20]	@ (800820c <_svfiprintf_r+0x1f0>)
 80081f6:	a904      	add	r1, sp, #16
 80081f8:	4638      	mov	r0, r7
 80081fa:	f000 f879 	bl	80082f0 <_printf_i>
 80081fe:	e7ed      	b.n	80081dc <_svfiprintf_r+0x1c0>
 8008200:	080086b0 	.word	0x080086b0
 8008204:	080086ba 	.word	0x080086ba
 8008208:	00000000 	.word	0x00000000
 800820c:	08007f65 	.word	0x08007f65
 8008210:	080086b6 	.word	0x080086b6

08008214 <_printf_common>:
 8008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	4616      	mov	r6, r2
 800821a:	4698      	mov	r8, r3
 800821c:	688a      	ldr	r2, [r1, #8]
 800821e:	690b      	ldr	r3, [r1, #16]
 8008220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008224:	4293      	cmp	r3, r2
 8008226:	bfb8      	it	lt
 8008228:	4613      	movlt	r3, r2
 800822a:	6033      	str	r3, [r6, #0]
 800822c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008230:	4607      	mov	r7, r0
 8008232:	460c      	mov	r4, r1
 8008234:	b10a      	cbz	r2, 800823a <_printf_common+0x26>
 8008236:	3301      	adds	r3, #1
 8008238:	6033      	str	r3, [r6, #0]
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	0699      	lsls	r1, r3, #26
 800823e:	bf42      	ittt	mi
 8008240:	6833      	ldrmi	r3, [r6, #0]
 8008242:	3302      	addmi	r3, #2
 8008244:	6033      	strmi	r3, [r6, #0]
 8008246:	6825      	ldr	r5, [r4, #0]
 8008248:	f015 0506 	ands.w	r5, r5, #6
 800824c:	d106      	bne.n	800825c <_printf_common+0x48>
 800824e:	f104 0a19 	add.w	sl, r4, #25
 8008252:	68e3      	ldr	r3, [r4, #12]
 8008254:	6832      	ldr	r2, [r6, #0]
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	42ab      	cmp	r3, r5
 800825a:	dc26      	bgt.n	80082aa <_printf_common+0x96>
 800825c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008260:	6822      	ldr	r2, [r4, #0]
 8008262:	3b00      	subs	r3, #0
 8008264:	bf18      	it	ne
 8008266:	2301      	movne	r3, #1
 8008268:	0692      	lsls	r2, r2, #26
 800826a:	d42b      	bmi.n	80082c4 <_printf_common+0xb0>
 800826c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008270:	4641      	mov	r1, r8
 8008272:	4638      	mov	r0, r7
 8008274:	47c8      	blx	r9
 8008276:	3001      	adds	r0, #1
 8008278:	d01e      	beq.n	80082b8 <_printf_common+0xa4>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	6922      	ldr	r2, [r4, #16]
 800827e:	f003 0306 	and.w	r3, r3, #6
 8008282:	2b04      	cmp	r3, #4
 8008284:	bf02      	ittt	eq
 8008286:	68e5      	ldreq	r5, [r4, #12]
 8008288:	6833      	ldreq	r3, [r6, #0]
 800828a:	1aed      	subeq	r5, r5, r3
 800828c:	68a3      	ldr	r3, [r4, #8]
 800828e:	bf0c      	ite	eq
 8008290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008294:	2500      	movne	r5, #0
 8008296:	4293      	cmp	r3, r2
 8008298:	bfc4      	itt	gt
 800829a:	1a9b      	subgt	r3, r3, r2
 800829c:	18ed      	addgt	r5, r5, r3
 800829e:	2600      	movs	r6, #0
 80082a0:	341a      	adds	r4, #26
 80082a2:	42b5      	cmp	r5, r6
 80082a4:	d11a      	bne.n	80082dc <_printf_common+0xc8>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e008      	b.n	80082bc <_printf_common+0xa8>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4652      	mov	r2, sl
 80082ae:	4641      	mov	r1, r8
 80082b0:	4638      	mov	r0, r7
 80082b2:	47c8      	blx	r9
 80082b4:	3001      	adds	r0, #1
 80082b6:	d103      	bne.n	80082c0 <_printf_common+0xac>
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	3501      	adds	r5, #1
 80082c2:	e7c6      	b.n	8008252 <_printf_common+0x3e>
 80082c4:	18e1      	adds	r1, r4, r3
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	2030      	movs	r0, #48	@ 0x30
 80082ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082ce:	4422      	add	r2, r4
 80082d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082d8:	3302      	adds	r3, #2
 80082da:	e7c7      	b.n	800826c <_printf_common+0x58>
 80082dc:	2301      	movs	r3, #1
 80082de:	4622      	mov	r2, r4
 80082e0:	4641      	mov	r1, r8
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c8      	blx	r9
 80082e6:	3001      	adds	r0, #1
 80082e8:	d0e6      	beq.n	80082b8 <_printf_common+0xa4>
 80082ea:	3601      	adds	r6, #1
 80082ec:	e7d9      	b.n	80082a2 <_printf_common+0x8e>
	...

080082f0 <_printf_i>:
 80082f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	7e0f      	ldrb	r7, [r1, #24]
 80082f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082f8:	2f78      	cmp	r7, #120	@ 0x78
 80082fa:	4691      	mov	r9, r2
 80082fc:	4680      	mov	r8, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	469a      	mov	sl, r3
 8008302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008306:	d807      	bhi.n	8008318 <_printf_i+0x28>
 8008308:	2f62      	cmp	r7, #98	@ 0x62
 800830a:	d80a      	bhi.n	8008322 <_printf_i+0x32>
 800830c:	2f00      	cmp	r7, #0
 800830e:	f000 80d2 	beq.w	80084b6 <_printf_i+0x1c6>
 8008312:	2f58      	cmp	r7, #88	@ 0x58
 8008314:	f000 80b9 	beq.w	800848a <_printf_i+0x19a>
 8008318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800831c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008320:	e03a      	b.n	8008398 <_printf_i+0xa8>
 8008322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008326:	2b15      	cmp	r3, #21
 8008328:	d8f6      	bhi.n	8008318 <_printf_i+0x28>
 800832a:	a101      	add	r1, pc, #4	@ (adr r1, 8008330 <_printf_i+0x40>)
 800832c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008330:	08008389 	.word	0x08008389
 8008334:	0800839d 	.word	0x0800839d
 8008338:	08008319 	.word	0x08008319
 800833c:	08008319 	.word	0x08008319
 8008340:	08008319 	.word	0x08008319
 8008344:	08008319 	.word	0x08008319
 8008348:	0800839d 	.word	0x0800839d
 800834c:	08008319 	.word	0x08008319
 8008350:	08008319 	.word	0x08008319
 8008354:	08008319 	.word	0x08008319
 8008358:	08008319 	.word	0x08008319
 800835c:	0800849d 	.word	0x0800849d
 8008360:	080083c7 	.word	0x080083c7
 8008364:	08008457 	.word	0x08008457
 8008368:	08008319 	.word	0x08008319
 800836c:	08008319 	.word	0x08008319
 8008370:	080084bf 	.word	0x080084bf
 8008374:	08008319 	.word	0x08008319
 8008378:	080083c7 	.word	0x080083c7
 800837c:	08008319 	.word	0x08008319
 8008380:	08008319 	.word	0x08008319
 8008384:	0800845f 	.word	0x0800845f
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	1d1a      	adds	r2, r3, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6032      	str	r2, [r6, #0]
 8008390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008398:	2301      	movs	r3, #1
 800839a:	e09d      	b.n	80084d8 <_printf_i+0x1e8>
 800839c:	6833      	ldr	r3, [r6, #0]
 800839e:	6820      	ldr	r0, [r4, #0]
 80083a0:	1d19      	adds	r1, r3, #4
 80083a2:	6031      	str	r1, [r6, #0]
 80083a4:	0606      	lsls	r6, r0, #24
 80083a6:	d501      	bpl.n	80083ac <_printf_i+0xbc>
 80083a8:	681d      	ldr	r5, [r3, #0]
 80083aa:	e003      	b.n	80083b4 <_printf_i+0xc4>
 80083ac:	0645      	lsls	r5, r0, #25
 80083ae:	d5fb      	bpl.n	80083a8 <_printf_i+0xb8>
 80083b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	da03      	bge.n	80083c0 <_printf_i+0xd0>
 80083b8:	232d      	movs	r3, #45	@ 0x2d
 80083ba:	426d      	negs	r5, r5
 80083bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c0:	4859      	ldr	r0, [pc, #356]	@ (8008528 <_printf_i+0x238>)
 80083c2:	230a      	movs	r3, #10
 80083c4:	e011      	b.n	80083ea <_printf_i+0xfa>
 80083c6:	6821      	ldr	r1, [r4, #0]
 80083c8:	6833      	ldr	r3, [r6, #0]
 80083ca:	0608      	lsls	r0, r1, #24
 80083cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80083d0:	d402      	bmi.n	80083d8 <_printf_i+0xe8>
 80083d2:	0649      	lsls	r1, r1, #25
 80083d4:	bf48      	it	mi
 80083d6:	b2ad      	uxthmi	r5, r5
 80083d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80083da:	4853      	ldr	r0, [pc, #332]	@ (8008528 <_printf_i+0x238>)
 80083dc:	6033      	str	r3, [r6, #0]
 80083de:	bf14      	ite	ne
 80083e0:	230a      	movne	r3, #10
 80083e2:	2308      	moveq	r3, #8
 80083e4:	2100      	movs	r1, #0
 80083e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083ea:	6866      	ldr	r6, [r4, #4]
 80083ec:	60a6      	str	r6, [r4, #8]
 80083ee:	2e00      	cmp	r6, #0
 80083f0:	bfa2      	ittt	ge
 80083f2:	6821      	ldrge	r1, [r4, #0]
 80083f4:	f021 0104 	bicge.w	r1, r1, #4
 80083f8:	6021      	strge	r1, [r4, #0]
 80083fa:	b90d      	cbnz	r5, 8008400 <_printf_i+0x110>
 80083fc:	2e00      	cmp	r6, #0
 80083fe:	d04b      	beq.n	8008498 <_printf_i+0x1a8>
 8008400:	4616      	mov	r6, r2
 8008402:	fbb5 f1f3 	udiv	r1, r5, r3
 8008406:	fb03 5711 	mls	r7, r3, r1, r5
 800840a:	5dc7      	ldrb	r7, [r0, r7]
 800840c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008410:	462f      	mov	r7, r5
 8008412:	42bb      	cmp	r3, r7
 8008414:	460d      	mov	r5, r1
 8008416:	d9f4      	bls.n	8008402 <_printf_i+0x112>
 8008418:	2b08      	cmp	r3, #8
 800841a:	d10b      	bne.n	8008434 <_printf_i+0x144>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07df      	lsls	r7, r3, #31
 8008420:	d508      	bpl.n	8008434 <_printf_i+0x144>
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	6861      	ldr	r1, [r4, #4]
 8008426:	4299      	cmp	r1, r3
 8008428:	bfde      	ittt	le
 800842a:	2330      	movle	r3, #48	@ 0x30
 800842c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008430:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008434:	1b92      	subs	r2, r2, r6
 8008436:	6122      	str	r2, [r4, #16]
 8008438:	f8cd a000 	str.w	sl, [sp]
 800843c:	464b      	mov	r3, r9
 800843e:	aa03      	add	r2, sp, #12
 8008440:	4621      	mov	r1, r4
 8008442:	4640      	mov	r0, r8
 8008444:	f7ff fee6 	bl	8008214 <_printf_common>
 8008448:	3001      	adds	r0, #1
 800844a:	d14a      	bne.n	80084e2 <_printf_i+0x1f2>
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	b004      	add	sp, #16
 8008452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	f043 0320 	orr.w	r3, r3, #32
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	4833      	ldr	r0, [pc, #204]	@ (800852c <_printf_i+0x23c>)
 8008460:	2778      	movs	r7, #120	@ 0x78
 8008462:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	6831      	ldr	r1, [r6, #0]
 800846a:	061f      	lsls	r7, r3, #24
 800846c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008470:	d402      	bmi.n	8008478 <_printf_i+0x188>
 8008472:	065f      	lsls	r7, r3, #25
 8008474:	bf48      	it	mi
 8008476:	b2ad      	uxthmi	r5, r5
 8008478:	6031      	str	r1, [r6, #0]
 800847a:	07d9      	lsls	r1, r3, #31
 800847c:	bf44      	itt	mi
 800847e:	f043 0320 	orrmi.w	r3, r3, #32
 8008482:	6023      	strmi	r3, [r4, #0]
 8008484:	b11d      	cbz	r5, 800848e <_printf_i+0x19e>
 8008486:	2310      	movs	r3, #16
 8008488:	e7ac      	b.n	80083e4 <_printf_i+0xf4>
 800848a:	4827      	ldr	r0, [pc, #156]	@ (8008528 <_printf_i+0x238>)
 800848c:	e7e9      	b.n	8008462 <_printf_i+0x172>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	f023 0320 	bic.w	r3, r3, #32
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	e7f6      	b.n	8008486 <_printf_i+0x196>
 8008498:	4616      	mov	r6, r2
 800849a:	e7bd      	b.n	8008418 <_printf_i+0x128>
 800849c:	6833      	ldr	r3, [r6, #0]
 800849e:	6825      	ldr	r5, [r4, #0]
 80084a0:	6961      	ldr	r1, [r4, #20]
 80084a2:	1d18      	adds	r0, r3, #4
 80084a4:	6030      	str	r0, [r6, #0]
 80084a6:	062e      	lsls	r6, r5, #24
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	d501      	bpl.n	80084b0 <_printf_i+0x1c0>
 80084ac:	6019      	str	r1, [r3, #0]
 80084ae:	e002      	b.n	80084b6 <_printf_i+0x1c6>
 80084b0:	0668      	lsls	r0, r5, #25
 80084b2:	d5fb      	bpl.n	80084ac <_printf_i+0x1bc>
 80084b4:	8019      	strh	r1, [r3, #0]
 80084b6:	2300      	movs	r3, #0
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	4616      	mov	r6, r2
 80084bc:	e7bc      	b.n	8008438 <_printf_i+0x148>
 80084be:	6833      	ldr	r3, [r6, #0]
 80084c0:	1d1a      	adds	r2, r3, #4
 80084c2:	6032      	str	r2, [r6, #0]
 80084c4:	681e      	ldr	r6, [r3, #0]
 80084c6:	6862      	ldr	r2, [r4, #4]
 80084c8:	2100      	movs	r1, #0
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7f7 fe90 	bl	80001f0 <memchr>
 80084d0:	b108      	cbz	r0, 80084d6 <_printf_i+0x1e6>
 80084d2:	1b80      	subs	r0, r0, r6
 80084d4:	6060      	str	r0, [r4, #4]
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	2300      	movs	r3, #0
 80084dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084e0:	e7aa      	b.n	8008438 <_printf_i+0x148>
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	4632      	mov	r2, r6
 80084e6:	4649      	mov	r1, r9
 80084e8:	4640      	mov	r0, r8
 80084ea:	47d0      	blx	sl
 80084ec:	3001      	adds	r0, #1
 80084ee:	d0ad      	beq.n	800844c <_printf_i+0x15c>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	079b      	lsls	r3, r3, #30
 80084f4:	d413      	bmi.n	800851e <_printf_i+0x22e>
 80084f6:	68e0      	ldr	r0, [r4, #12]
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	4298      	cmp	r0, r3
 80084fc:	bfb8      	it	lt
 80084fe:	4618      	movlt	r0, r3
 8008500:	e7a6      	b.n	8008450 <_printf_i+0x160>
 8008502:	2301      	movs	r3, #1
 8008504:	4632      	mov	r2, r6
 8008506:	4649      	mov	r1, r9
 8008508:	4640      	mov	r0, r8
 800850a:	47d0      	blx	sl
 800850c:	3001      	adds	r0, #1
 800850e:	d09d      	beq.n	800844c <_printf_i+0x15c>
 8008510:	3501      	adds	r5, #1
 8008512:	68e3      	ldr	r3, [r4, #12]
 8008514:	9903      	ldr	r1, [sp, #12]
 8008516:	1a5b      	subs	r3, r3, r1
 8008518:	42ab      	cmp	r3, r5
 800851a:	dcf2      	bgt.n	8008502 <_printf_i+0x212>
 800851c:	e7eb      	b.n	80084f6 <_printf_i+0x206>
 800851e:	2500      	movs	r5, #0
 8008520:	f104 0619 	add.w	r6, r4, #25
 8008524:	e7f5      	b.n	8008512 <_printf_i+0x222>
 8008526:	bf00      	nop
 8008528:	080086c1 	.word	0x080086c1
 800852c:	080086d2 	.word	0x080086d2

08008530 <memmove>:
 8008530:	4288      	cmp	r0, r1
 8008532:	b510      	push	{r4, lr}
 8008534:	eb01 0402 	add.w	r4, r1, r2
 8008538:	d902      	bls.n	8008540 <memmove+0x10>
 800853a:	4284      	cmp	r4, r0
 800853c:	4623      	mov	r3, r4
 800853e:	d807      	bhi.n	8008550 <memmove+0x20>
 8008540:	1e43      	subs	r3, r0, #1
 8008542:	42a1      	cmp	r1, r4
 8008544:	d008      	beq.n	8008558 <memmove+0x28>
 8008546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800854a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800854e:	e7f8      	b.n	8008542 <memmove+0x12>
 8008550:	4402      	add	r2, r0
 8008552:	4601      	mov	r1, r0
 8008554:	428a      	cmp	r2, r1
 8008556:	d100      	bne.n	800855a <memmove+0x2a>
 8008558:	bd10      	pop	{r4, pc}
 800855a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800855e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008562:	e7f7      	b.n	8008554 <memmove+0x24>

08008564 <_sbrk_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4d06      	ldr	r5, [pc, #24]	@ (8008580 <_sbrk_r+0x1c>)
 8008568:	2300      	movs	r3, #0
 800856a:	4604      	mov	r4, r0
 800856c:	4608      	mov	r0, r1
 800856e:	602b      	str	r3, [r5, #0]
 8008570:	f7f8 fc92 	bl	8000e98 <_sbrk>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_sbrk_r+0x1a>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_sbrk_r+0x1a>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20001214 	.word	0x20001214

08008584 <_realloc_r>:
 8008584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008588:	4680      	mov	r8, r0
 800858a:	4615      	mov	r5, r2
 800858c:	460c      	mov	r4, r1
 800858e:	b921      	cbnz	r1, 800859a <_realloc_r+0x16>
 8008590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008594:	4611      	mov	r1, r2
 8008596:	f7ff bc59 	b.w	8007e4c <_malloc_r>
 800859a:	b92a      	cbnz	r2, 80085a8 <_realloc_r+0x24>
 800859c:	f7ff fbea 	bl	8007d74 <_free_r>
 80085a0:	2400      	movs	r4, #0
 80085a2:	4620      	mov	r0, r4
 80085a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a8:	f000 f81a 	bl	80085e0 <_malloc_usable_size_r>
 80085ac:	4285      	cmp	r5, r0
 80085ae:	4606      	mov	r6, r0
 80085b0:	d802      	bhi.n	80085b8 <_realloc_r+0x34>
 80085b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80085b6:	d8f4      	bhi.n	80085a2 <_realloc_r+0x1e>
 80085b8:	4629      	mov	r1, r5
 80085ba:	4640      	mov	r0, r8
 80085bc:	f7ff fc46 	bl	8007e4c <_malloc_r>
 80085c0:	4607      	mov	r7, r0
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d0ec      	beq.n	80085a0 <_realloc_r+0x1c>
 80085c6:	42b5      	cmp	r5, r6
 80085c8:	462a      	mov	r2, r5
 80085ca:	4621      	mov	r1, r4
 80085cc:	bf28      	it	cs
 80085ce:	4632      	movcs	r2, r6
 80085d0:	f7ff fbc2 	bl	8007d58 <memcpy>
 80085d4:	4621      	mov	r1, r4
 80085d6:	4640      	mov	r0, r8
 80085d8:	f7ff fbcc 	bl	8007d74 <_free_r>
 80085dc:	463c      	mov	r4, r7
 80085de:	e7e0      	b.n	80085a2 <_realloc_r+0x1e>

080085e0 <_malloc_usable_size_r>:
 80085e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e4:	1f18      	subs	r0, r3, #4
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	bfbc      	itt	lt
 80085ea:	580b      	ldrlt	r3, [r1, r0]
 80085ec:	18c0      	addlt	r0, r0, r3
 80085ee:	4770      	bx	lr

080085f0 <_init>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	bf00      	nop
 80085f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f6:	bc08      	pop	{r3}
 80085f8:	469e      	mov	lr, r3
 80085fa:	4770      	bx	lr

080085fc <_fini>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	bf00      	nop
 8008600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008602:	bc08      	pop	{r3}
 8008604:	469e      	mov	lr, r3
 8008606:	4770      	bx	lr
