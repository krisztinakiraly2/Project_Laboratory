
Project_Laboratory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08008028  08008028  00009028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b4  080084b4  0000a354  2**0
                  CONTENTS
  4 .ARM          00000008  080084b4  080084b4  000094b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084bc  080084bc  0000a354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084bc  080084bc  000094bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084c0  080084c0  000094c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  080084c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f50  20000354  08008818  0000a354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012a4  08008818  0000b2a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010600  00000000  00000000  0000a384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c0  00000000  00000000  0001a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0001de48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095c  00000000  00000000  0001eb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d05  00000000  00000000  0001f464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013576  00000000  00000000  00038169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000879a4  00000000  00000000  0004b6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3083  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000379c  00000000  00000000  000d30c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d6864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000354 	.word	0x20000354
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008010 	.word	0x08008010

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000358 	.word	0x20000358
 80001dc:	08008010 	.word	0x08008010

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b35      	ldr	r3, [pc, #212]	@ (8000680 <MX_GPIO_Init+0xf0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a34      	ldr	r2, [pc, #208]	@ (8000680 <MX_GPIO_Init+0xf0>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b32      	ldr	r3, [pc, #200]	@ (8000680 <MX_GPIO_Init+0xf0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <MX_GPIO_Init+0xf0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a2d      	ldr	r2, [pc, #180]	@ (8000680 <MX_GPIO_Init+0xf0>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000680 <MX_GPIO_Init+0xf0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <MX_GPIO_Init+0xf0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a26      	ldr	r2, [pc, #152]	@ (8000680 <MX_GPIO_Init+0xf0>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <MX_GPIO_Init+0xf0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <MX_GPIO_Init+0xf0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a1f      	ldr	r2, [pc, #124]	@ (8000680 <MX_GPIO_Init+0xf0>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <MX_GPIO_Init+0xf0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800061c:	4819      	ldr	r0, [pc, #100]	@ (8000684 <MX_GPIO_Init+0xf4>)
 800061e:	f000 fd89 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000622:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	4812      	ldr	r0, [pc, #72]	@ (8000684 <MX_GPIO_Init+0xf4>)
 800063c:	f000 fbf6 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 8000640:	2301      	movs	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000648:	2301      	movs	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	480d      	ldr	r0, [pc, #52]	@ (8000688 <MX_GPIO_Init+0xf8>)
 8000654:	f000 fbea 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000658:	23c0      	movs	r3, #192	@ 0xc0
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000668:	2307      	movs	r3, #7
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	@ (800068c <MX_GPIO_Init+0xfc>)
 8000674:	f000 fbda 	bl	8000e2c <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020800 	.word	0x40020800
 8000688:	40020000 	.word	0x40020000
 800068c:	40020400 	.word	0x40020400

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fa21 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f857 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f7ff ff77 	bl	8000590 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a2:	f000 f96f 	bl	8000984 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80006a6:	f003 ff29 	bl	80044fc <MX_USB_DEVICE_Init>
  setlocale(LC_CTYPE, "");
 80006aa:	4920      	ldr	r1, [pc, #128]	@ (800072c <main+0x9c>)
 80006ac:	2002      	movs	r0, #2
 80006ae:	f007 f82f 	bl	8007710 <setlocale>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b8:	481d      	ldr	r0, [pc, #116]	@ (8000730 <main+0xa0>)
 80006ba:	f000 fd3b 	bl	8001134 <HAL_GPIO_WritePin>
  GPIO_PinState button;
  bool started=false;
 80006be:	2300      	movs	r3, #0
 80006c0:	77fb      	strb	r3, [r7, #31]
  wchar_t* message_hun = L"ABCDEFGHIJKLMNOPQRSTUVWXYZ \nabcdefghijklmnopqrstuvwxyz \n0123456789 \nárvíztűrő tükörfúrógép \n�?RVÍZTŰR�? TÜKÖRFÚRÓGÉP \n, . - / * + ? ! : \t @\n";
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <main+0xa4>)
 80006c4:	61bb      	str	r3, [r7, #24]
  wchar_t* message_eng = L"ABCDEFGHIJKLMNOPQRSTUVWXYZ \nabcdefghijklmnopqrstuvwxyz \n0123456789 \n, . - / * + ? ! : \t @\n";
 80006c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <main+0xa8>)
 80006c8:	617b      	str	r3, [r7, #20]
  int num = 0x50;
 80006ca:	2350      	movs	r3, #80	@ 0x50
 80006cc:	613b      	str	r3, [r7, #16]
  wchar_t del_str[2];
  del_str[0] = 127;
 80006ce:	237f      	movs	r3, #127	@ 0x7f
 80006d0:	607b      	str	r3, [r7, #4]
  del_str[1] = L'\0';
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]

  bool test = false;
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
  uint8_t rx_data;

  HAL_Delay(3000);
 80006da:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006de:	f000 fa6f 	bl	8000bc0 <HAL_Delay>
		  		  started = !started;
		  	  }
	  }*/

	  uint8_t result;
	  USBD_CDC_SetTxBuffer(NUMBER_OF_CDC, &hUsbDevice, txbuffer, 27);
 80006e2:	231b      	movs	r3, #27
 80006e4:	4a15      	ldr	r2, [pc, #84]	@ (800073c <main+0xac>)
 80006e6:	4916      	ldr	r1, [pc, #88]	@ (8000740 <main+0xb0>)
 80006e8:	2001      	movs	r0, #1
 80006ea:	f004 fd49 	bl	8005180 <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(NUMBER_OF_CDC, &hUsbDevice);
 80006ee:	4914      	ldr	r1, [pc, #80]	@ (8000740 <main+0xb0>)
 80006f0:	2001      	movs	r0, #1
 80006f2:	f004 fd87 	bl	8005204 <USBD_CDC_TransmitPacket>
 80006f6:	4603      	mov	r3, r0
 80006f8:	73bb      	strb	r3, [r7, #14]
	  if(result == USBD_OK)
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d108      	bne.n	8000712 <main+0x82>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_set);
 8000700:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <main+0xb4>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <main+0xa0>)
 800070c:	f000 fd12 	bl	8001134 <HAL_GPIO_WritePin>
 8000710:	e007      	b.n	8000722 <main+0x92>
	  else
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_reset);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <main+0xb8>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <main+0xa0>)
 800071e:	f000 fd09 	bl	8001134 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8000722:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000726:	f000 fa4b 	bl	8000bc0 <HAL_Delay>
  {
 800072a:	e7da      	b.n	80006e2 <main+0x52>
 800072c:	08008028 	.word	0x08008028
 8000730:	40020800 	.word	0x40020800
 8000734:	0800802c 	.word	0x0800802c
 8000738:	08008260 	.word	0x08008260
 800073c:	20000004 	.word	0x20000004
 8000740:	20000860 	.word	0x20000860
 8000744:	20000370 	.word	0x20000370
 8000748:	20000000 	.word	0x20000000

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2230      	movs	r2, #48	@ 0x30
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f006 ffb2 	bl	80076c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b29      	ldr	r3, [pc, #164]	@ (800081c <SystemClock_Config+0xd0>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a28      	ldr	r2, [pc, #160]	@ (800081c <SystemClock_Config+0xd0>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b26      	ldr	r3, [pc, #152]	@ (800081c <SystemClock_Config+0xd0>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <SystemClock_Config+0xd4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000798:	4a21      	ldr	r2, [pc, #132]	@ (8000820 <SystemClock_Config+0xd4>)
 800079a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <SystemClock_Config+0xd4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007c0:	2319      	movs	r3, #25
 80007c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ca:	2304      	movs	r3, #4
 80007cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ce:	2307      	movs	r3, #7
 80007d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 ff18 	bl	800260c <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e2:	f000 f81f 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2302      	movs	r3, #2
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f002 f97a 	bl	8002afc <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800080e:	f000 f809 	bl	8000824 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3750      	adds	r7, #80	@ 0x50
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	4a0f      	ldr	r2, [pc, #60]	@ (800087c <HAL_MspInit+0x4c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000844:	6453      	str	r3, [r2, #68]	@ 0x44
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	@ 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <NMI_Handler+0x4>

08000888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <MemManage_Handler+0x4>

08000898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d6:	f000 f953 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <OTG_FS_IRQHandler+0x10>)
 80008e6:	f000 fd82 	bl	80013ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000378 	.word	0x20000378

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	@ (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	@ (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f006 fefc 	bl	8007720 <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20010000 	.word	0x20010000
 8000954:	00000400 	.word	0x00000400
 8000958:	20000374 	.word	0x20000374
 800095c:	200012a8 	.word	0x200012a8

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800098e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2204      	movs	r2, #4
 8000994:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	2202      	movs	r2, #2
 800099a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c8:	f000 fbcd 	bl	8001166 <HAL_PCD_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009d2:	f7ff ff27 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000378 	.word	0x20000378

080009e0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a00:	d13a      	bne.n	8000a78 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <HAL_PCD_MspInit+0xa0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000a80 <HAL_PCD_MspInit+0xa0>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <HAL_PCD_MspInit+0xa0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000a1e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a30:	230a      	movs	r3, #10
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4812      	ldr	r0, [pc, #72]	@ (8000a84 <HAL_PCD_MspInit+0xa4>)
 8000a3c:	f000 f9f6 	bl	8000e2c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_PCD_MspInit+0xa0>)
 8000a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a44:	4a0e      	ldr	r2, [pc, #56]	@ (8000a80 <HAL_PCD_MspInit+0xa0>)
 8000a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4a:	6353      	str	r3, [r2, #52]	@ 0x34
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <HAL_PCD_MspInit+0xa0>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a54:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <HAL_PCD_MspInit+0xa0>)
 8000a56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <HAL_PCD_MspInit+0xa0>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2043      	movs	r0, #67	@ 0x43
 8000a6e:	f000 f9a6 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000a72:	2043      	movs	r0, #67	@ 0x43
 8000a74:	f000 f9bf 	bl	8000df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	@ 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000

08000a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ac0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a8c:	f7ff ff68 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a90:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a92:	490d      	ldr	r1, [pc, #52]	@ (8000ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a94:	4a0d      	ldr	r2, [pc, #52]	@ (8000acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f006 fe39 	bl	800772c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aba:	f7ff fde9 	bl	8000690 <main>
  bx  lr    
 8000abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8000acc:	080084c4 	.word	0x080084c4
  ldr r2, =_sbss
 8000ad0:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8000ad4:	200012a4 	.word	0x200012a4

08000ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC_IRQHandler>
	...

08000adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b1c <HAL_Init+0x40>)
 8000ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aec:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <HAL_Init+0x40>)
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	@ (8000b1c <HAL_Init+0x40>)
 8000afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f94f 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe8e 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f967 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f92f 	bl	8000dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	@ (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000010 	.word	0x20000010
 8000b78:	20000018 	.word	0x20000018
 8000b7c:	20000014 	.word	0x20000014

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000018 	.word	0x20000018
 8000ba4:	2000085c 	.word	0x2000085c

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	2000085c 	.word	0x2000085c

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff ffee 	bl	8000ba8 <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffde 	bl	8000ba8 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000018 	.word	0x20000018

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	@ (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	@ (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	@ 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff8e 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff29 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff3e 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff8e 	bl	8000cfc <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5d 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff31 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa2 	bl	8000d64 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e159      	b.n	80010fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8148 	bne.w	80010f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d017      	beq.n	8000f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d123      	bne.n	8000f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80a2 	beq.w	80010f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b57      	ldr	r3, [pc, #348]	@ (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	4a56      	ldr	r2, [pc, #344]	@ (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc2:	4b54      	ldr	r3, [pc, #336]	@ (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a52      	ldr	r2, [pc, #328]	@ (8001118 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a49      	ldr	r2, [pc, #292]	@ (800111c <HAL_GPIO_Init+0x2f0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x202>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a48      	ldr	r2, [pc, #288]	@ (8001120 <HAL_GPIO_Init+0x2f4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x1fe>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a47      	ldr	r2, [pc, #284]	@ (8001124 <HAL_GPIO_Init+0x2f8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x1fa>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a46      	ldr	r2, [pc, #280]	@ (8001128 <HAL_GPIO_Init+0x2fc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x1f6>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a45      	ldr	r2, [pc, #276]	@ (800112c <HAL_GPIO_Init+0x300>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x1f2>
 800101a:	2304      	movs	r3, #4
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800101e:	2307      	movs	r3, #7
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x204>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x204>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800102e:	2300      	movs	r3, #0
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001040:	4935      	ldr	r1, [pc, #212]	@ (8001118 <HAL_GPIO_Init+0x2ec>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104e:	4b38      	ldr	r3, [pc, #224]	@ (8001130 <HAL_GPIO_Init+0x304>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001072:	4a2f      	ldr	r2, [pc, #188]	@ (8001130 <HAL_GPIO_Init+0x304>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001078:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <HAL_GPIO_Init+0x304>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800109c:	4a24      	ldr	r2, [pc, #144]	@ (8001130 <HAL_GPIO_Init+0x304>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a2:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <HAL_GPIO_Init+0x304>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <HAL_GPIO_Init+0x304>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <HAL_GPIO_Init+0x304>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <HAL_GPIO_Init+0x304>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f67f aea2 	bls.w	8000e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3724      	adds	r7, #36	@ 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001150:	e003      	b.n	800115a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	041a      	lsls	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	619a      	str	r2, [r3, #24]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af02      	add	r7, sp, #8
 800116c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e101      	b.n	800137c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d106      	bne.n	8001198 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fc24 	bl	80009e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011a6:	d102      	bne.n	80011ae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 ff71 	bl	800309a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7c1a      	ldrb	r2, [r3, #16]
 80011c0:	f88d 2000 	strb.w	r2, [sp]
 80011c4:	3304      	adds	r3, #4
 80011c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011c8:	f001 fe50 	bl	8002e6c <USB_CoreInit>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2202      	movs	r2, #2
 80011d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0ce      	b.n	800137c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 ff69 	bl	80030bc <USB_SetCurrentMode>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0bf      	b.n	800137c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e04a      	b.n	8001298 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3315      	adds	r3, #21
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	3314      	adds	r3, #20
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	b298      	uxth	r0, r3
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	332e      	adds	r3, #46	@ 0x2e
 800123e:	4602      	mov	r2, r0
 8001240:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	3318      	adds	r3, #24
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	331c      	adds	r3, #28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	3320      	adds	r3, #32
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	3324      	adds	r3, #36	@ 0x24
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3301      	adds	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	791b      	ldrb	r3, [r3, #4]
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3af      	bcc.n	8001202 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e044      	b.n	8001332 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	440b      	add	r3, r1
 80012cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4413      	add	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	3301      	adds	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	791b      	ldrb	r3, [r3, #4]
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3b5      	bcc.n	80012a8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7c1a      	ldrb	r2, [r3, #16]
 8001344:	f88d 2000 	strb.w	r2, [sp]
 8001348:	3304      	adds	r3, #4
 800134a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800134c:	f001 ff02 	bl	8003154 <USB_DevInit>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2202      	movs	r2, #2
 800135a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00c      	b.n	800137c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f002 ff4c 	bl	8004212 <USB_DevDisconnect>

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_PCD_Start+0x1c>
 800139c:	2302      	movs	r3, #2
 800139e:	e022      	b.n	80013e6 <HAL_PCD_Start+0x62>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d105      	bne.n	80013c8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fe53 	bl	8003078 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 fefa 	bl	80041d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013ee:	b590      	push	{r4, r7, lr}
 80013f0:	b08d      	sub	sp, #52	@ 0x34
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 ffb8 	bl	800437a <USB_GetMode>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 848c 	bne.w	8001d2a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f002 ff1c 	bl	8004254 <USB_ReadInterrupts>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8482 	beq.w	8001d28 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f002 ff09 	bl	8004254 <USB_ReadInterrupts>
 8001442:	4603      	mov	r3, r0
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b02      	cmp	r3, #2
 800144a:	d107      	bne.n	800145c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f002 0202 	and.w	r2, r2, #2
 800145a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fef7 	bl	8004254 <USB_ReadInterrupts>
 8001466:	4603      	mov	r3, r0
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b10      	cmp	r3, #16
 800146e:	d161      	bne.n	8001534 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0210 	bic.w	r2, r2, #16
 800147e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	f003 020f 	and.w	r2, r3, #15
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	3304      	adds	r3, #4
 800149e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	0c5b      	lsrs	r3, r3, #17
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d124      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d035      	beq.n	8001524 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	6a38      	ldr	r0, [r7, #32]
 80014cc:	f002 fd2e 	bl	8003f2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014dc:	441a      	add	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ee:	441a      	add	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	e016      	b.n	8001524 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	0c5b      	lsrs	r3, r3, #17
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d110      	bne.n	8001524 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001508:	2208      	movs	r2, #8
 800150a:	4619      	mov	r1, r3
 800150c:	6a38      	ldr	r0, [r7, #32]
 800150e:	f002 fd0d 	bl	8003f2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800151e:	441a      	add	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0210 	orr.w	r2, r2, #16
 8001532:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f002 fe8b 	bl	8004254 <USB_ReadInterrupts>
 800153e:	4603      	mov	r3, r0
 8001540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001544:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001548:	f040 80a7 	bne.w	800169a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f002 fe90 	bl	800427a <USB_ReadDevAllOutEpInterrupt>
 800155a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800155c:	e099      	b.n	8001692 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800155e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 808e 	beq.w	8001686 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f002 feb4 	bl	80042e2 <USB_ReadDevOutEPInterrupt>
 800157a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00c      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	015a      	lsls	r2, r3, #5
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	4413      	add	r3, r2
 800158e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001592:	461a      	mov	r2, r3
 8001594:	2301      	movs	r3, #1
 8001596:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001598:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fea4 	bl	80022e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00c      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	015a      	lsls	r2, r3, #5
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015b6:	461a      	mov	r2, r3
 80015b8:	2308      	movs	r3, #8
 80015ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 ff7a 	bl	80024b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	015a      	lsls	r2, r3, #5
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015da:	461a      	mov	r2, r3
 80015dc:	2310      	movs	r3, #16
 80015de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d030      	beq.n	800164c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015f2:	2b80      	cmp	r3, #128	@ 0x80
 80015f4:	d109      	bne.n	800160a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001604:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001608:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800160a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	3304      	adds	r3, #4
 800161e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	78db      	ldrb	r3, [r3, #3]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2200      	movs	r2, #0
 800162c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4619      	mov	r1, r3
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f005 fe09 	bl	800724c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001646:	461a      	mov	r2, r3
 8001648:	2302      	movs	r3, #2
 800164a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	015a      	lsls	r2, r3, #5
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	4413      	add	r3, r2
 800165e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001662:	461a      	mov	r2, r3
 8001664:	2320      	movs	r3, #32
 8001666:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	015a      	lsls	r2, r3, #5
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4413      	add	r3, r2
 800167a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800167e:	461a      	mov	r2, r3
 8001680:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001684:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	3301      	adds	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800168c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800168e:	085b      	lsrs	r3, r3, #1
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001694:	2b00      	cmp	r3, #0
 8001696:	f47f af62 	bne.w	800155e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 fdd8 	bl	8004254 <USB_ReadInterrupts>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80016ae:	f040 80db 	bne.w	8001868 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fdf9 	bl	80042ae <USB_ReadDevAllInEpInterrupt>
 80016bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80016c2:	e0cd      	b.n	8001860 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80c2 	beq.w	8001854 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 fe1f 	bl	800431e <USB_ReadDevInEPInterrupt>
 80016e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d057      	beq.n	800179c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	2201      	movs	r2, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43db      	mvns	r3, r3
 8001706:	69f9      	ldr	r1, [r7, #28]
 8001708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800170c:	4013      	ands	r3, r2
 800170e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800171c:	461a      	mov	r2, r3
 800171e:	2301      	movs	r3, #1
 8001720:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	799b      	ldrb	r3, [r3, #6]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d132      	bne.n	8001790 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3320      	adds	r3, #32
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4403      	add	r3, r0
 800174a:	331c      	adds	r3, #28
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4419      	add	r1, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001754:	4613      	mov	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4403      	add	r3, r0
 800175e:	3320      	adds	r3, #32
 8001760:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	2b00      	cmp	r3, #0
 8001766:	d113      	bne.n	8001790 <HAL_PCD_IRQHandler+0x3a2>
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	3324      	adds	r3, #36	@ 0x24
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001788:	461a      	mov	r2, r3
 800178a:	2101      	movs	r1, #1
 800178c:	f002 fe26 	bl	80043dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4619      	mov	r1, r3
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f005 fcd3 	bl	8007142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017b2:	461a      	mov	r2, r3
 80017b4:	2308      	movs	r3, #8
 80017b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ce:	461a      	mov	r2, r3
 80017d0:	2310      	movs	r3, #16
 80017d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ea:	461a      	mov	r2, r3
 80017ec:	2340      	movs	r3, #64	@ 0x40
 80017ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d023      	beq.n	8001842 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017fc:	6a38      	ldr	r0, [r7, #32]
 80017fe:	f001 fe0d 	bl	800341c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	3310      	adds	r3, #16
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	3304      	adds	r3, #4
 8001814:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	78db      	ldrb	r3, [r3, #3]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d108      	bne.n	8001830 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2200      	movs	r2, #0
 8001822:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f005 fd20 	bl	8007270 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800183c:	461a      	mov	r2, r3
 800183e:	2302      	movs	r3, #2
 8001840:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800184c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fcbd 	bl	80021ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	3301      	adds	r3, #1
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800185a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001862:	2b00      	cmp	r3, #0
 8001864:	f47f af2e 	bne.w	80016c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fcf1 	bl	8004254 <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800187c:	d122      	bne.n	80018c4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001898:	2b01      	cmp	r3, #1
 800189a:	d108      	bne.n	80018ae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018a4:	2100      	movs	r1, #0
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fea4 	bl	80025f4 <HAL_PCDEx_LPM_Callback>
 80018ac:	e002      	b.n	80018b4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f005 fcbe 	bl	8007230 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80018c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fcc3 	bl	8004254 <USB_ReadInterrupts>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018d8:	d112      	bne.n	8001900 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f005 fc7a 	bl	80071e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80018fe:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fca5 	bl	8004254 <USB_ReadInterrupts>
 800190a:	4603      	mov	r3, r0
 800190c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001914:	f040 80b7 	bne.w	8001a86 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2110      	movs	r1, #16
 8001932:	4618      	mov	r0, r3
 8001934:	f001 fd72 	bl	800341c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800193c:	e046      	b.n	80019cc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800193e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4413      	add	r3, r2
 8001946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800194a:	461a      	mov	r2, r3
 800194c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001950:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001954:	015a      	lsls	r2, r3, #5
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001962:	0151      	lsls	r1, r2, #5
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	440a      	add	r2, r1
 8001968:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800196c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001970:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800197e:	461a      	mov	r2, r3
 8001980:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001984:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	4413      	add	r3, r2
 800198e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001996:	0151      	lsls	r1, r2, #5
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	440a      	add	r2, r1
 800199c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019b6:	0151      	lsls	r1, r2, #5
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	440a      	add	r2, r1
 80019bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c8:	3301      	adds	r3, #1
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	791b      	ldrb	r3, [r3, #4]
 80019d0:	461a      	mov	r2, r3
 80019d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d3b2      	bcc.n	800193e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019e6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80019ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7bdb      	ldrb	r3, [r3, #15]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d016      	beq.n	8001a22 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a04:	f043 030b 	orr.w	r3, r3, #11
 8001a08:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a1a:	f043 030b 	orr.w	r3, r3, #11
 8001a1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a20:	e015      	b.n	8001a4e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a34:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001a38:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a48:	f043 030b 	orr.w	r3, r3, #11
 8001a4c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a5c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001a60:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a70:	461a      	mov	r2, r3
 8001a72:	f002 fcb3 	bl	80043dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fbe2 	bl	8004254 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a9a:	d123      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fc78 	bl	8004396 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 fd2f 	bl	800350e <USB_GetDevSpeed>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681c      	ldr	r4, [r3, #0]
 8001abc:	f001 f9ca 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f001 fa33 	bl	8002f34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f005 fb5f 	bl	8007192 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 fbb3 	bl	8004254 <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d10a      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f005 fb3c 	bl	8007176 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f002 0208 	and.w	r2, r2, #8
 8001b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 fb9e 	bl	8004254 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b1e:	2b80      	cmp	r3, #128	@ 0x80
 8001b20:	d123      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2e:	2301      	movs	r3, #1
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b32:	e014      	b.n	8001b5e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fb0a 	bl	800216c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	791b      	ldrb	r3, [r3, #4]
 8001b62:	461a      	mov	r2, r3
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d3e4      	bcc.n	8001b34 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 fb70 	bl	8004254 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b7e:	d13c      	bne.n	8001bfa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b80:	2301      	movs	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b84:	e02b      	b.n	8001bde <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3318      	adds	r3, #24
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d115      	bne.n	8001bd8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	da12      	bge.n	8001bd8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3317      	adds	r3, #23
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 faca 	bl	800216c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	3301      	adds	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	791b      	ldrb	r3, [r3, #4]
 8001be2:	461a      	mov	r2, r3
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d3cd      	bcc.n	8001b86 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fb28 	bl	8004254 <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c0e:	d156      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c10:	2301      	movs	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c14:	e045      	b.n	8001ca2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	015a      	lsls	r2, r3, #5
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d12e      	bne.n	8001c9c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c3e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da2b      	bge.n	8001c9c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001c50:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d121      	bne.n	8001c9c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10a      	bne.n	8001c9c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c98:	6053      	str	r3, [r2, #4]
            break;
 8001c9a:	e008      	b.n	8001cae <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	791b      	ldrb	r3, [r3, #4]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d3b3      	bcc.n	8001c16 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fac6 	bl	8004254 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cd2:	d10a      	bne.n	8001cea <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f005 fadd 	bl	8007294 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 fab0 	bl	8004254 <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d115      	bne.n	8001d2a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f005 facd 	bl	80072b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	e000      	b.n	8001d2a <HAL_PCD_IRQHandler+0x93c>
      return;
 8001d28:	bf00      	nop
    }
  }
}
 8001d2a:	3734      	adds	r7, #52	@ 0x34
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd90      	pop	{r4, r7, pc}

08001d30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_PCD_SetAddress+0x1a>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e012      	b.n	8001d70 <HAL_PCD_SetAddress+0x40>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f002 fa0f 	bl	8004184 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	4608      	mov	r0, r1
 8001d82:	4611      	mov	r1, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	70fb      	strb	r3, [r7, #3]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	803b      	strh	r3, [r7, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da0f      	bge.n	8001dbe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	3310      	adds	r3, #16
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	3304      	adds	r3, #4
 8001db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	705a      	strb	r2, [r3, #1]
 8001dbc:	e00f      	b.n	8001dde <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	f003 020f 	and.w	r2, r3, #15
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001dea:	883b      	ldrh	r3, [r7, #0]
 8001dec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	78ba      	ldrb	r2, [r7, #2]
 8001df8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	785b      	ldrb	r3, [r3, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e0c:	78bb      	ldrb	r3, [r7, #2]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d102      	bne.n	8001e18 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_PCD_EP_Open+0xae>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e00e      	b.n	8001e44 <HAL_PCD_EP_Open+0xcc>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68f9      	ldr	r1, [r7, #12]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 fb8f 	bl	8003558 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001e42:	7afb      	ldrb	r3, [r7, #11]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	da0f      	bge.n	8001e80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3310      	adds	r3, #16
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	705a      	strb	r2, [r3, #1]
 8001e7e:	e00f      	b.n	8001ea0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	f003 020f 	and.w	r2, r3, #15
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	3304      	adds	r3, #4
 8001e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_PCD_EP_Close+0x6e>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e00e      	b.n	8001ed8 <HAL_PCD_EP_Close+0x8c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 fbcd 	bl	8003668 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	460b      	mov	r3, r1
 8001eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef0:	7afb      	ldrb	r3, [r7, #11]
 8001ef2:	f003 020f 	and.w	r2, r3, #15
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	799b      	ldrb	r3, [r3, #6]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d102      	bne.n	8001f3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	799b      	ldrb	r3, [r3, #6]
 8001f44:	461a      	mov	r2, r3
 8001f46:	6979      	ldr	r1, [r7, #20]
 8001f48:	f001 fc6a 	bl	8003820 <USB_EPStartXfer>

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 020f 	and.w	r2, r3, #15
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001f78:	681b      	ldr	r3, [r3, #0]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	460b      	mov	r3, r1
 8001f94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f96:	7afb      	ldrb	r3, [r7, #11]
 8001f98:	f003 020f 	and.w	r2, r3, #15
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	3310      	adds	r3, #16
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc6:	7afb      	ldrb	r3, [r7, #11]
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	799b      	ldrb	r3, [r3, #6]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d102      	bne.n	8001fe0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	799b      	ldrb	r3, [r3, #6]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	6979      	ldr	r1, [r7, #20]
 8001fec:	f001 fc18 	bl	8003820 <USB_EPStartXfer>

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	7912      	ldrb	r2, [r2, #4]
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e04f      	b.n	80020b8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	da0f      	bge.n	8002040 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 020f 	and.w	r2, r3, #15
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3310      	adds	r3, #16
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	705a      	strb	r2, [r3, #1]
 800203e:	e00d      	b.n	800205c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	3304      	adds	r3, #4
 8002054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	b2da      	uxtb	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_PCD_EP_SetStall+0x82>
 8002078:	2302      	movs	r3, #2
 800207a:	e01d      	b.n	80020b8 <HAL_PCD_EP_SetStall+0xbe>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68f9      	ldr	r1, [r7, #12]
 800208a:	4618      	mov	r0, r3
 800208c:	f001 ffa6 	bl	8003fdc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7999      	ldrb	r1, [r3, #6]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020a8:	461a      	mov	r2, r3
 80020aa:	f002 f997 	bl	80043dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	7912      	ldrb	r2, [r2, #4]
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e042      	b.n	8002164 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da0f      	bge.n	8002106 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	3310      	adds	r3, #16
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	705a      	strb	r2, [r3, #1]
 8002104:	e00f      	b.n	8002126 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 020f 	and.w	r2, r3, #15
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_PCD_EP_ClrStall+0x86>
 8002142:	2302      	movs	r3, #2
 8002144:	e00e      	b.n	8002164 <HAL_PCD_EP_ClrStall+0xa4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	4618      	mov	r0, r3
 8002156:	f001 ffaf 	bl	80040b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800217c:	2b00      	cmp	r3, #0
 800217e:	da0c      	bge.n	800219a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	f003 020f 	and.w	r2, r3, #15
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	3310      	adds	r3, #16
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e00c      	b.n	80021b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	3304      	adds	r3, #4
 80021b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68f9      	ldr	r1, [r7, #12]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 fdce 	bl	8003d5c <USB_EPStopXfer>
 80021c0:	4603      	mov	r3, r0
 80021c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021c4:	7afb      	ldrb	r3, [r7, #11]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b08a      	sub	sp, #40	@ 0x28
 80021d2:	af02      	add	r7, sp, #8
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	3310      	adds	r3, #16
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d901      	bls.n	8002206 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06b      	b.n	80022de <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	429a      	cmp	r2, r3
 800221a:	d902      	bls.n	8002222 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3303      	adds	r3, #3
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800222a:	e02a      	b.n	8002282 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	429a      	cmp	r2, r3
 8002240:	d902      	bls.n	8002248 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	3303      	adds	r3, #3
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	68d9      	ldr	r1, [r3, #12]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	4603      	mov	r3, r0
 8002264:	6978      	ldr	r0, [r7, #20]
 8002266:	f001 fe23 	bl	8003eb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	441a      	add	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	441a      	add	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	429a      	cmp	r2, r3
 8002296:	d809      	bhi.n	80022ac <PCD_WriteEmptyTxFifo+0xde>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d203      	bcs.n	80022ac <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1bf      	bne.n	800222c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d811      	bhi.n	80022dc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	2201      	movs	r2, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	6939      	ldr	r1, [r7, #16]
 80022d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80022d8:	4013      	ands	r3, r2
 80022da:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	333c      	adds	r3, #60	@ 0x3c
 8002300:	3304      	adds	r3, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	799b      	ldrb	r3, [r3, #6]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d17b      	bne.n	8002416 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	4a61      	ldr	r2, [pc, #388]	@ (80024b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	f240 80b9 	bls.w	80024a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80b3 	beq.w	80024a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234a:	461a      	mov	r2, r3
 800234c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002350:	6093      	str	r3, [r2, #8]
 8002352:	e0a7      	b.n	80024a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800236a:	461a      	mov	r2, r3
 800236c:	2320      	movs	r3, #32
 800236e:	6093      	str	r3, [r2, #8]
 8002370:	e098      	b.n	80024a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	f040 8093 	bne.w	80024a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4a4b      	ldr	r2, [pc, #300]	@ (80024b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d90f      	bls.n	80023a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800239c:	461a      	mov	r2, r3
 800239e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023a2:	6093      	str	r3, [r2, #8]
 80023a4:	e07e      	b.n	80024a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	3304      	adds	r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a1a      	ldr	r2, [r3, #32]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	0159      	lsls	r1, r3, #5
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d2:	1ad2      	subs	r2, r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d114      	bne.n	8002408 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023f0:	461a      	mov	r2, r3
 80023f2:	2101      	movs	r1, #1
 80023f4:	f001 fff2 	bl	80043dc <USB_EP0_OutStart>
 80023f8:	e006      	b.n	8002408 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	441a      	add	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f004 fe7c 	bl	800710c <HAL_PCD_DataOutStageCallback>
 8002414:	e046      	b.n	80024a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	4a26      	ldr	r2, [pc, #152]	@ (80024b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d124      	bne.n	8002468 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002434:	461a      	mov	r2, r3
 8002436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800243a:	6093      	str	r3, [r2, #8]
 800243c:	e032      	b.n	80024a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002454:	461a      	mov	r2, r3
 8002456:	2320      	movs	r3, #32
 8002458:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f004 fe53 	bl	800710c <HAL_PCD_DataOutStageCallback>
 8002466:	e01d      	b.n	80024a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d114      	bne.n	8002498 <PCD_EP_OutXfrComplete_int+0x1b0>
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d108      	bne.n	8002498 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002490:	461a      	mov	r2, r3
 8002492:	2100      	movs	r1, #0
 8002494:	f001 ffa2 	bl	80043dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f004 fe34 	bl	800710c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	4f54300a 	.word	0x4f54300a
 80024b4:	4f54310a 	.word	0x4f54310a

080024b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	333c      	adds	r3, #60	@ 0x3c
 80024d0:	3304      	adds	r3, #4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a15      	ldr	r2, [pc, #84]	@ (8002540 <PCD_EP_OutSetupPacket_int+0x88>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d90e      	bls.n	800250c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002504:	461a      	mov	r2, r3
 8002506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800250a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f004 fdeb 	bl	80070e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <PCD_EP_OutSetupPacket_int+0x88>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d90c      	bls.n	8002534 <PCD_EP_OutSetupPacket_int+0x7c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	799b      	ldrb	r3, [r3, #6]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800252c:	461a      	mov	r2, r3
 800252e:	2101      	movs	r1, #1
 8002530:	f001 ff54 	bl	80043dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	4f54300a 	.word	0x4f54300a

08002544 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
 8002550:	4613      	mov	r3, r2
 8002552:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002562:	883b      	ldrh	r3, [r7, #0]
 8002564:	0419      	lsls	r1, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	430a      	orrs	r2, r1
 800256e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002570:	e028      	b.n	80025c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4413      	add	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	e00d      	b.n	80025a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	3340      	adds	r3, #64	@ 0x40
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4413      	add	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	3301      	adds	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3ec      	bcc.n	8002586 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025ac:	883b      	ldrh	r3, [r7, #0]
 80025ae:	0418      	lsls	r0, r3, #16
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	4302      	orrs	r2, r0
 80025bc:	3340      	adds	r3, #64	@ 0x40
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e267      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d075      	beq.n	8002716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800262a:	4b88      	ldr	r3, [pc, #544]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d00c      	beq.n	8002650 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4b85      	ldr	r3, [pc, #532]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800263e:	2b08      	cmp	r3, #8
 8002640:	d112      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b82      	ldr	r3, [pc, #520]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800264e:	d10b      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	4b7e      	ldr	r3, [pc, #504]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d05b      	beq.n	8002714 <HAL_RCC_OscConfig+0x108>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d157      	bne.n	8002714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e242      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002670:	d106      	bne.n	8002680 <HAL_RCC_OscConfig+0x74>
 8002672:	4b76      	ldr	r3, [pc, #472]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a75      	ldr	r2, [pc, #468]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e01d      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x98>
 800268a:	4b70      	ldr	r3, [pc, #448]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6f      	ldr	r2, [pc, #444]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6d      	ldr	r3, [pc, #436]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6c      	ldr	r2, [pc, #432]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 80026a4:	4b69      	ldr	r3, [pc, #420]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a68      	ldr	r2, [pc, #416]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b66      	ldr	r3, [pc, #408]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a65      	ldr	r2, [pc, #404]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fa70 	bl	8000ba8 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe fa6c 	bl	8000ba8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	@ 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e207      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b5b      	ldr	r3, [pc, #364]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0xc0>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fa5c 	bl	8000ba8 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe fa58 	bl	8000ba8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	@ 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1f3      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	4b51      	ldr	r3, [pc, #324]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0xe8>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d063      	beq.n	80027ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002722:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b47      	ldr	r3, [pc, #284]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b44      	ldr	r3, [pc, #272]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	4b41      	ldr	r3, [pc, #260]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e1c7      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b3b      	ldr	r3, [pc, #236]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4937      	ldr	r1, [pc, #220]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	e03a      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277c:	4b34      	ldr	r3, [pc, #208]	@ (8002850 <HAL_RCC_OscConfig+0x244>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7fe fa11 	bl	8000ba8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278a:	f7fe fa0d 	bl	8000ba8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1a8      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	4b2b      	ldr	r3, [pc, #172]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4925      	ldr	r1, [pc, #148]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <HAL_RCC_OscConfig+0x244>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe f9f0 	bl	8000ba8 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe f9ec 	bl	8000ba8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e187      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d036      	beq.n	8002864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_RCC_OscConfig+0x248>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe f9d0 	bl	8000ba8 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe f9cc 	bl	8000ba8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e167      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCC_OscConfig+0x240>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x200>
 800282a:	e01b      	b.n	8002864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <HAL_RCC_OscConfig+0x248>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe f9b9 	bl	8000ba8 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	e00e      	b.n	8002858 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe f9b5 	bl	8000ba8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d907      	bls.n	8002858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e150      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
 800284c:	40023800 	.word	0x40023800
 8002850:	42470000 	.word	0x42470000
 8002854:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b88      	ldr	r3, [pc, #544]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ea      	bne.n	800283a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8097 	beq.w	80029a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b81      	ldr	r3, [pc, #516]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b7d      	ldr	r3, [pc, #500]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	@ 0x40
 8002892:	4b7a      	ldr	r3, [pc, #488]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b77      	ldr	r3, [pc, #476]	@ (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d118      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ae:	4b74      	ldr	r3, [pc, #464]	@ (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a73      	ldr	r2, [pc, #460]	@ (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ba:	f7fe f975 	bl	8000ba8 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7fe f971 	bl	8000ba8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e10c      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x2ea>
 80028e8:	4b64      	ldr	r3, [pc, #400]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ec:	4a63      	ldr	r2, [pc, #396]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f4:	e01c      	b.n	8002930 <HAL_RCC_OscConfig+0x324>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x30c>
 80028fe:	4b5f      	ldr	r3, [pc, #380]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	4a5e      	ldr	r2, [pc, #376]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	@ 0x70
 800290a:	4b5c      	ldr	r3, [pc, #368]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290e:	4a5b      	ldr	r2, [pc, #364]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6713      	str	r3, [r2, #112]	@ 0x70
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0x324>
 8002918:	4b58      	ldr	r3, [pc, #352]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291c:	4a57      	ldr	r2, [pc, #348]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	@ 0x70
 8002924:	4b55      	ldr	r3, [pc, #340]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	4a54      	ldr	r2, [pc, #336]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 0304 	bic.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe f936 	bl	8000ba8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe f932 	bl	8000ba8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0cb      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	4b49      	ldr	r3, [pc, #292]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ee      	beq.n	8002940 <HAL_RCC_OscConfig+0x334>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe f920 	bl	8000ba8 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe f91c 	bl	8000ba8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0b5      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002982:	4b3e      	ldr	r3, [pc, #248]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ee      	bne.n	800296c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b39      	ldr	r3, [pc, #228]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	4a38      	ldr	r2, [pc, #224]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a1 	beq.w	8002aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029aa:	4b34      	ldr	r3, [pc, #208]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d05c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d141      	bne.n	8002a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b31      	ldr	r3, [pc, #196]	@ (8002a84 <HAL_RCC_OscConfig+0x478>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe f8f0 	bl	8000ba8 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe f8ec 	bl	8000ba8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e087      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	491b      	ldr	r1, [pc, #108]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a14:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <HAL_RCC_OscConfig+0x478>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f8c5 	bl	8000ba8 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe f8c1 	bl	8000ba8 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e05c      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x416>
 8002a40:	e054      	b.n	8002aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <HAL_RCC_OscConfig+0x478>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe f8ae 	bl	8000ba8 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe f8aa 	bl	8000ba8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e045      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x444>
 8002a6e:	e03d      	b.n	8002aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e038      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000
 8002a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <HAL_RCC_OscConfig+0x4ec>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d028      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d121      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d111      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800

08002afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0cc      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b68      	ldr	r3, [pc, #416]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d90c      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b65      	ldr	r3, [pc, #404]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b63      	ldr	r3, [pc, #396]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b8      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b50:	4b59      	ldr	r3, [pc, #356]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a58      	ldr	r2, [pc, #352]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b68:	4b53      	ldr	r3, [pc, #332]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b50      	ldr	r3, [pc, #320]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	494d      	ldr	r1, [pc, #308]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d044      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d119      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e07f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bca:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e067      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bda:	4b37      	ldr	r3, [pc, #220]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4934      	ldr	r1, [pc, #208]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fd ffdc 	bl	8000ba8 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf4:	f7fd ffd8 	bl	8000ba8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e04f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 020c 	and.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1eb      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d20c      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b22      	ldr	r3, [pc, #136]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b20      	ldr	r3, [pc, #128]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e032      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4916      	ldr	r1, [pc, #88]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6e:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	490e      	ldr	r1, [pc, #56]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c82:	f000 f821 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	490a      	ldr	r1, [pc, #40]	@ (8002cbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	5ccb      	ldrb	r3, [r1, r3]
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a09      	ldr	r2, [pc, #36]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd ff3c 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08008468 	.word	0x08008468
 8002cc0:	20000010 	.word	0x20000010
 8002cc4:	20000014 	.word	0x20000014

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b090      	sub	sp, #64	@ 0x40
 8002cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce0:	4b59      	ldr	r3, [pc, #356]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d00d      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x40>
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	f200 80a1 	bhi.w	8002e34 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x34>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfa:	e09b      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b53      	ldr	r3, [pc, #332]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8002cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d00:	e09b      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d06:	e098      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b4f      	ldr	r3, [pc, #316]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b4d      	ldr	r3, [pc, #308]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d028      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	2200      	movs	r2, #0
 8002d26:	623b      	str	r3, [r7, #32]
 8002d28:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d30:	2100      	movs	r1, #0
 8002d32:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d34:	fb03 f201 	mul.w	r2, r3, r1
 8002d38:	2300      	movs	r3, #0
 8002d3a:	fb00 f303 	mul.w	r3, r0, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a43      	ldr	r2, [pc, #268]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d42:	fba0 1202 	umull	r1, r2, r0, r2
 8002d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d48:	460a      	mov	r2, r1
 8002d4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d4e:	4413      	add	r3, r2
 8002d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d54:	2200      	movs	r2, #0
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	61fa      	str	r2, [r7, #28]
 8002d5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d62:	f7fd fa9d 	bl	80002a0 <__aeabi_uldivmod>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d6e:	e053      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d70:	4b35      	ldr	r3, [pc, #212]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	2200      	movs	r2, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	617a      	str	r2, [r7, #20]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d82:	f04f 0b00 	mov.w	fp, #0
 8002d86:	4652      	mov	r2, sl
 8002d88:	465b      	mov	r3, fp
 8002d8a:	f04f 0000 	mov.w	r0, #0
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	0159      	lsls	r1, r3, #5
 8002d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d98:	0150      	lsls	r0, r2, #5
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	ebb2 080a 	subs.w	r8, r2, sl
 8002da2:	eb63 090b 	sbc.w	r9, r3, fp
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002db2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002db6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dba:	ebb2 0408 	subs.w	r4, r2, r8
 8002dbe:	eb63 0509 	sbc.w	r5, r3, r9
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	00eb      	lsls	r3, r5, #3
 8002dcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dd0:	00e2      	lsls	r2, r4, #3
 8002dd2:	4614      	mov	r4, r2
 8002dd4:	461d      	mov	r5, r3
 8002dd6:	eb14 030a 	adds.w	r3, r4, sl
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	eb45 030b 	adc.w	r3, r5, fp
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dee:	4629      	mov	r1, r5
 8002df0:	028b      	lsls	r3, r1, #10
 8002df2:	4621      	mov	r1, r4
 8002df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002df8:	4621      	mov	r1, r4
 8002dfa:	028a      	lsls	r2, r1, #10
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e02:	2200      	movs	r2, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	60fa      	str	r2, [r7, #12]
 8002e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e0c:	f7fd fa48 	bl	80002a0 <__aeabi_uldivmod>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4613      	mov	r3, r2
 8002e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e18:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	0c1b      	lsrs	r3, r3, #16
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	3301      	adds	r3, #1
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e32:	e002      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e34:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3740      	adds	r7, #64	@ 0x40
 8002e40:	46bd      	mov	sp, r7
 8002e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	00f42400 	.word	0x00f42400
 8002e50:	017d7840 	.word	0x017d7840

08002e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e58:	4b03      	ldr	r3, [pc, #12]	@ (8002e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000010 	.word	0x20000010

08002e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	f107 001c 	add.w	r0, r7, #28
 8002e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e7e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d123      	bne.n	8002ece <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002eae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d105      	bne.n	8002ec2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f001 fae8 	bl	8004498 <USB_CoreReset>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	e01b      	b.n	8002f06 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f001 fadc 	bl	8004498 <USB_CoreReset>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ee4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ef8:	e005      	b.n	8002f06 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f06:	7fbb      	ldrb	r3, [r7, #30]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10b      	bne.n	8002f24 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f043 0206 	orr.w	r2, r3, #6
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f30:	b004      	add	sp, #16
 8002f32:	4770      	bx	lr

08002f34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d165      	bne.n	8003014 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4a41      	ldr	r2, [pc, #260]	@ (8003050 <USB_SetTurnaroundTime+0x11c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d906      	bls.n	8002f5e <USB_SetTurnaroundTime+0x2a>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4a40      	ldr	r2, [pc, #256]	@ (8003054 <USB_SetTurnaroundTime+0x120>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d202      	bcs.n	8002f5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f58:	230f      	movs	r3, #15
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e062      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4a3c      	ldr	r2, [pc, #240]	@ (8003054 <USB_SetTurnaroundTime+0x120>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d306      	bcc.n	8002f74 <USB_SetTurnaroundTime+0x40>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4a3b      	ldr	r2, [pc, #236]	@ (8003058 <USB_SetTurnaroundTime+0x124>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d202      	bcs.n	8002f74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f6e:	230e      	movs	r3, #14
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e057      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4a38      	ldr	r2, [pc, #224]	@ (8003058 <USB_SetTurnaroundTime+0x124>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d306      	bcc.n	8002f8a <USB_SetTurnaroundTime+0x56>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4a37      	ldr	r2, [pc, #220]	@ (800305c <USB_SetTurnaroundTime+0x128>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d202      	bcs.n	8002f8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f84:	230d      	movs	r3, #13
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e04c      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4a33      	ldr	r2, [pc, #204]	@ (800305c <USB_SetTurnaroundTime+0x128>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d306      	bcc.n	8002fa0 <USB_SetTurnaroundTime+0x6c>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4a32      	ldr	r2, [pc, #200]	@ (8003060 <USB_SetTurnaroundTime+0x12c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d802      	bhi.n	8002fa0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e041      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8003060 <USB_SetTurnaroundTime+0x12c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d906      	bls.n	8002fb6 <USB_SetTurnaroundTime+0x82>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4a2e      	ldr	r2, [pc, #184]	@ (8003064 <USB_SetTurnaroundTime+0x130>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d802      	bhi.n	8002fb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002fb0:	230b      	movs	r3, #11
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e036      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003064 <USB_SetTurnaroundTime+0x130>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d906      	bls.n	8002fcc <USB_SetTurnaroundTime+0x98>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4a29      	ldr	r2, [pc, #164]	@ (8003068 <USB_SetTurnaroundTime+0x134>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d802      	bhi.n	8002fcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002fc6:	230a      	movs	r3, #10
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e02b      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4a26      	ldr	r2, [pc, #152]	@ (8003068 <USB_SetTurnaroundTime+0x134>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d906      	bls.n	8002fe2 <USB_SetTurnaroundTime+0xae>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4a25      	ldr	r2, [pc, #148]	@ (800306c <USB_SetTurnaroundTime+0x138>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d202      	bcs.n	8002fe2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002fdc:	2309      	movs	r3, #9
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e020      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4a21      	ldr	r2, [pc, #132]	@ (800306c <USB_SetTurnaroundTime+0x138>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d306      	bcc.n	8002ff8 <USB_SetTurnaroundTime+0xc4>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4a20      	ldr	r2, [pc, #128]	@ (8003070 <USB_SetTurnaroundTime+0x13c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d802      	bhi.n	8002ff8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e015      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8003070 <USB_SetTurnaroundTime+0x13c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d906      	bls.n	800300e <USB_SetTurnaroundTime+0xda>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4a1c      	ldr	r2, [pc, #112]	@ (8003074 <USB_SetTurnaroundTime+0x140>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d202      	bcs.n	800300e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003008:	2307      	movs	r3, #7
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e00a      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800300e:	2306      	movs	r3, #6
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e007      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800301a:	2309      	movs	r3, #9
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e001      	b.n	8003024 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003020:	2309      	movs	r3, #9
 8003022:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	029b      	lsls	r3, r3, #10
 8003038:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800303c:	431a      	orrs	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	00d8acbf 	.word	0x00d8acbf
 8003054:	00e4e1c0 	.word	0x00e4e1c0
 8003058:	00f42400 	.word	0x00f42400
 800305c:	01067380 	.word	0x01067380
 8003060:	011a499f 	.word	0x011a499f
 8003064:	01312cff 	.word	0x01312cff
 8003068:	014ca43f 	.word	0x014ca43f
 800306c:	016e3600 	.word	0x016e3600
 8003070:	01a6ab1f 	.word	0x01a6ab1f
 8003074:	01e84800 	.word	0x01e84800

08003078 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d115      	bne.n	800310a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80030ea:	200a      	movs	r0, #10
 80030ec:	f7fd fd68 	bl	8000bc0 <HAL_Delay>
      ms += 10U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	330a      	adds	r3, #10
 80030f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f001 f93f 	bl	800437a <USB_GetMode>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d01e      	beq.n	8003140 <USB_SetCurrentMode+0x84>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2bc7      	cmp	r3, #199	@ 0xc7
 8003106:	d9f0      	bls.n	80030ea <USB_SetCurrentMode+0x2e>
 8003108:	e01a      	b.n	8003140 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d115      	bne.n	800313c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800311c:	200a      	movs	r0, #10
 800311e:	f7fd fd4f 	bl	8000bc0 <HAL_Delay>
      ms += 10U;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	330a      	adds	r3, #10
 8003126:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f001 f926 	bl	800437a <USB_GetMode>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <USB_SetCurrentMode+0x84>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2bc7      	cmp	r3, #199	@ 0xc7
 8003138:	d9f0      	bls.n	800311c <USB_SetCurrentMode+0x60>
 800313a:	e001      	b.n	8003140 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e005      	b.n	800314c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2bc8      	cmp	r3, #200	@ 0xc8
 8003144:	d101      	bne.n	800314a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003154:	b084      	sub	sp, #16
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	e009      	b.n	8003188 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	3340      	adds	r3, #64	@ 0x40
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	2200      	movs	r2, #0
 8003180:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	3301      	adds	r3, #1
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	2b0e      	cmp	r3, #14
 800318c:	d9f2      	bls.n	8003174 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800318e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11c      	bne.n	80031d0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80031ce:	e00b      	b.n	80031e8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80031ee:	461a      	mov	r2, r3
 80031f0:	2300      	movs	r3, #0
 80031f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d10d      	bne.n	8003218 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80031fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003204:	2100      	movs	r1, #0
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f968 	bl	80034dc <USB_SetDevSpeed>
 800320c:	e008      	b.n	8003220 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800320e:	2101      	movs	r1, #1
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f963 	bl	80034dc <USB_SetDevSpeed>
 8003216:	e003      	b.n	8003220 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003218:	2103      	movs	r1, #3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f95e 	bl	80034dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003220:	2110      	movs	r1, #16
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f8fa 	bl	800341c <USB_FlushTxFifo>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f924 	bl	8003480 <USB_FlushRxFifo>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003248:	461a      	mov	r2, r3
 800324a:	2300      	movs	r3, #0
 800324c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003254:	461a      	mov	r2, r3
 8003256:	2300      	movs	r3, #0
 8003258:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003260:	461a      	mov	r2, r3
 8003262:	2300      	movs	r3, #0
 8003264:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	e043      	b.n	80032f4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800327e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003282:	d118      	bne.n	80032b6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003296:	461a      	mov	r2, r3
 8003298:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e013      	b.n	80032c8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ac:	461a      	mov	r2, r3
 80032ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e008      	b.n	80032c8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032c2:	461a      	mov	r2, r3
 80032c4:	2300      	movs	r3, #0
 80032c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032d4:	461a      	mov	r2, r3
 80032d6:	2300      	movs	r3, #0
 80032d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032e6:	461a      	mov	r2, r3
 80032e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	3301      	adds	r3, #1
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80032f8:	461a      	mov	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d3b5      	bcc.n	800326c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e043      	b.n	800338e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003318:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800331c:	d118      	bne.n	8003350 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003330:	461a      	mov	r2, r3
 8003332:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	e013      	b.n	8003362 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003346:	461a      	mov	r2, r3
 8003348:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e008      	b.n	8003362 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800335c:	461a      	mov	r2, r3
 800335e:	2300      	movs	r3, #0
 8003360:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336e:	461a      	mov	r2, r3
 8003370:	2300      	movs	r3, #0
 8003372:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003380:	461a      	mov	r2, r3
 8003382:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003386:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	3301      	adds	r3, #1
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003392:	461a      	mov	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4293      	cmp	r3, r2
 8003398:	d3b5      	bcc.n	8003306 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80033ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <USB_DevInit+0x2c4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f043 0208 	orr.w	r2, r3, #8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d107      	bne.n	8003408 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003400:	f043 0304 	orr.w	r3, r3, #4
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003408:	7dfb      	ldrb	r3, [r7, #23]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003414:	b004      	add	sp, #16
 8003416:	4770      	bx	lr
 8003418:	803c3800 	.word	0x803c3800

0800341c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3301      	adds	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003436:	d901      	bls.n	800343c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e01b      	b.n	8003474 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	daf2      	bge.n	800342a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	019b      	lsls	r3, r3, #6
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3301      	adds	r3, #1
 8003458:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003460:	d901      	bls.n	8003466 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e006      	b.n	8003474 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b20      	cmp	r3, #32
 8003470:	d0f0      	beq.n	8003454 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003498:	d901      	bls.n	800349e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e018      	b.n	80034d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	daf2      	bge.n	800348c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2210      	movs	r2, #16
 80034ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3301      	adds	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034bc:	d901      	bls.n	80034c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e006      	b.n	80034d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d0f0      	beq.n	80034b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800350e:	b480      	push	{r7}
 8003510:	b087      	sub	sp, #28
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0306 	and.w	r3, r3, #6
 8003526:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800352e:	2300      	movs	r3, #0
 8003530:	75fb      	strb	r3, [r7, #23]
 8003532:	e00a      	b.n	800354a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d002      	beq.n	8003540 <USB_GetDevSpeed+0x32>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b06      	cmp	r3, #6
 800353e:	d102      	bne.n	8003546 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003540:	2302      	movs	r3, #2
 8003542:	75fb      	strb	r3, [r7, #23]
 8003544:	e001      	b.n	800354a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003546:	230f      	movs	r3, #15
 8003548:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800354a:	7dfb      	ldrb	r3, [r7, #23]
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d13a      	bne.n	80035ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	2101      	movs	r1, #1
 8003586:	fa01 f303 	lsl.w	r3, r1, r3
 800358a:	b29b      	uxth	r3, r3
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003592:	4313      	orrs	r3, r2
 8003594:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d155      	bne.n	8003658 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	791b      	ldrb	r3, [r3, #4]
 80035c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	059b      	lsls	r3, r3, #22
 80035ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035d0:	4313      	orrs	r3, r2
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	0151      	lsls	r1, r2, #5
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	440a      	add	r2, r1
 80035da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	e036      	b.n	8003658 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	2101      	movs	r1, #1
 80035fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003608:	4313      	orrs	r3, r2
 800360a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11a      	bne.n	8003658 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	791b      	ldrb	r3, [r3, #4]
 800363c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800363e:	430b      	orrs	r3, r1
 8003640:	4313      	orrs	r3, r2
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	440a      	add	r2, r1
 800364a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800364e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003656:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d161      	bne.n	8003748 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800369a:	d11f      	bne.n	80036dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	0151      	lsls	r1, r2, #5
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	440a      	add	r2, r1
 80036b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	0151      	lsls	r1, r2, #5
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	440a      	add	r2, r1
 80036d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036fc:	4013      	ands	r3, r2
 80036fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	b29b      	uxth	r3, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003720:	4013      	ands	r3, r2
 8003722:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	0159      	lsls	r1, r3, #5
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	440b      	add	r3, r1
 800373a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800373e:	4619      	mov	r1, r3
 8003740:	4b35      	ldr	r3, [pc, #212]	@ (8003818 <USB_DeactivateEndpoint+0x1b0>)
 8003742:	4013      	ands	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
 8003746:	e060      	b.n	800380a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800375a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800375e:	d11f      	bne.n	80037a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	440a      	add	r2, r1
 8003776:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800377a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800377e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	0151      	lsls	r1, r2, #5
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	440a      	add	r2, r1
 8003796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800379a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800379e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	2101      	movs	r1, #1
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	43db      	mvns	r3, r3
 80037ba:	68f9      	ldr	r1, [r7, #12]
 80037bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037c0:	4013      	ands	r3, r2
 80037c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	43db      	mvns	r3, r3
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037e4:	4013      	ands	r3, r2
 80037e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	0159      	lsls	r1, r3, #5
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003802:	4619      	mov	r1, r3
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <USB_DeactivateEndpoint+0x1b4>)
 8003806:	4013      	ands	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	ec337800 	.word	0xec337800
 800381c:	eff37800 	.word	0xeff37800

08003820 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	@ 0x28
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 817f 	bne.w	8003b40 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d132      	bne.n	80038b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003864:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003868:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800386c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	0151      	lsls	r1, r2, #5
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	440a      	add	r2, r1
 8003884:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003888:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800388c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	0151      	lsls	r1, r2, #5
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	440a      	add	r2, r1
 80038a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038a8:	0cdb      	lsrs	r3, r3, #19
 80038aa:	04db      	lsls	r3, r3, #19
 80038ac:	6113      	str	r3, [r2, #16]
 80038ae:	e097      	b.n	80039e0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	0151      	lsls	r1, r2, #5
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	440a      	add	r2, r1
 80038c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038ca:	0cdb      	lsrs	r3, r3, #19
 80038cc:	04db      	lsls	r3, r3, #19
 80038ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	0151      	lsls	r1, r2, #5
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	440a      	add	r2, r1
 80038e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80038ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80038f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11a      	bne.n	8003930 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	d903      	bls.n	800390e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	0151      	lsls	r1, r2, #5
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	440a      	add	r2, r1
 8003924:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003928:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800392c:	6113      	str	r3, [r2, #16]
 800392e:	e044      	b.n	80039ba <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4413      	add	r3, r2
 800393a:	1e5a      	subs	r2, r3, #1
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	8afb      	ldrh	r3, [r7, #22]
 8003956:	04d9      	lsls	r1, r3, #19
 8003958:	4ba4      	ldr	r3, [pc, #656]	@ (8003bec <USB_EPStartXfer+0x3cc>)
 800395a:	400b      	ands	r3, r1
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	0148      	lsls	r0, r1, #5
 8003960:	69f9      	ldr	r1, [r7, #28]
 8003962:	4401      	add	r1, r0
 8003964:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003968:	4313      	orrs	r3, r2
 800396a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	791b      	ldrb	r3, [r3, #4]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d122      	bne.n	80039ba <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	440a      	add	r2, r1
 800398a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800398e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003992:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	8afb      	ldrh	r3, [r7, #22]
 80039a4:	075b      	lsls	r3, r3, #29
 80039a6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80039aa:	69b9      	ldr	r1, [r7, #24]
 80039ac:	0148      	lsls	r0, r1, #5
 80039ae:	69f9      	ldr	r1, [r7, #28]
 80039b0:	4401      	add	r1, r0
 80039b2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80039b6:	4313      	orrs	r3, r2
 80039b8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d0:	69b9      	ldr	r1, [r7, #24]
 80039d2:	0148      	lsls	r0, r1, #5
 80039d4:	69f9      	ldr	r1, [r7, #28]
 80039d6:	4401      	add	r1, r0
 80039d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80039dc:	4313      	orrs	r3, r2
 80039de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d14b      	bne.n	8003a7e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	791b      	ldrb	r3, [r3, #4]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d128      	bne.n	8003a5c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d110      	bne.n	8003a3c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	0151      	lsls	r1, r2, #5
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	440a      	add	r2, r1
 8003a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e00f      	b.n	8003a5c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a76:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e166      	b.n	8003d4c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	0151      	lsls	r1, r2, #5
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	440a      	add	r2, r1
 8003a94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a98:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003a9c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	791b      	ldrb	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d015      	beq.n	8003ad2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 814e 	beq.w	8003d4c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003acc:	4313      	orrs	r3, r2
 8003ace:	634b      	str	r3, [r1, #52]	@ 0x34
 8003ad0:	e13c      	b.n	8003d4c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d110      	bne.n	8003b04 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	0151      	lsls	r1, r2, #5
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	440a      	add	r2, r1
 8003af8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003afc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e00f      	b.n	8003b24 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	0151      	lsls	r1, r2, #5
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	440a      	add	r2, r1
 8003b1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	68d9      	ldr	r1, [r3, #12]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	781a      	ldrb	r2, [r3, #0]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	b298      	uxth	r0, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	4603      	mov	r3, r0
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f9b9 	bl	8003eb0 <USB_WritePacket>
 8003b3e:	e105      	b.n	8003d4c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	0151      	lsls	r1, r2, #5
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	440a      	add	r2, r1
 8003b56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b5a:	0cdb      	lsrs	r3, r3, #19
 8003b5c:	04db      	lsls	r3, r3, #19
 8003b5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b7a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003b7e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003b82:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d132      	bne.n	8003bf0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb8:	69b9      	ldr	r1, [r7, #24]
 8003bba:	0148      	lsls	r0, r1, #5
 8003bbc:	69f9      	ldr	r1, [r7, #28]
 8003bbe:	4401      	add	r1, r0
 8003bc0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003be2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003be6:	6113      	str	r3, [r2, #16]
 8003be8:	e062      	b.n	8003cb0 <USB_EPStartXfer+0x490>
 8003bea:	bf00      	nop
 8003bec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d123      	bne.n	8003c40 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	0148      	lsls	r0, r1, #5
 8003c12:	69f9      	ldr	r1, [r7, #28]
 8003c14:	4401      	add	r1, r0
 8003c16:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c3c:	6113      	str	r3, [r2, #16]
 8003c3e:	e037      	b.n	8003cb0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4413      	add	r3, r2
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	8afa      	ldrh	r2, [r7, #22]
 8003c5c:	fb03 f202 	mul.w	r2, r3, r2
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	8afb      	ldrh	r3, [r7, #22]
 8003c74:	04d9      	lsls	r1, r3, #19
 8003c76:	4b38      	ldr	r3, [pc, #224]	@ (8003d58 <USB_EPStartXfer+0x538>)
 8003c78:	400b      	ands	r3, r1
 8003c7a:	69b9      	ldr	r1, [r7, #24]
 8003c7c:	0148      	lsls	r0, r1, #5
 8003c7e:	69f9      	ldr	r1, [r7, #28]
 8003c80:	4401      	add	r1, r0
 8003c82:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003c86:	4313      	orrs	r3, r2
 8003c88:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca0:	69b9      	ldr	r1, [r7, #24]
 8003ca2:	0148      	lsls	r0, r1, #5
 8003ca4:	69f9      	ldr	r1, [r7, #28]
 8003ca6:	4401      	add	r1, r0
 8003ca8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003cac:	4313      	orrs	r3, r2
 8003cae:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10d      	bne.n	8003cd2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	68d9      	ldr	r1, [r3, #12]
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cce:	460a      	mov	r2, r1
 8003cd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	791b      	ldrb	r3, [r3, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d128      	bne.n	8003d2c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d110      	bne.n	8003d0c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	0151      	lsls	r1, r2, #5
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	440a      	add	r2, r1
 8003d00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e00f      	b.n	8003d2c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	0151      	lsls	r1, r2, #5
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	440a      	add	r2, r1
 8003d22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d46:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003d4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	1ff80000 	.word	0x1ff80000

08003d5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d14a      	bne.n	8003e10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d92:	f040 8086 	bne.w	8003ea2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	0151      	lsls	r1, r2, #5
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	440a      	add	r2, r1
 8003db0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003db4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003db8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	7812      	ldrb	r2, [r2, #0]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ddc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3301      	adds	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d902      	bls.n	8003df4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
          break;
 8003df2:	e056      	b.n	8003ea2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e0c:	d0e7      	beq.n	8003dde <USB_EPStopXfer+0x82>
 8003e0e:	e048      	b.n	8003ea2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e28:	d13b      	bne.n	8003ea2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d902      	bls.n	8003e88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
          break;
 8003e86:	e00c      	b.n	8003ea2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ea0:	d0e7      	beq.n	8003e72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b089      	sub	sp, #36	@ 0x24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	4611      	mov	r1, r2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	71fb      	strb	r3, [r7, #7]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ece:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d123      	bne.n	8003f1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ed6:	88bb      	ldrh	r3, [r7, #4]
 8003ed8:	3303      	adds	r3, #3
 8003eda:	089b      	lsrs	r3, r3, #2
 8003edc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	e018      	b.n	8003f16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	031a      	lsls	r2, r3, #12
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3301      	adds	r3, #1
 8003f02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	3301      	adds	r3, #1
 8003f08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	3301      	adds	r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d3e2      	bcc.n	8003ee4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3724      	adds	r7, #36	@ 0x24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b08b      	sub	sp, #44	@ 0x2c
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	e014      	b.n	8003f82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	3301      	adds	r3, #1
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	3301      	adds	r3, #1
 8003f74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	3301      	adds	r3, #1
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	623b      	str	r3, [r7, #32]
 8003f82:	6a3a      	ldr	r2, [r7, #32]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3e6      	bcc.n	8003f58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f8a:	8bfb      	ldrh	r3, [r7, #30]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01e      	beq.n	8003fce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f107 0310 	add.w	r3, r7, #16
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	701a      	strb	r2, [r3, #0]
      i++;
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003fc2:	8bfb      	ldrh	r3, [r7, #30]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fc8:	8bfb      	ldrh	r3, [r7, #30]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1ea      	bne.n	8003fa4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	372c      	adds	r7, #44	@ 0x2c
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d12c      	bne.n	8004052 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	db12      	blt.n	8004030 <USB_EPSetStall+0x54>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00f      	beq.n	8004030 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	440a      	add	r2, r1
 8004026:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800402a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800402e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800404a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e02b      	b.n	80040aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	db12      	blt.n	800408a <USB_EPSetStall+0xae>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00f      	beq.n	800408a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	440a      	add	r2, r1
 8004080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004084:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004088:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	0151      	lsls	r1, r2, #5
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	440a      	add	r2, r1
 80040a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d128      	bne.n	8004126 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	0151      	lsls	r1, r2, #5
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	440a      	add	r2, r1
 80040ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	791b      	ldrb	r3, [r3, #4]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d003      	beq.n	8004104 <USB_EPClearStall+0x4c>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	791b      	ldrb	r3, [r3, #4]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d138      	bne.n	8004176 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	440a      	add	r2, r1
 800411a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800411e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	e027      	b.n	8004176 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	440a      	add	r2, r1
 800413c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004140:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004144:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	791b      	ldrb	r3, [r3, #4]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d003      	beq.n	8004156 <USB_EPClearStall+0x9e>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	791b      	ldrb	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d10f      	bne.n	8004176 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	440a      	add	r2, r1
 800416c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004174:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80041a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80041b8:	68f9      	ldr	r1, [r7, #12]
 80041ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041fe:	f023 0302 	bic.w	r3, r3, #2
 8004202:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800422c:	f023 0303 	bic.w	r3, r3, #3
 8004230:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004240:	f043 0302 	orr.w	r3, r3, #2
 8004244:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4013      	ands	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	0c1b      	lsrs	r3, r3, #16
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	b29b      	uxth	r3, r3
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4013      	ands	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004310:	68bb      	ldr	r3, [r7, #8]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800431e:	b480      	push	{r7}
 8004320:	b087      	sub	sp, #28
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800433e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004340:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	fa22 f303 	lsr.w	r3, r2, r3
 800434e:	01db      	lsls	r3, r3, #7
 8004350:	b2db      	uxtb	r3, r3
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800436c:	68bb      	ldr	r3, [r7, #8]
}
 800436e:	4618      	mov	r0, r3
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0301 	and.w	r3, r3, #1
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80043b4:	f023 0307 	bic.w	r3, r3, #7
 80043b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	460b      	mov	r3, r1
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	333c      	adds	r3, #60	@ 0x3c
 80043f2:	3304      	adds	r3, #4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4a26      	ldr	r2, [pc, #152]	@ (8004494 <USB_EP0_OutStart+0xb8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d90a      	bls.n	8004416 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800440c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004410:	d101      	bne.n	8004416 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e037      	b.n	8004486 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441c:	461a      	mov	r2, r3
 800441e:	2300      	movs	r3, #0
 8004420:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004430:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004444:	f043 0318 	orr.w	r3, r3, #24
 8004448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004458:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800445c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800445e:	7afb      	ldrb	r3, [r7, #11]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d10f      	bne.n	8004484 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446a:	461a      	mov	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800447e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004482:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	4f54300a 	.word	0x4f54300a

08004498 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3301      	adds	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044b0:	d901      	bls.n	80044b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e01b      	b.n	80044ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	daf2      	bge.n	80044a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f043 0201 	orr.w	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3301      	adds	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044da:	d901      	bls.n	80044e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e006      	b.n	80044ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d0f0      	beq.n	80044ce <USB_CoreReset+0x36>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8004500:	f001 f936 	bl	8005770 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8004504:	2200      	movs	r2, #0
 8004506:	4912      	ldr	r1, [pc, #72]	@ (8004550 <MX_USB_DEVICE_Init+0x54>)
 8004508:	4812      	ldr	r0, [pc, #72]	@ (8004554 <MX_USB_DEVICE_Init+0x58>)
 800450a:	f001 fc3d 	bl	8005d88 <USBD_Init>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8004514:	f7fc f986 	bl	8000824 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004518:	490f      	ldr	r1, [pc, #60]	@ (8004558 <MX_USB_DEVICE_Init+0x5c>)
 800451a:	480e      	ldr	r0, [pc, #56]	@ (8004554 <MX_USB_DEVICE_Init+0x58>)
 800451c:	f001 fc60 	bl	8005de0 <USBD_RegisterClass>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8004526:	f7fc f97d 	bl	8000824 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 800452a:	490c      	ldr	r1, [pc, #48]	@ (800455c <MX_USB_DEVICE_Init+0x60>)
 800452c:	4809      	ldr	r0, [pc, #36]	@ (8004554 <MX_USB_DEVICE_Init+0x58>)
 800452e:	f000 fe11 	bl	8005154 <USBD_CDC_ACM_RegisterInterface>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8004538:	f7fc f974 	bl	8000824 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800453c:	4805      	ldr	r0, [pc, #20]	@ (8004554 <MX_USB_DEVICE_Init+0x58>)
 800453e:	f001 fc8d 	bl	8005e5c <USBD_Start>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8004548:	f7fc f96c 	bl	8000824 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800454c:	bf00      	nop
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000030 	.word	0x20000030
 8004554:	20000860 	.word	0x20000860
 8004558:	20000160 	.word	0x20000160
 800455c:	2000001c 	.word	0x2000001c

08004560 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	01db      	lsls	r3, r3, #7
 800456e:	4a06      	ldr	r2, [pc, #24]	@ (8004588 <CDC_Init+0x28>)
 8004570:	441a      	add	r2, r3
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	4905      	ldr	r1, [pc, #20]	@ (800458c <CDC_Init+0x2c>)
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fe26 	bl	80051c8 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 800457c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000b7c 	.word	0x20000b7c
 800458c:	20000860 	.word	0x20000860

08004590 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 800459a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	603a      	str	r2, [r7, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4603      	mov	r3, r0
 80045b4:	71fb      	strb	r3, [r7, #7]
 80045b6:	460b      	mov	r3, r1
 80045b8:	71bb      	strb	r3, [r7, #6]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80045be:	79bb      	ldrb	r3, [r7, #6]
 80045c0:	2b23      	cmp	r3, #35	@ 0x23
 80045c2:	f200 80b6 	bhi.w	8004732 <CDC_Control+0x18a>
 80045c6:	a201      	add	r2, pc, #4	@ (adr r2, 80045cc <CDC_Control+0x24>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	08004733 	.word	0x08004733
 80045d0:	08004733 	.word	0x08004733
 80045d4:	08004733 	.word	0x08004733
 80045d8:	08004733 	.word	0x08004733
 80045dc:	08004733 	.word	0x08004733
 80045e0:	08004733 	.word	0x08004733
 80045e4:	08004733 	.word	0x08004733
 80045e8:	08004733 	.word	0x08004733
 80045ec:	08004733 	.word	0x08004733
 80045f0:	08004733 	.word	0x08004733
 80045f4:	08004733 	.word	0x08004733
 80045f8:	08004733 	.word	0x08004733
 80045fc:	08004733 	.word	0x08004733
 8004600:	08004733 	.word	0x08004733
 8004604:	08004733 	.word	0x08004733
 8004608:	08004733 	.word	0x08004733
 800460c:	08004733 	.word	0x08004733
 8004610:	08004733 	.word	0x08004733
 8004614:	08004733 	.word	0x08004733
 8004618:	08004733 	.word	0x08004733
 800461c:	08004733 	.word	0x08004733
 8004620:	08004733 	.word	0x08004733
 8004624:	08004733 	.word	0x08004733
 8004628:	08004733 	.word	0x08004733
 800462c:	08004733 	.word	0x08004733
 8004630:	08004733 	.word	0x08004733
 8004634:	08004733 	.word	0x08004733
 8004638:	08004733 	.word	0x08004733
 800463c:	08004733 	.word	0x08004733
 8004640:	08004733 	.word	0x08004733
 8004644:	08004733 	.word	0x08004733
 8004648:	08004733 	.word	0x08004733
 800464c:	0800465d 	.word	0x0800465d
 8004650:	080046bd 	.word	0x080046bd
 8004654:	08004733 	.word	0x08004733
 8004658:	08004733 	.word	0x08004733
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	3302      	adds	r3, #2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004674:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	3303      	adds	r3, #3
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	4611      	mov	r1, r2
 8004684:	4a2f      	ldr	r2, [pc, #188]	@ (8004744 <CDC_Control+0x19c>)
 8004686:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	7911      	ldrb	r1, [r2, #4]
 8004690:	4a2c      	ldr	r2, [pc, #176]	@ (8004744 <CDC_Control+0x19c>)
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4413      	add	r3, r2
 8004696:	460a      	mov	r2, r1
 8004698:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	7951      	ldrb	r1, [r2, #5]
 80046a0:	4a28      	ldr	r2, [pc, #160]	@ (8004744 <CDC_Control+0x19c>)
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	460a      	mov	r2, r1
 80046a8:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	7991      	ldrb	r1, [r2, #6]
 80046b0:	4a24      	ldr	r2, [pc, #144]	@ (8004744 <CDC_Control+0x19c>)
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	460a      	mov	r2, r1
 80046b8:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 80046ba:	e03b      	b.n	8004734 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	4a21      	ldr	r2, [pc, #132]	@ (8004744 <CDC_Control+0x19c>)
 80046c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004744 <CDC_Control+0x19c>)
 80046ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046d2:	0a1a      	lsrs	r2, r3, #8
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	4a19      	ldr	r2, [pc, #100]	@ (8004744 <CDC_Control+0x19c>)
 80046e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046e4:	0c1a      	lsrs	r2, r3, #16
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	3302      	adds	r3, #2
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	4a14      	ldr	r2, [pc, #80]	@ (8004744 <CDC_Control+0x19c>)
 80046f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046f6:	0e1a      	lsrs	r2, r3, #24
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	3303      	adds	r3, #3
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	3204      	adds	r2, #4
 8004706:	490f      	ldr	r1, [pc, #60]	@ (8004744 <CDC_Control+0x19c>)
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	440b      	add	r3, r1
 800470c:	791b      	ldrb	r3, [r3, #4]
 800470e:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	3205      	adds	r2, #5
 8004716:	490b      	ldr	r1, [pc, #44]	@ (8004744 <CDC_Control+0x19c>)
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	440b      	add	r3, r1
 800471c:	795b      	ldrb	r3, [r3, #5]
 800471e:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	3206      	adds	r2, #6
 8004726:	4907      	ldr	r1, [pc, #28]	@ (8004744 <CDC_Control+0x19c>)
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	440b      	add	r3, r1
 800472c:	799b      	ldrb	r3, [r3, #6]
 800472e:	7013      	strb	r3, [r2, #0]
    break;
 8004730:	e000      	b.n	8004734 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004732:	bf00      	nop
  }

  return (USBD_OK);
 8004734:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20000bfc 	.word	0x20000bfc

08004748 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	b29a      	uxth	r2, r3
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f825 	bl	80047b0 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	4907      	ldr	r1, [pc, #28]	@ (8004788 <CDC_Receive+0x40>)
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fd2b 	bl	80051c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	4904      	ldr	r1, [pc, #16]	@ (8004788 <CDC_Receive+0x40>)
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fd86 	bl	8005288 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800477c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000860 	.word	0x20000860

0800478c <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
 8004796:	461a      	mov	r2, r3
 8004798:	4603      	mov	r3, r0
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	4613      	mov	r3, r2
 800479e:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	6039      	str	r1, [r7, #0]
 80047ba:	71fb      	strb	r3, [r7, #7]
 80047bc:	4613      	mov	r3, r2
 80047be:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	4a0e      	ldr	r2, [pc, #56]	@ (800480c <CDC_Transmit+0x5c>)
 80047d4:	4413      	add	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e00d      	b.n	8004802 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 80047e6:	88bb      	ldrh	r3, [r7, #4]
 80047e8:	79f8      	ldrb	r0, [r7, #7]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	4908      	ldr	r1, [pc, #32]	@ (8004810 <CDC_Transmit+0x60>)
 80047ee:	f000 fcc7 	bl	8005180 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	4906      	ldr	r1, [pc, #24]	@ (8004810 <CDC_Transmit+0x60>)
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fd04 	bl	8005204 <USBD_CDC_TransmitPacket>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000e1c 	.word	0x20000e1c
 8004810:	20000860 	.word	0x20000860

08004814 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2212      	movs	r2, #18
 8004824:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8004826:	4b03      	ldr	r3, [pc, #12]	@ (8004834 <USBD_DeviceDescriptor+0x20>)
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	2000004c 	.word	0x2000004c

08004838 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	6039      	str	r1, [r7, #0]
 8004842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2204      	movs	r2, #4
 8004848:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800484a:	4b03      	ldr	r3, [pc, #12]	@ (8004858 <USBD_LangIDStrDescriptor+0x20>)
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	20000060 	.word	0x20000060

0800485c <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	4907      	ldr	r1, [pc, #28]	@ (8004890 <USBD_ProductStrDescriptor+0x34>)
 8004872:	4808      	ldr	r0, [pc, #32]	@ (8004894 <USBD_ProductStrDescriptor+0x38>)
 8004874:	f002 fb31 	bl	8006eda <USBD_GetString>
 8004878:	e004      	b.n	8004884 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	4904      	ldr	r1, [pc, #16]	@ (8004890 <USBD_ProductStrDescriptor+0x34>)
 800487e:	4805      	ldr	r0, [pc, #20]	@ (8004894 <USBD_ProductStrDescriptor+0x38>)
 8004880:	f002 fb2b 	bl	8006eda <USBD_GetString>
  }
  return USBD_StrDesc;
 8004884:	4b02      	ldr	r3, [pc, #8]	@ (8004890 <USBD_ProductStrDescriptor+0x34>)
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000c04 	.word	0x20000c04
 8004894:	080083f4 	.word	0x080083f4

08004898 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	6039      	str	r1, [r7, #0]
 80048a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	4904      	ldr	r1, [pc, #16]	@ (80048b8 <USBD_ManufacturerStrDescriptor+0x20>)
 80048a8:	4804      	ldr	r0, [pc, #16]	@ (80048bc <USBD_ManufacturerStrDescriptor+0x24>)
 80048aa:	f002 fb16 	bl	8006eda <USBD_GetString>
  return USBD_StrDesc;
 80048ae:	4b02      	ldr	r3, [pc, #8]	@ (80048b8 <USBD_ManufacturerStrDescriptor+0x20>)
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000c04 	.word	0x20000c04
 80048bc:	0800840c 	.word	0x0800840c

080048c0 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	6039      	str	r1, [r7, #0]
 80048ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	221a      	movs	r2, #26
 80048d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80048d2:	f000 f843 	bl	800495c <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80048d6:	4b02      	ldr	r3, [pc, #8]	@ (80048e0 <USBD_SerialStrDescriptor+0x20>)
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000064 	.word	0x20000064

080048e4 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	6039      	str	r1, [r7, #0]
 80048ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d105      	bne.n	8004902 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	4907      	ldr	r1, [pc, #28]	@ (8004918 <USBD_ConfigStrDescriptor+0x34>)
 80048fa:	4808      	ldr	r0, [pc, #32]	@ (800491c <USBD_ConfigStrDescriptor+0x38>)
 80048fc:	f002 faed 	bl	8006eda <USBD_GetString>
 8004900:	e004      	b.n	800490c <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	4904      	ldr	r1, [pc, #16]	@ (8004918 <USBD_ConfigStrDescriptor+0x34>)
 8004906:	4805      	ldr	r0, [pc, #20]	@ (800491c <USBD_ConfigStrDescriptor+0x38>)
 8004908:	f002 fae7 	bl	8006eda <USBD_GetString>
  }
  return USBD_StrDesc;
 800490c:	4b02      	ldr	r3, [pc, #8]	@ (8004918 <USBD_ConfigStrDescriptor+0x34>)
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000c04 	.word	0x20000c04
 800491c:	08008420 	.word	0x08008420

08004920 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	6039      	str	r1, [r7, #0]
 800492a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d105      	bne.n	800493e <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	4907      	ldr	r1, [pc, #28]	@ (8004954 <USBD_InterfaceStrDescriptor+0x34>)
 8004936:	4808      	ldr	r0, [pc, #32]	@ (8004958 <USBD_InterfaceStrDescriptor+0x38>)
 8004938:	f002 facf 	bl	8006eda <USBD_GetString>
 800493c:	e004      	b.n	8004948 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	4904      	ldr	r1, [pc, #16]	@ (8004954 <USBD_InterfaceStrDescriptor+0x34>)
 8004942:	4805      	ldr	r0, [pc, #20]	@ (8004958 <USBD_InterfaceStrDescriptor+0x38>)
 8004944:	f002 fac9 	bl	8006eda <USBD_GetString>
  }
  return USBD_StrDesc;
 8004948:	4b02      	ldr	r3, [pc, #8]	@ (8004954 <USBD_InterfaceStrDescriptor+0x34>)
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000c04 	.word	0x20000c04
 8004958:	08008430 	.word	0x08008430

0800495c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004962:	4b0f      	ldr	r3, [pc, #60]	@ (80049a0 <Get_SerialNum+0x44>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004968:	4b0e      	ldr	r3, [pc, #56]	@ (80049a4 <Get_SerialNum+0x48>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800496e:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <Get_SerialNum+0x4c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004982:	2208      	movs	r2, #8
 8004984:	4909      	ldr	r1, [pc, #36]	@ (80049ac <Get_SerialNum+0x50>)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f814 	bl	80049b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800498c:	2204      	movs	r2, #4
 800498e:	4908      	ldr	r1, [pc, #32]	@ (80049b0 <Get_SerialNum+0x54>)
 8004990:	68b8      	ldr	r0, [r7, #8]
 8004992:	f000 f80f 	bl	80049b4 <IntToUnicode>
  }
}
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	1fff7a10 	.word	0x1fff7a10
 80049a4:	1fff7a14 	.word	0x1fff7a14
 80049a8:	1fff7a18 	.word	0x1fff7a18
 80049ac:	20000066 	.word	0x20000066
 80049b0:	20000076 	.word	0x20000076

080049b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80049c6:	2300      	movs	r3, #0
 80049c8:	75fb      	strb	r3, [r7, #23]
 80049ca:	e027      	b.n	8004a1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	0f1b      	lsrs	r3, r3, #28
 80049d0:	2b09      	cmp	r3, #9
 80049d2:	d80b      	bhi.n	80049ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	0f1b      	lsrs	r3, r3, #28
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4619      	mov	r1, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	440b      	add	r3, r1
 80049e4:	3230      	adds	r2, #48	@ 0x30
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e00a      	b.n	8004a02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	0f1b      	lsrs	r3, r3, #28
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4619      	mov	r1, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	440b      	add	r3, r1
 80049fc:	3237      	adds	r2, #55	@ 0x37
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	4413      	add	r3, r2
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
 8004a1c:	7dfa      	ldrb	r2, [r7, #23]
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d3d3      	bcc.n	80049cc <IntToUnicode+0x18>
  }
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004a44:	2300      	movs	r3, #0
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e0c6      	b.n	8004bd8 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004a50:	fb02 f303 	mul.w	r3, r2, r3
 8004a54:	4a65      	ldr	r2, [pc, #404]	@ (8004bec <USBD_CDC_Init+0x1b8>)
 8004a56:	4413      	add	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7c1b      	ldrb	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d13d      	bne.n	8004ade <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	4a62      	ldr	r2, [pc, #392]	@ (8004bf0 <USBD_CDC_Init+0x1bc>)
 8004a66:	5cd1      	ldrb	r1, [r2, r3]
 8004a68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f002 fca5 	bl	80073be <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	4a5e      	ldr	r2, [pc, #376]	@ (8004bf0 <USBD_CDC_Init+0x1bc>)
 8004a78:	5cd3      	ldrb	r3, [r2, r3]
 8004a7a:	f003 020f 	and.w	r2, r3, #15
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	3324      	adds	r3, #36	@ 0x24
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	4a58      	ldr	r2, [pc, #352]	@ (8004bf4 <USBD_CDC_Init+0x1c0>)
 8004a94:	5cd1      	ldrb	r1, [r2, r3]
 8004a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f002 fc8e 	bl	80073be <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	4a53      	ldr	r2, [pc, #332]	@ (8004bf4 <USBD_CDC_Init+0x1c0>)
 8004aa6:	5cd3      	ldrb	r3, [r2, r3]
 8004aa8:	f003 020f 	and.w	r2, r3, #15
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004abc:	2201      	movs	r2, #1
 8004abe:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	4a4d      	ldr	r2, [pc, #308]	@ (8004bf8 <USBD_CDC_Init+0x1c4>)
 8004ac4:	5cd3      	ldrb	r3, [r2, r3]
 8004ac6:	f003 020f 	and.w	r2, r3, #15
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3326      	adds	r3, #38	@ 0x26
 8004ad8:	2210      	movs	r2, #16
 8004ada:	801a      	strh	r2, [r3, #0]
 8004adc:	e03a      	b.n	8004b54 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	4a43      	ldr	r2, [pc, #268]	@ (8004bf0 <USBD_CDC_Init+0x1bc>)
 8004ae2:	5cd1      	ldrb	r1, [r2, r3]
 8004ae4:	2340      	movs	r3, #64	@ 0x40
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f002 fc68 	bl	80073be <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	4a3f      	ldr	r2, [pc, #252]	@ (8004bf0 <USBD_CDC_Init+0x1bc>)
 8004af2:	5cd3      	ldrb	r3, [r2, r3]
 8004af4:	f003 020f 	and.w	r2, r3, #15
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	3324      	adds	r3, #36	@ 0x24
 8004b06:	2201      	movs	r2, #1
 8004b08:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	4a39      	ldr	r2, [pc, #228]	@ (8004bf4 <USBD_CDC_Init+0x1c0>)
 8004b0e:	5cd1      	ldrb	r1, [r2, r3]
 8004b10:	2340      	movs	r3, #64	@ 0x40
 8004b12:	2202      	movs	r2, #2
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f002 fc52 	bl	80073be <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	4a35      	ldr	r2, [pc, #212]	@ (8004bf4 <USBD_CDC_Init+0x1c0>)
 8004b1e:	5cd3      	ldrb	r3, [r2, r3]
 8004b20:	f003 020f 	and.w	r2, r3, #15
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004b34:	2201      	movs	r2, #1
 8004b36:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004bf8 <USBD_CDC_Init+0x1c4>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	f003 020f 	and.w	r2, r3, #15
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	3326      	adds	r3, #38	@ 0x26
 8004b50:	2210      	movs	r2, #16
 8004b52:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	4a28      	ldr	r2, [pc, #160]	@ (8004bf8 <USBD_CDC_Init+0x1c4>)
 8004b58:	5cd1      	ldrb	r1, [r2, r3]
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f002 fc2d 	bl	80073be <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	4a24      	ldr	r2, [pc, #144]	@ (8004bf8 <USBD_CDC_Init+0x1c4>)
 8004b68:	5cd3      	ldrb	r3, [r2, r3]
 8004b6a:	f003 020f 	and.w	r2, r3, #15
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	3324      	adds	r3, #36	@ 0x24
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	7bfa      	ldrb	r2, [r7, #15]
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	7c1b      	ldrb	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	4a12      	ldr	r2, [pc, #72]	@ (8004bf4 <USBD_CDC_Init+0x1c0>)
 8004baa:	5cd1      	ldrb	r1, [r2, r3]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004bb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f002 fcf0 	bl	800759c <USBD_LL_PrepareReceive>
 8004bbc:	e009      	b.n	8004bd2 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf4 <USBD_CDC_Init+0x1c0>)
 8004bc2:	5cd1      	ldrb	r1, [r2, r3]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004bca:	2340      	movs	r3, #64	@ 0x40
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f002 fce5 	bl	800759c <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f43f af35 	beq.w	8004a4a <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000e1c 	.word	0x20000e1c
 8004bf0:	20000e04 	.word	0x20000e04
 8004bf4:	20000e08 	.word	0x20000e08
 8004bf8:	20000e0c 	.word	0x20000e0c

08004bfc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
 8004c0c:	e057      	b.n	8004cbe <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd0 <USBD_CDC_DeInit+0xd4>)
 8004c12:	5cd3      	ldrb	r3, [r2, r3]
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f002 fbf7 	bl	800740a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd0 <USBD_CDC_DeInit+0xd4>)
 8004c20:	5cd3      	ldrb	r3, [r2, r3]
 8004c22:	f003 020f 	and.w	r2, r3, #15
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	3324      	adds	r3, #36	@ 0x24
 8004c34:	2200      	movs	r2, #0
 8004c36:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	4a26      	ldr	r2, [pc, #152]	@ (8004cd4 <USBD_CDC_DeInit+0xd8>)
 8004c3c:	5cd3      	ldrb	r3, [r2, r3]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f002 fbe2 	bl	800740a <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	4a22      	ldr	r2, [pc, #136]	@ (8004cd4 <USBD_CDC_DeInit+0xd8>)
 8004c4a:	5cd3      	ldrb	r3, [r2, r3]
 8004c4c:	f003 020f 	and.w	r2, r3, #15
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c60:	2200      	movs	r2, #0
 8004c62:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd8 <USBD_CDC_DeInit+0xdc>)
 8004c68:	5cd3      	ldrb	r3, [r2, r3]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f002 fbcc 	bl	800740a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	4a18      	ldr	r2, [pc, #96]	@ (8004cd8 <USBD_CDC_DeInit+0xdc>)
 8004c76:	5cd3      	ldrb	r3, [r2, r3]
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	3324      	adds	r3, #36	@ 0x24
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	4a11      	ldr	r2, [pc, #68]	@ (8004cd8 <USBD_CDC_DeInit+0xdc>)
 8004c92:	5cd3      	ldrb	r3, [r2, r3]
 8004c94:	f003 020f 	and.w	r2, r3, #15
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3326      	adds	r3, #38	@ 0x26
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0a4      	beq.n	8004c0e <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000e04 	.word	0x20000e04
 8004cd4:	20000e08 	.word	0x20000e08
 8004cd8:	20000e0c 	.word	0x20000e0c

08004cdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	757b      	strb	r3, [r7, #21]
 8004cfe:	e015      	b.n	8004d2c <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	889b      	ldrh	r3, [r3, #4]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	7d7b      	ldrb	r3, [r7, #21]
 8004d08:	496d      	ldr	r1, [pc, #436]	@ (8004ec0 <USBD_CDC_Setup+0x1e4>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d007      	beq.n	8004d20 <USBD_CDC_Setup+0x44>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	889b      	ldrh	r3, [r3, #4]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	7d7b      	ldrb	r3, [r7, #21]
 8004d18:	496a      	ldr	r1, [pc, #424]	@ (8004ec4 <USBD_CDC_Setup+0x1e8>)
 8004d1a:	5ccb      	ldrb	r3, [r1, r3]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d102      	bne.n	8004d26 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8004d20:	7d7b      	ldrb	r3, [r7, #21]
 8004d22:	75bb      	strb	r3, [r7, #22]
      break;
 8004d24:	e005      	b.n	8004d32 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004d26:	7d7b      	ldrb	r3, [r7, #21]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	757b      	strb	r3, [r7, #21]
 8004d2c:	7d7b      	ldrb	r3, [r7, #21]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0e6      	beq.n	8004d00 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8004d32:	7dbb      	ldrb	r3, [r7, #22]
 8004d34:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004d38:	fb02 f303 	mul.w	r3, r2, r3
 8004d3c:	4a62      	ldr	r2, [pc, #392]	@ (8004ec8 <USBD_CDC_Setup+0x1ec>)
 8004d3e:	4413      	add	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d04a      	beq.n	8004de4 <USBD_CDC_Setup+0x108>
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	f040 80aa 	bne.w	8004ea8 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	88db      	ldrh	r3, [r3, #6]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d038      	beq.n	8004dce <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	b25b      	sxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da1d      	bge.n	8004da2 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004d6c:	689c      	ldr	r4, [r3, #8]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	7859      	ldrb	r1, [r3, #1]
 8004d72:	7dbb      	ldrb	r3, [r7, #22]
 8004d74:	025b      	lsls	r3, r3, #9
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	441a      	add	r2, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	88db      	ldrh	r3, [r3, #6]
 8004d7e:	7db8      	ldrb	r0, [r7, #22]
 8004d80:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	88db      	ldrh	r3, [r3, #6]
 8004d86:	2b07      	cmp	r3, #7
 8004d88:	bf28      	it	cs
 8004d8a:	2307      	movcs	r3, #7
 8004d8c:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8004d8e:	7dbb      	ldrb	r3, [r7, #22]
 8004d90:	025b      	lsls	r3, r3, #9
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	89fa      	ldrh	r2, [r7, #14]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f002 f8fd 	bl	8006f9a <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8004da0:	e089      	b.n	8004eb6 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	785a      	ldrb	r2, [r3, #1]
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	88db      	ldrh	r3, [r3, #6]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8004db8:	7dbb      	ldrb	r3, [r7, #22]
 8004dba:	025b      	lsls	r3, r3, #9
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	18d1      	adds	r1, r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	88db      	ldrh	r3, [r3, #6]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f002 f913 	bl	8006ff2 <USBD_CtlPrepareRx>
    break;
 8004dcc:	e073      	b.n	8004eb6 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004dd4:	689c      	ldr	r4, [r3, #8]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	7859      	ldrb	r1, [r3, #1]
 8004dda:	7db8      	ldrb	r0, [r7, #22]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	47a0      	blx	r4
    break;
 8004de2:	e068      	b.n	8004eb6 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	2b0b      	cmp	r3, #11
 8004dea:	d852      	bhi.n	8004e92 <USBD_CDC_Setup+0x1b6>
 8004dec:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <USBD_CDC_Setup+0x118>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e25 	.word	0x08004e25
 8004df8:	08004ea1 	.word	0x08004ea1
 8004dfc:	08004e93 	.word	0x08004e93
 8004e00:	08004e93 	.word	0x08004e93
 8004e04:	08004e93 	.word	0x08004e93
 8004e08:	08004e93 	.word	0x08004e93
 8004e0c:	08004e93 	.word	0x08004e93
 8004e10:	08004e93 	.word	0x08004e93
 8004e14:	08004e93 	.word	0x08004e93
 8004e18:	08004e93 	.word	0x08004e93
 8004e1c:	08004e4f 	.word	0x08004e4f
 8004e20:	08004e79 	.word	0x08004e79
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d107      	bne.n	8004e40 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e30:	f107 030a 	add.w	r3, r7, #10
 8004e34:	2202      	movs	r2, #2
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f002 f8ae 	bl	8006f9a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004e3e:	e032      	b.n	8004ea6 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f002 f838 	bl	8006eb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4c:	e02b      	b.n	8004ea6 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d107      	bne.n	8004e6a <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e5a:	f107 030d 	add.w	r3, r7, #13
 8004e5e:	2201      	movs	r2, #1
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f002 f899 	bl	8006f9a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004e68:	e01d      	b.n	8004ea6 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f002 f823 	bl	8006eb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004e72:	2303      	movs	r3, #3
 8004e74:	75fb      	strb	r3, [r7, #23]
      break;
 8004e76:	e016      	b.n	8004ea6 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d00f      	beq.n	8004ea4 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f002 f816 	bl	8006eb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e90:	e008      	b.n	8004ea4 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f002 f80f 	bl	8006eb8 <USBD_CtlError>
      ret = USBD_FAIL;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9e:	e002      	b.n	8004ea6 <USBD_CDC_Setup+0x1ca>
      break;
 8004ea0:	bf00      	nop
 8004ea2:	e008      	b.n	8004eb6 <USBD_CDC_Setup+0x1da>
      break;
 8004ea4:	bf00      	nop
    }
    break;
 8004ea6:	e006      	b.n	8004eb6 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f002 f804 	bl	8006eb8 <USBD_CtlError>
    ret = USBD_FAIL;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	75fb      	strb	r3, [r7, #23]
    break;
 8004eb4:	bf00      	nop
  }

  return (uint8_t)ret;
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}
 8004ec0:	20000e10 	.word	0x20000e10
 8004ec4:	20000e14 	.word	0x20000e14
 8004ec8:	20000e1c 	.word	0x20000e1c

08004ecc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8004ee2:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	75bb      	strb	r3, [r7, #22]
 8004eec:	e00d      	b.n	8004f0a <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	7dbb      	ldrb	r3, [r7, #22]
 8004ef2:	4934      	ldr	r1, [pc, #208]	@ (8004fc4 <USBD_CDC_DataIn+0xf8>)
 8004ef4:	5ccb      	ldrb	r3, [r1, r3]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d102      	bne.n	8004f04 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8004efe:	7dbb      	ldrb	r3, [r7, #22]
 8004f00:	75fb      	strb	r3, [r7, #23]
      break;
 8004f02:	e005      	b.n	8004f10 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004f04:	7dbb      	ldrb	r3, [r7, #22]
 8004f06:	3301      	adds	r3, #1
 8004f08:	75bb      	strb	r3, [r7, #22]
 8004f0a:	7dbb      	ldrb	r3, [r7, #22]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0ee      	beq.n	8004eee <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8004fc8 <USBD_CDC_DataIn+0xfc>)
 8004f1c:	4413      	add	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	3318      	adds	r3, #24
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d029      	beq.n	8004f8a <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	3318      	adds	r3, #24
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	78f9      	ldrb	r1, [r7, #3]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	440b      	add	r3, r1
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4403      	add	r3, r0
 8004f56:	331c      	adds	r3, #28
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f5e:	fb01 f303 	mul.w	r3, r1, r3
 8004f62:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d110      	bne.n	8004f8a <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3318      	adds	r3, #24
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f7c:	78f9      	ldrb	r1, [r7, #3]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2200      	movs	r2, #0
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f002 fae9 	bl	800755a <USBD_LL_Transmit>
 8004f88:	e016      	b.n	8004fb8 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004fa4:	691c      	ldr	r4, [r3, #16]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	7df8      	ldrb	r0, [r7, #23]
 8004fb6:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd90      	pop	{r4, r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000e04 	.word	0x20000e04
 8004fc8:	20000e1c 	.word	0x20000e1c

08004fcc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	73bb      	strb	r3, [r7, #14]
 8004fe4:	e00b      	b.n	8004ffe <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8004fe6:	7bbb      	ldrb	r3, [r7, #14]
 8004fe8:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <USBD_CDC_DataOut+0x7c>)
 8004fea:	5cd3      	ldrb	r3, [r2, r3]
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d102      	bne.n	8004ff8 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8004ff2:	7bbb      	ldrb	r3, [r7, #14]
 8004ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff6:	e005      	b.n	8005004 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	73bb      	strb	r3, [r7, #14]
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	4a0f      	ldr	r2, [pc, #60]	@ (800504c <USBD_CDC_DataOut+0x80>)
 8005010:	4413      	add	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f002 fae0 	bl	80075de <USBD_LL_GetRxDataSize>
 800501e:	4602      	mov	r2, r0
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800503a:	7bf8      	ldrb	r0, [r7, #15]
 800503c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000e08 	.word	0x20000e08
 800504c:	20000e1c 	.word	0x20000e1c

08005050 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005058:	2300      	movs	r3, #0
 800505a:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e02d      	b.n	80050be <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	4a18      	ldr	r2, [pc, #96]	@ (80050d0 <USBD_CDC_EP0_RxReady+0x80>)
 800506e:	4413      	add	r3, r2
 8005070:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8005078:	2303      	movs	r3, #3
 800507a:	e024      	b.n	80050c6 <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005082:	2b00      	cmp	r3, #0
 8005084:	d018      	beq.n	80050b8 <USBD_CDC_EP0_RxReady+0x68>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800508c:	2bff      	cmp	r3, #255	@ 0xff
 800508e:	d013      	beq.n	80050b8 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005096:	689c      	ldr	r4, [r3, #8]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	025b      	lsls	r3, r3, #9
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	441a      	add	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80050ac:	7bf8      	ldrb	r0, [r7, #15]
 80050ae:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	22ff      	movs	r2, #255	@ 0xff
 80050b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	3301      	adds	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0ce      	beq.n	8005062 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd90      	pop	{r4, r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000e1c 	.word	0x20000e1c

080050d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	224b      	movs	r2, #75	@ 0x4b
 80050e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80050e2:	4b03      	ldr	r3, [pc, #12]	@ (80050f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	20000114 	.word	0x20000114

080050f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	224b      	movs	r2, #75	@ 0x4b
 8005100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005102:	4b03      	ldr	r3, [pc, #12]	@ (8005110 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	200000c8 	.word	0x200000c8

08005114 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	224b      	movs	r2, #75	@ 0x4b
 8005120:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005122:	4b03      	ldr	r3, [pc, #12]	@ (8005130 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000114 	.word	0x20000114

08005134 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	220a      	movs	r2, #10
 8005140:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005142:	4b03      	ldr	r3, [pc, #12]	@ (8005150 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20000080 	.word	0x20000080

08005154 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005164:	2303      	movs	r3, #3
 8005166:	e004      	b.n	8005172 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4603      	mov	r3, r0
 800518e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800519a:	fb02 f303 	mul.w	r3, r2, r3
 800519e:	4a09      	ldr	r2, [pc, #36]	@ (80051c4 <USBD_CDC_SetTxBuffer+0x44>)
 80051a0:	4413      	add	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000e1c 	.word	0x20000e1c

080051c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
 80051e4:	4a06      	ldr	r2, [pc, #24]	@ (8005200 <USBD_CDC_SetRxBuffer+0x38>)
 80051e6:	4413      	add	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	20000e1c 	.word	0x20000e1c

08005204 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	6039      	str	r1, [r7, #0]
 800520e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	4a17      	ldr	r2, [pc, #92]	@ (8005280 <USBD_CDC_TransmitPacket+0x7c>)
 8005224:	4413      	add	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800522e:	2b00      	cmp	r3, #0
 8005230:	d121      	bne.n	8005276 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2201      	movs	r2, #1
 8005236:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	4a11      	ldr	r2, [pc, #68]	@ (8005284 <USBD_CDC_TransmitPacket+0x80>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
 8005240:	f003 020f 	and.w	r2, r3, #15
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800524a:	6838      	ldr	r0, [r7, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4403      	add	r3, r0
 8005256:	3318      	adds	r3, #24
 8005258:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	4a09      	ldr	r2, [pc, #36]	@ (8005284 <USBD_CDC_TransmitPacket+0x80>)
 800525e:	5cd1      	ldrb	r1, [r2, r3]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800526c:	6838      	ldr	r0, [r7, #0]
 800526e:	f002 f974 	bl	800755a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005276:	7bfb      	ldrb	r3, [r7, #15]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000e1c 	.word	0x20000e1c
 8005284:	20000e04 	.word	0x20000e04

08005288 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	6039      	str	r1, [r7, #0]
 8005292:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	4a11      	ldr	r2, [pc, #68]	@ (80052e8 <USBD_CDC_ReceivePacket+0x60>)
 80052a4:	4413      	add	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	7c1b      	ldrb	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	4a0e      	ldr	r2, [pc, #56]	@ (80052ec <USBD_CDC_ReceivePacket+0x64>)
 80052b4:	5cd1      	ldrb	r1, [r2, r3]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052c0:	6838      	ldr	r0, [r7, #0]
 80052c2:	f002 f96b 	bl	800759c <USBD_LL_PrepareReceive>
 80052c6:	e009      	b.n	80052dc <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	4a08      	ldr	r2, [pc, #32]	@ (80052ec <USBD_CDC_ReceivePacket+0x64>)
 80052cc:	5cd1      	ldrb	r1, [r2, r3]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052d4:	2340      	movs	r3, #64	@ 0x40
 80052d6:	6838      	ldr	r0, [r7, #0]
 80052d8:	f002 f960 	bl	800759c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20000e1c 	.word	0x20000e1c
 80052ec:	20000e08 	.word	0x20000e08

080052f0 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	4608      	mov	r0, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	461a      	mov	r2, r3
 80052fe:	4603      	mov	r3, r0
 8005300:	70fb      	strb	r3, [r7, #3]
 8005302:	460b      	mov	r3, r1
 8005304:	70bb      	strb	r3, [r7, #2]
 8005306:	4613      	mov	r3, r2
 8005308:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3309      	adds	r3, #9
 800530e:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005310:	2300      	movs	r3, #0
 8005312:	73fb      	strb	r3, [r7, #15]
 8005314:	e05b      	b.n	80053ce <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3302      	adds	r3, #2
 800531a:	78fa      	ldrb	r2, [r7, #3]
 800531c:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3310      	adds	r3, #16
 8005322:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005326:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	330a      	adds	r3, #10
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	331a      	adds	r3, #26
 8005334:	78ba      	ldrb	r2, [r7, #2]
 8005336:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3322      	adds	r3, #34	@ 0x22
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3323      	adds	r3, #35	@ 0x23
 8005344:	78ba      	ldrb	r2, [r7, #2]
 8005346:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3326      	adds	r3, #38	@ 0x26
 800534c:	7e3a      	ldrb	r2, [r7, #24]
 800534e:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	332d      	adds	r3, #45	@ 0x2d
 8005354:	78ba      	ldrb	r2, [r7, #2]
 8005356:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3336      	adds	r3, #54	@ 0x36
 800535c:	7f3a      	ldrb	r2, [r7, #28]
 800535e:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	333d      	adds	r3, #61	@ 0x3d
 8005364:	787a      	ldrb	r2, [r7, #1]
 8005366:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3342      	adds	r3, #66	@ 0x42
 800536c:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	491c      	ldr	r1, [pc, #112]	@ (80053e4 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8005372:	787a      	ldrb	r2, [r7, #1]
 8005374:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	491b      	ldr	r1, [pc, #108]	@ (80053e8 <USBD_Update_CDC_ACM_DESC+0xf8>)
 800537a:	7f3a      	ldrb	r2, [r7, #28]
 800537c:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	491a      	ldr	r1, [pc, #104]	@ (80053ec <USBD_Update_CDC_ACM_DESC+0xfc>)
 8005382:	7e3a      	ldrb	r2, [r7, #24]
 8005384:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	4919      	ldr	r1, [pc, #100]	@ (80053f0 <USBD_Update_CDC_ACM_DESC+0x100>)
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	4918      	ldr	r1, [pc, #96]	@ (80053f4 <USBD_Update_CDC_ACM_DESC+0x104>)
 8005392:	78ba      	ldrb	r2, [r7, #2]
 8005394:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	4917      	ldr	r1, [pc, #92]	@ (80053f8 <USBD_Update_CDC_ACM_DESC+0x108>)
 800539a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800539e:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 80053a0:	787b      	ldrb	r3, [r7, #1]
 80053a2:	3302      	adds	r3, #2
 80053a4:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 80053a6:	787b      	ldrb	r3, [r7, #1]
 80053a8:	3301      	adds	r3, #1
 80053aa:	763b      	strb	r3, [r7, #24]
    out_ep++;
 80053ac:	7f3b      	ldrb	r3, [r7, #28]
 80053ae:	3301      	adds	r3, #1
 80053b0:	773b      	strb	r3, [r7, #28]
    str_idx++;
 80053b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80053b6:	3301      	adds	r3, #1
 80053b8:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	3302      	adds	r3, #2
 80053c0:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	3301      	adds	r3, #1
 80053c6:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	3301      	adds	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0a0      	beq.n	8005316 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000e04 	.word	0x20000e04
 80053e8:	20000e08 	.word	0x20000e08
 80053ec:	20000e0c 	.word	0x20000e0c
 80053f0:	20000e10 	.word	0x20000e10
 80053f4:	20000e14 	.word	0x20000e14
 80053f8:	20000e18 	.word	0x20000e18

080053fc <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8005408:	4b08      	ldr	r3, [pc, #32]	@ (800542c <USBD_COMPOSITE_Init+0x30>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	4611      	mov	r1, r2
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <USBD_COMPOSITE_Init+0x34>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	4611      	mov	r1, r2
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	2000008c 	.word	0x2000008c
 8005430:	200001ac 	.word	0x200001ac

08005434 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8005440:	4b08      	ldr	r3, [pc, #32]	@ (8005464 <USBD_COMPOSITE_DeInit+0x30>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	78fa      	ldrb	r2, [r7, #3]
 8005446:	4611      	mov	r1, r2
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
 800544c:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <USBD_COMPOSITE_DeInit+0x34>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	78fa      	ldrb	r2, [r7, #3]
 8005452:	4611      	mov	r1, r2
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	2000008c 	.word	0x2000008c
 8005468:	200001ac 	.word	0x200001ac

0800546c <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]
 800547a:	e019      	b.n	80054b0 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	889b      	ldrh	r3, [r3, #4]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	4915      	ldr	r1, [pc, #84]	@ (80054dc <USBD_COMPOSITE_Setup+0x70>)
 8005486:	5ccb      	ldrb	r3, [r1, r3]
 8005488:	429a      	cmp	r2, r3
 800548a:	d007      	beq.n	800549c <USBD_COMPOSITE_Setup+0x30>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	889b      	ldrh	r3, [r3, #4]
 8005490:	b2da      	uxtb	r2, r3
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	4912      	ldr	r1, [pc, #72]	@ (80054e0 <USBD_COMPOSITE_Setup+0x74>)
 8005496:	5ccb      	ldrb	r3, [r1, r3]
 8005498:	429a      	cmp	r2, r3
 800549a:	d106      	bne.n	80054aa <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800549c:	4b11      	ldr	r3, [pc, #68]	@ (80054e4 <USBD_COMPOSITE_Setup+0x78>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	e014      	b.n	80054d4 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	3301      	adds	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0e2      	beq.n	800547c <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_MOUSE.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (LOBYTE(req->wIndex) == HID_KEYBOARD_ITF_NBR)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	889b      	ldrh	r3, [r3, #4]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <USBD_COMPOSITE_Setup+0x7c>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d106      	bne.n	80054d2 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
 80054c4:	4b09      	ldr	r3, [pc, #36]	@ (80054ec <USBD_COMPOSITE_Setup+0x80>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	4798      	blx	r3
 80054ce:	4603      	mov	r3, r0
 80054d0:	e000      	b.n	80054d4 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 80054d2:	2303      	movs	r3, #3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000e10 	.word	0x20000e10
 80054e0:	20000e14 	.word	0x20000e14
 80054e4:	2000008c 	.word	0x2000008c
 80054e8:	20001140 	.word	0x20001140
 80054ec:	200001ac 	.word	0x200001ac

080054f0 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80054fc:	2300      	movs	r3, #0
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	e01a      	b.n	8005538 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005502:	78fa      	ldrb	r2, [r7, #3]
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	4918      	ldr	r1, [pc, #96]	@ (8005568 <USBD_COMPOSITE_DataIn+0x78>)
 8005508:	5ccb      	ldrb	r3, [r1, r3]
 800550a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800550e:	429a      	cmp	r2, r3
 8005510:	d007      	beq.n	8005522 <USBD_COMPOSITE_DataIn+0x32>
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	4915      	ldr	r1, [pc, #84]	@ (800556c <USBD_COMPOSITE_DataIn+0x7c>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800551e:	429a      	cmp	r2, r3
 8005520:	d107      	bne.n	8005532 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005522:	4b13      	ldr	r3, [pc, #76]	@ (8005570 <USBD_COMPOSITE_DataIn+0x80>)
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	4611      	mov	r1, r2
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
 800552e:	4603      	mov	r3, r0
 8005530:	e015      	b.n	800555e <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	3301      	adds	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0e1      	beq.n	8005502 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_MOUSE.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (epnum == (HID_KEYBOARD_IN_EP & 0x7F))
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	4b0c      	ldr	r3, [pc, #48]	@ (8005574 <USBD_COMPOSITE_DataIn+0x84>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005548:	429a      	cmp	r2, r3
 800554a:	d107      	bne.n	800555c <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
 800554c:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <USBD_COMPOSITE_DataIn+0x88>)
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	4611      	mov	r1, r2
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
 8005558:	4603      	mov	r3, r0
 800555a:	e000      	b.n	800555e <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800555c:	2303      	movs	r3, #3
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000e04 	.word	0x20000e04
 800556c:	20000e0c 	.word	0x20000e0c
 8005570:	2000008c 	.word	0x2000008c
 8005574:	200001aa 	.word	0x200001aa
 8005578:	200001ac 	.word	0x200001ac

0800557c <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8005584:	4b04      	ldr	r3, [pc, #16]	@ (8005598 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	2000008c 	.word	0x2000008c

0800559c <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	460b      	mov	r3, r1
 80055ec:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005608:	2300      	movs	r3, #0
 800560a:	73fb      	strb	r3, [r7, #15]
 800560c:	e010      	b.n	8005630 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	4a0b      	ldr	r2, [pc, #44]	@ (8005640 <USBD_COMPOSITE_DataOut+0x44>)
 8005612:	5cd3      	ldrb	r3, [r2, r3]
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	429a      	cmp	r2, r3
 8005618:	d107      	bne.n	800562a <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800561a:	4b0a      	ldr	r3, [pc, #40]	@ (8005644 <USBD_COMPOSITE_DataOut+0x48>)
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	4611      	mov	r1, r2
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
 8005626:	4603      	mov	r3, r0
 8005628:	e006      	b.n	8005638 <USBD_COMPOSITE_DataOut+0x3c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	3301      	adds	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0eb      	beq.n	800560e <USBD_COMPOSITE_DataOut+0x12>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005636:	2303      	movs	r3, #3
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20000e08 	.word	0x20000e08
 8005644:	2000008c 	.word	0x2000008c

08005648 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2264      	movs	r2, #100	@ 0x64
 8005654:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005656:	4b03      	ldr	r3, [pc, #12]	@ (8005664 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	2000109c 	.word	0x2000109c

08005668 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2264      	movs	r2, #100	@ 0x64
 8005674:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8005676:	4b03      	ldr	r3, [pc, #12]	@ (8005684 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	20001038 	.word	0x20001038

08005688 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2264      	movs	r2, #100	@ 0x64
 8005694:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8005696:	4b03      	ldr	r3, [pc, #12]	@ (80056a4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	2000109c 	.word	0x2000109c

080056a8 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	220a      	movs	r2, #10
 80056b4:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 80056b6:	4b03      	ldr	r3, [pc, #12]	@ (80056c4 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	200001a0 	.word	0x200001a0

080056c8 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	@ 0x28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	460b      	mov	r3, r1
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 80056d6:	4b20      	ldr	r3, [pc, #128]	@ (8005758 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	7afa      	ldrb	r2, [r7, #11]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d836      	bhi.n	800574e <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	f107 0318 	add.w	r3, r7, #24
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80056f6:	e01a      	b.n	800572e <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 80056f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056fc:	4a17      	ldr	r2, [pc, #92]	@ (800575c <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 80056fe:	5cd3      	ldrb	r3, [r2, r3]
 8005700:	7afa      	ldrb	r2, [r7, #11]
 8005702:	429a      	cmp	r2, r3
 8005704:	d10e      	bne.n	8005724 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8005706:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800570a:	f107 0014 	add.w	r0, r7, #20
 800570e:	4a14      	ldr	r2, [pc, #80]	@ (8005760 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8005710:	2110      	movs	r1, #16
 8005712:	f001 ffa3 	bl	800765c <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8005716:	f107 0314 	add.w	r3, r7, #20
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4911      	ldr	r1, [pc, #68]	@ (8005764 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800571e:	4618      	mov	r0, r3
 8005720:	f001 fbdb 	bl	8006eda <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005728:	3301      	adds	r3, #1
 800572a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800572e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0e0      	beq.n	80056f8 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_MOUSE_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    if (index == HID_KEYBOARD_STR_DESC_IDX)
 8005736:	4b0c      	ldr	r3, [pc, #48]	@ (8005768 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	7afa      	ldrb	r2, [r7, #11]
 800573c:	429a      	cmp	r2, r3
 800573e:	d104      	bne.n	800574a <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	4908      	ldr	r1, [pc, #32]	@ (8005764 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8005744:	4809      	ldr	r0, [pc, #36]	@ (800576c <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8005746:	f001 fbc8 	bl	8006eda <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800574a:	4b06      	ldr	r3, [pc, #24]	@ (8005764 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800574c:	e000      	b.n	8005750 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800574e:	2300      	movs	r3, #0
  }
}
 8005750:	4618      	mov	r0, r3
 8005752:	3728      	adds	r7, #40	@ 0x28
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	2000019c 	.word	0x2000019c
 800575c:	20000e18 	.word	0x20000e18
 8005760:	08008444 	.word	0x08008444
 8005764:	20001100 	.word	0x20001100
 8005768:	20001141 	.word	0x20001141
 800576c:	08008454 	.word	0x08008454

08005770 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b089      	sub	sp, #36	@ 0x24
 8005774:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800577e:	2381      	movs	r3, #129	@ 0x81
 8005780:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8005782:	2301      	movs	r3, #1
 8005784:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8005786:	2300      	movs	r3, #0
 8005788:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_KEYBOARD == 1)
  ptr = USBD_HID_KEYBOARD.GetFSConfigDescriptor(&len);
 800578a:	4b6f      	ldr	r3, [pc, #444]	@ (8005948 <USBD_COMPOSITE_Mount_Class+0x1d8>)
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	1d3a      	adds	r2, r7, #4
 8005790:	4610      	mov	r0, r2
 8005792:	4798      	blx	r3
 8005794:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8005796:	4b6d      	ldr	r3, [pc, #436]	@ (800594c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	7afa      	ldrb	r2, [r7, #11]
 800579c:	7a79      	ldrb	r1, [r7, #9]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fac4 	bl	8005d2c <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3309      	adds	r3, #9
 80057a8:	88ba      	ldrh	r2, [r7, #4]
 80057aa:	3a09      	subs	r2, #9
 80057ac:	4619      	mov	r1, r3
 80057ae:	4868      	ldr	r0, [pc, #416]	@ (8005950 <USBD_COMPOSITE_Mount_Class+0x1e0>)
 80057b0:	f001 ffe2 	bl	8007778 <memcpy>

  ptr = USBD_HID_KEYBOARD.GetHSConfigDescriptor(&len);
 80057b4:	4b64      	ldr	r3, [pc, #400]	@ (8005948 <USBD_COMPOSITE_Mount_Class+0x1d8>)
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	1d3a      	adds	r2, r7, #4
 80057ba:	4610      	mov	r0, r2
 80057bc:	4798      	blx	r3
 80057be:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 80057c0:	4b62      	ldr	r3, [pc, #392]	@ (800594c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	7afa      	ldrb	r2, [r7, #11]
 80057c6:	7a79      	ldrb	r1, [r7, #9]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 faaf 	bl	8005d2c <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3309      	adds	r3, #9
 80057d2:	88ba      	ldrh	r2, [r7, #4]
 80057d4:	3a09      	subs	r2, #9
 80057d6:	4619      	mov	r1, r3
 80057d8:	485e      	ldr	r0, [pc, #376]	@ (8005954 <USBD_COMPOSITE_Mount_Class+0x1e4>)
 80057da:	f001 ffcd 	bl	8007778 <memcpy>

  in_ep_track += 1;
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	3301      	adds	r3, #1
 80057e2:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 80057e4:	7a7b      	ldrb	r3, [r7, #9]
 80057e6:	3301      	adds	r3, #1
 80057e8:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 80057ea:	4b58      	ldr	r3, [pc, #352]	@ (800594c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	3301      	adds	r3, #1
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	4b56      	ldr	r3, [pc, #344]	@ (800594c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 80057f4:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 80057f6:	4b58      	ldr	r3, [pc, #352]	@ (8005958 <USBD_COMPOSITE_Mount_Class+0x1e8>)
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	1d3a      	adds	r2, r7, #4
 80057fc:	4610      	mov	r0, r2
 80057fe:	4798      	blx	r3
 8005800:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005802:	7a7b      	ldrb	r3, [r7, #9]
 8005804:	3301      	adds	r3, #1
 8005806:	b2d8      	uxtb	r0, r3
 8005808:	7afb      	ldrb	r3, [r7, #11]
 800580a:	3301      	adds	r3, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	4a4f      	ldr	r2, [pc, #316]	@ (800594c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005810:	7812      	ldrb	r2, [r2, #0]
 8005812:	7afc      	ldrb	r4, [r7, #11]
 8005814:	7a79      	ldrb	r1, [r7, #9]
 8005816:	9202      	str	r2, [sp, #8]
 8005818:	7aba      	ldrb	r2, [r7, #10]
 800581a:	9201      	str	r2, [sp, #4]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4623      	mov	r3, r4
 8005820:	4602      	mov	r2, r0
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff fd64 	bl	80052f0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3309      	adds	r3, #9
 800582c:	88ba      	ldrh	r2, [r7, #4]
 800582e:	3a09      	subs	r2, #9
 8005830:	4619      	mov	r1, r3
 8005832:	484a      	ldr	r0, [pc, #296]	@ (800595c <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8005834:	f001 ffa0 	bl	8007778 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005838:	4b47      	ldr	r3, [pc, #284]	@ (8005958 <USBD_COMPOSITE_Mount_Class+0x1e8>)
 800583a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583c:	1d3a      	adds	r2, r7, #4
 800583e:	4610      	mov	r0, r2
 8005840:	4798      	blx	r3
 8005842:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8005844:	7a7b      	ldrb	r3, [r7, #9]
 8005846:	3301      	adds	r3, #1
 8005848:	b2d8      	uxtb	r0, r3
 800584a:	7afb      	ldrb	r3, [r7, #11]
 800584c:	3301      	adds	r3, #1
 800584e:	b2db      	uxtb	r3, r3
 8005850:	4a3e      	ldr	r2, [pc, #248]	@ (800594c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005852:	7812      	ldrb	r2, [r2, #0]
 8005854:	7afc      	ldrb	r4, [r7, #11]
 8005856:	7a79      	ldrb	r1, [r7, #9]
 8005858:	9202      	str	r2, [sp, #8]
 800585a:	7aba      	ldrb	r2, [r7, #10]
 800585c:	9201      	str	r2, [sp, #4]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	4623      	mov	r3, r4
 8005862:	4602      	mov	r2, r0
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff fd43 	bl	80052f0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3309      	adds	r3, #9
 800586e:	88ba      	ldrh	r2, [r7, #4]
 8005870:	3a09      	subs	r2, #9
 8005872:	4619      	mov	r1, r3
 8005874:	483a      	ldr	r0, [pc, #232]	@ (8005960 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8005876:	f001 ff7f 	bl	8007778 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800587a:	7afb      	ldrb	r3, [r7, #11]
 800587c:	3302      	adds	r3, #2
 800587e:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8005880:	7abb      	ldrb	r3, [r7, #10]
 8005882:	3301      	adds	r3, #1
 8005884:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8005886:	7a7b      	ldrb	r3, [r7, #9]
 8005888:	3302      	adds	r3, #2
 800588a:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800588c:	4b2f      	ldr	r3, [pc, #188]	@ (800594c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	b2da      	uxtb	r2, r3
 8005894:	4b2d      	ldr	r3, [pc, #180]	@ (800594c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8005896:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8005898:	2364      	movs	r3, #100	@ 0x64
 800589a:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800589c:	4b31      	ldr	r3, [pc, #196]	@ (8005964 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800589e:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2209      	movs	r2, #9
 80058a4:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3301      	adds	r3, #1
 80058aa:	2202      	movs	r2, #2
 80058ac:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3302      	adds	r3, #2
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	0a1b      	lsrs	r3, r3, #8
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3303      	adds	r3, #3
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3304      	adds	r3, #4
 80058ca:	7a7a      	ldrb	r2, [r7, #9]
 80058cc:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3305      	adds	r3, #5
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3306      	adds	r3, #6
 80058da:	2200      	movs	r2, #0
 80058dc:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3307      	adds	r3, #7
 80058e2:	22c0      	movs	r2, #192	@ 0xc0
 80058e4:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3308      	adds	r3, #8
 80058ea:	2232      	movs	r2, #50	@ 0x32
 80058ec:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 80058ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005968 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2209      	movs	r2, #9
 80058f6:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	2202      	movs	r2, #2
 80058fe:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3302      	adds	r3, #2
 8005904:	88fa      	ldrh	r2, [r7, #6]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3303      	adds	r3, #3
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3304      	adds	r3, #4
 800591c:	7a7a      	ldrb	r2, [r7, #9]
 800591e:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3305      	adds	r3, #5
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3306      	adds	r3, #6
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3307      	adds	r3, #7
 8005934:	22c0      	movs	r2, #192	@ 0xc0
 8005936:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3308      	adds	r3, #8
 800593c:	2232      	movs	r2, #50	@ 0x32
 800593e:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	bd90      	pop	{r4, r7, pc}
 8005948:	200001ac 	.word	0x200001ac
 800594c:	2000019c 	.word	0x2000019c
 8005950:	20001041 	.word	0x20001041
 8005954:	200010a5 	.word	0x200010a5
 8005958:	2000008c 	.word	0x2000008c
 800595c:	2000105a 	.word	0x2000105a
 8005960:	200010be 	.word	0x200010be
 8005964:	2000109c 	.word	0x2000109c
 8005968:	20001038 	.word	0x20001038

0800596c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_Keyboard_HandleTypeDef *hhid;

  hhid = &USBD_HID_KBD_Instace;
 8005978:	4b24      	ldr	r3, [pc, #144]	@ (8005a0c <USBD_HID_Init+0xa0>)
 800597a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d105      	bne.n	800598e <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Keyboard = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
    return (uint8_t)USBD_EMEM;
 800598a:	2302      	movs	r3, #2
 800598c:	e03a      	b.n	8005a04 <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Keyboard = (void *)hhid;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	7c1b      	ldrb	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10d      	bne.n	80059ba <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_HS_BINTERVAL;
 800599e:	4b1c      	ldr	r3, [pc, #112]	@ (8005a10 <USBD_HID_Init+0xa4>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	f003 020f 	and.w	r2, r3, #15
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	3326      	adds	r3, #38	@ 0x26
 80059b4:	2207      	movs	r2, #7
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	e00c      	b.n	80059d4 <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_FS_BINTERVAL;
 80059ba:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <USBD_HID_Init+0xa4>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 020f 	and.w	r2, r3, #15
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	3326      	adds	r3, #38	@ 0x26
 80059d0:	220a      	movs	r2, #10
 80059d2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_KEYBOARD_IN_EP, USBD_EP_TYPE_INTR, HID_KEYBOARD_EPIN_SIZE);
 80059d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a10 <USBD_HID_Init+0xa4>)
 80059d6:	7819      	ldrb	r1, [r3, #0]
 80059d8:	2308      	movs	r3, #8
 80059da:	2203      	movs	r2, #3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 fcee 	bl	80073be <USBD_LL_OpenEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 1U;
 80059e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <USBD_HID_Init+0xa4>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	3324      	adds	r3, #36	@ 0x24
 80059f8:	2201      	movs	r2, #1
 80059fa:	801a      	strh	r2, [r3, #0]

  hhid->state = KEYBOARD_HID_IDLE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20001144 	.word	0x20001144
 8005a10:	200001aa 	.word	0x200001aa

08005a14 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_KEYBOARD_IN_EP);
 8005a20:	4b16      	ldr	r3, [pc, #88]	@ (8005a7c <USBD_HID_DeInit+0x68>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 fcef 	bl	800740a <USBD_LL_CloseEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 0U;
 8005a2c:	4b13      	ldr	r3, [pc, #76]	@ (8005a7c <USBD_HID_DeInit+0x68>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f003 020f 	and.w	r2, r3, #15
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	3324      	adds	r3, #36	@ 0x24
 8005a42:	2200      	movs	r2, #0
 8005a44:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = 0U;
 8005a46:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <USBD_HID_DeInit+0x68>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	f003 020f 	and.w	r2, r3, #15
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	3326      	adds	r3, #38	@ 0x26
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Keyboard != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Keyboard);
#endif
    pdev->pClassData_HID_Keyboard = NULL;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  }

  return (uint8_t)USBD_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	200001aa 	.word	0x200001aa

08005a80 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a90:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e0e8      	b.n	8005c76 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d046      	beq.n	8005b3e <USBD_HID_Setup+0xbe>
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	f040 80d8 	bne.w	8005c66 <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	785b      	ldrb	r3, [r3, #1]
 8005aba:	3b02      	subs	r3, #2
 8005abc:	2b09      	cmp	r3, #9
 8005abe:	d836      	bhi.n	8005b2e <USBD_HID_Setup+0xae>
 8005ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <USBD_HID_Setup+0x48>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005b1f 	.word	0x08005b1f
 8005acc:	08005aff 	.word	0x08005aff
 8005ad0:	08005b2f 	.word	0x08005b2f
 8005ad4:	08005b2f 	.word	0x08005b2f
 8005ad8:	08005b2f 	.word	0x08005b2f
 8005adc:	08005b2f 	.word	0x08005b2f
 8005ae0:	08005b2f 	.word	0x08005b2f
 8005ae4:	08005b2f 	.word	0x08005b2f
 8005ae8:	08005b0d 	.word	0x08005b0d
 8005aec:	08005af1 	.word	0x08005af1
    {
    case HID_KEYBOARD_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	885b      	ldrh	r3, [r3, #2]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]
      break;
 8005afc:	e01e      	b.n	8005b3c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 fa48 	bl	8006f9a <USBD_CtlSendData>
      break;
 8005b0a:	e017      	b.n	8005b3c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	885b      	ldrh	r3, [r3, #2]
 8005b10:	0a1b      	lsrs	r3, r3, #8
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	605a      	str	r2, [r3, #4]
      break;
 8005b1c:	e00e      	b.n	8005b3c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2201      	movs	r2, #1
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 fa37 	bl	8006f9a <USBD_CtlSendData>
      break;
 8005b2c:	e006      	b.n	8005b3c <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f001 f9c1 	bl	8006eb8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b36:	2303      	movs	r3, #3
 8005b38:	75fb      	strb	r3, [r7, #23]
      break;
 8005b3a:	bf00      	nop
    }
    break;
 8005b3c:	e09a      	b.n	8005c74 <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b0b      	cmp	r3, #11
 8005b44:	f200 8086 	bhi.w	8005c54 <USBD_HID_Setup+0x1d4>
 8005b48:	a201      	add	r2, pc, #4	@ (adr r2, 8005b50 <USBD_HID_Setup+0xd0>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005b81 	.word	0x08005b81
 8005b54:	08005c63 	.word	0x08005c63
 8005b58:	08005c55 	.word	0x08005c55
 8005b5c:	08005c55 	.word	0x08005c55
 8005b60:	08005c55 	.word	0x08005c55
 8005b64:	08005c55 	.word	0x08005c55
 8005b68:	08005bab 	.word	0x08005bab
 8005b6c:	08005c55 	.word	0x08005c55
 8005b70:	08005c55 	.word	0x08005c55
 8005b74:	08005c55 	.word	0x08005c55
 8005b78:	08005c03 	.word	0x08005c03
 8005b7c:	08005c2d 	.word	0x08005c2d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d107      	bne.n	8005b9c <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b8c:	f107 030a 	add.w	r3, r7, #10
 8005b90:	2202      	movs	r2, #2
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 fa00 	bl	8006f9a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005b9a:	e063      	b.n	8005c64 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 f98a 	bl	8006eb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba8:	e05c      	b.n	8005c64 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_KEYBOARD_REPORT_DESC)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	885b      	ldrh	r3, [r3, #2]
 8005bae:	0a1b      	lsrs	r3, r3, #8
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b22      	cmp	r3, #34	@ 0x22
 8005bb4:	d108      	bne.n	8005bc8 <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	88db      	ldrh	r3, [r3, #6]
 8005bba:	2bbb      	cmp	r3, #187	@ 0xbb
 8005bbc:	bf28      	it	cs
 8005bbe:	23bb      	movcs	r3, #187	@ 0xbb
 8005bc0:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_KEYBOARD_ReportDesc;
 8005bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c80 <USBD_HID_Setup+0x200>)
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	e015      	b.n	8005bf4 <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_KEYBOARD_DESCRIPTOR_TYPE)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	885b      	ldrh	r3, [r3, #2]
 8005bcc:	0a1b      	lsrs	r3, r3, #8
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b21      	cmp	r3, #33	@ 0x21
 8005bd2:	d108      	bne.n	8005be6 <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_KEYBOARD_Desc;
 8005bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c84 <USBD_HID_Setup+0x204>)
 8005bd6:	613b      	str	r3, [r7, #16]
        len = MIN(HID_KEYBOARD_DESC_SIZE, req->wLength);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	88db      	ldrh	r3, [r3, #6]
 8005bdc:	2b09      	cmp	r3, #9
 8005bde:	bf28      	it	cs
 8005be0:	2309      	movcs	r3, #9
 8005be2:	82bb      	strh	r3, [r7, #20]
 8005be4:	e006      	b.n	8005bf4 <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 f965 	bl	8006eb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	75fb      	strb	r3, [r7, #23]
        break;
 8005bf2:	e037      	b.n	8005c64 <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bf4:	8abb      	ldrh	r3, [r7, #20]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6939      	ldr	r1, [r7, #16]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 f9cd 	bl	8006f9a <USBD_CtlSendData>
      break;
 8005c00:	e030      	b.n	8005c64 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d107      	bne.n	8005c1e <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3308      	adds	r3, #8
 8005c12:	2201      	movs	r2, #1
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 f9bf 	bl	8006f9a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c1c:	e022      	b.n	8005c64 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 f949 	bl	8006eb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c26:	2303      	movs	r3, #3
 8005c28:	75fb      	strb	r3, [r7, #23]
      break;
 8005c2a:	e01b      	b.n	8005c64 <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d106      	bne.n	8005c46 <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	885b      	ldrh	r3, [r3, #2]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c44:	e00e      	b.n	8005c64 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 f935 	bl	8006eb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	75fb      	strb	r3, [r7, #23]
      break;
 8005c52:	e007      	b.n	8005c64 <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 f92e 	bl	8006eb8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c60:	e000      	b.n	8005c64 <USBD_HID_Setup+0x1e4>
      break;
 8005c62:	bf00      	nop
    }
    break;
 8005c64:	e006      	b.n	8005c74 <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 f925 	bl	8006eb8 <USBD_CtlError>
    ret = USBD_FAIL;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	75fb      	strb	r3, [r7, #23]
    break;
 8005c72:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000248 	.word	0x20000248
 8005c84:	20000230 	.word	0x20000230

08005c88 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2222      	movs	r2, #34	@ 0x22
 8005c94:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 8005c96:	4b03      	ldr	r3, [pc, #12]	@ (8005ca4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	200001e8 	.word	0x200001e8

08005ca8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgHSDesc);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2222      	movs	r2, #34	@ 0x22
 8005cb4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgHSDesc;
 8005cb6:	4b03      	ldr	r3, [pc, #12]	@ (8005cc4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	2000020c 	.word	0x2000020c

08005cc8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2222      	movs	r2, #34	@ 0x22
 8005cd4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 8005cd6:	4b03      	ldr	r3, [pc, #12]	@ (8005ce4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	200001e8 	.word	0x200001e8

08005ce8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard)->state = KEYBOARD_HID_IDLE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	220a      	movs	r2, #10
 8005d18:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005d1a:	4b03      	ldr	r3, [pc, #12]	@ (8005d28 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	2000023c 	.word	0x2000023c

08005d2c <USBD_Update_HID_KBD_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_KBD_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	4608      	mov	r0, r1
 8005d36:	4611      	mov	r1, r2
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	70fb      	strb	r3, [r7, #3]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	70bb      	strb	r3, [r7, #2]
 8005d42:	4613      	mov	r3, r2
 8005d44:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	330b      	adds	r3, #11
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3311      	adds	r3, #17
 8005d52:	787a      	ldrb	r2, [r7, #1]
 8005d54:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	331d      	adds	r3, #29
 8005d5a:	78ba      	ldrb	r2, [r7, #2]
 8005d5c:	701a      	strb	r2, [r3, #0]

  HID_KEYBOARD_IN_EP = in_ep;
 8005d5e:	4a07      	ldr	r2, [pc, #28]	@ (8005d7c <USBD_Update_HID_KBD_DESC+0x50>)
 8005d60:	78bb      	ldrb	r3, [r7, #2]
 8005d62:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_ITF_NBR = itf_no;
 8005d64:	4a06      	ldr	r2, [pc, #24]	@ (8005d80 <USBD_Update_HID_KBD_DESC+0x54>)
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_STR_DESC_IDX = str_idx;
 8005d6a:	4a06      	ldr	r2, [pc, #24]	@ (8005d84 <USBD_Update_HID_KBD_DESC+0x58>)
 8005d6c:	787b      	ldrb	r3, [r7, #1]
 8005d6e:	7013      	strb	r3, [r2, #0]
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	200001aa 	.word	0x200001aa
 8005d80:	20001140 	.word	0x20001140
 8005d84:	20001141 	.word	0x20001141

08005d88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e01b      	b.n	8005dd8 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	79fa      	ldrb	r2, [r7, #7]
 8005dca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f001 fa7d 	bl	80072cc <USBD_LL_Init>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e02d      	b.n	8005e54 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	7c1b      	ldrb	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d112      	bne.n	8005e2e <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01e      	beq.n	8005e52 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1c:	f107 020e 	add.w	r2, r7, #14
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	4602      	mov	r2, r0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 8005e2c:	e011      	b.n	8005e52 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e42:	f107 020e 	add.w	r2, r7, #14
 8005e46:	4610      	mov	r0, r2
 8005e48:	4798      	blx	r3
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 fa8f 	bl	8007388 <USBD_LL_Start>
 8005e6a:	4603      	mov	r3, r0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	460b      	mov	r3, r1
 8005e94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e96:	2303      	movs	r3, #3
 8005e98:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d009      	beq.n	8005eb8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	78fa      	ldrb	r2, [r7, #3]
 8005eae:	4611      	mov	r1, r2
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	4798      	blx	r3
  }

  return USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 ff9d 	bl	8006e44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005f18:	461a      	mov	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d01a      	beq.n	8005f64 <USBD_LL_SetupStage+0x72>
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d822      	bhi.n	8005f78 <USBD_LL_SetupStage+0x86>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <USBD_LL_SetupStage+0x4a>
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d00a      	beq.n	8005f50 <USBD_LL_SetupStage+0x5e>
 8005f3a:	e01d      	b.n	8005f78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa5d 	bl	8006404 <USBD_StdDevReq>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f4e:	e020      	b.n	8005f92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fac1 	bl	80064e0 <USBD_StdItfReq>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	73fb      	strb	r3, [r7, #15]
      break;
 8005f62:	e016      	b.n	8005f92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fb00 	bl	8006572 <USBD_StdEPReq>
 8005f72:	4603      	mov	r3, r0
 8005f74:	73fb      	strb	r3, [r7, #15]
      break;
 8005f76:	e00c      	b.n	8005f92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f001 fa5e 	bl	8007448 <USBD_LL_StallEP>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f90:	bf00      	nop
  }

  return ret;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005faa:	7afb      	ldrb	r3, [r7, #11]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d138      	bne.n	8006022 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005fb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d14a      	bne.n	8006058 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d913      	bls.n	8005ff6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	bf28      	it	cs
 8005fe8:	4613      	movcs	r3, r2
 8005fea:	461a      	mov	r2, r3
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f001 f81c 	bl	800702c <USBD_CtlContinueRx>
 8005ff4:	e030      	b.n	8006058 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d10b      	bne.n	800601a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f001 f817 	bl	800704e <USBD_CtlSendStatus>
 8006020:	e01a      	b.n	8006058 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b03      	cmp	r3, #3
 800602c:	d114      	bne.n	8006058 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00e      	beq.n	8006058 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	7afa      	ldrb	r2, [r7, #11]
 8006044:	4611      	mov	r1, r2
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	4798      	blx	r3
 800604a:	4603      	mov	r3, r0
 800604c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	e000      	b.n	800605a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b086      	sub	sp, #24
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	460b      	mov	r3, r1
 800606c:	607a      	str	r2, [r7, #4]
 800606e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006070:	7afb      	ldrb	r3, [r7, #11]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d16b      	bne.n	800614e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3314      	adds	r3, #20
 800607a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006082:	2b02      	cmp	r3, #2
 8006084:	d156      	bne.n	8006134 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	429a      	cmp	r2, r3
 8006090:	d914      	bls.n	80060bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	1ad2      	subs	r2, r2, r3
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	461a      	mov	r2, r3
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 ff91 	bl	8006fd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060ae:	2300      	movs	r3, #0
 80060b0:	2200      	movs	r2, #0
 80060b2:	2100      	movs	r1, #0
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f001 fa71 	bl	800759c <USBD_LL_PrepareReceive>
 80060ba:	e03b      	b.n	8006134 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d11c      	bne.n	8006102 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d316      	bcc.n	8006102 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060de:	429a      	cmp	r2, r3
 80060e0:	d20f      	bcs.n	8006102 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060e2:	2200      	movs	r2, #0
 80060e4:	2100      	movs	r1, #0
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 ff72 	bl	8006fd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060f4:	2300      	movs	r3, #0
 80060f6:	2200      	movs	r2, #0
 80060f8:	2100      	movs	r1, #0
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f001 fa4e 	bl	800759c <USBD_LL_PrepareReceive>
 8006100:	e018      	b.n	8006134 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b03      	cmp	r3, #3
 800610c:	d10b      	bne.n	8006126 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006126:	2180      	movs	r1, #128	@ 0x80
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f001 f98d 	bl	8007448 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 ffa0 	bl	8007074 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800613a:	2b01      	cmp	r3, #1
 800613c:	d122      	bne.n	8006184 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff fe98 	bl	8005e74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800614c:	e01a      	b.n	8006184 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b03      	cmp	r3, #3
 8006158:	d114      	bne.n	8006184 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00e      	beq.n	8006184 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	7afa      	ldrb	r2, [r7, #11]
 8006170:	4611      	mov	r1, r2
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	4798      	blx	r3
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	e000      	b.n	8006186 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80061be:	2303      	movs	r3, #3
 80061c0:	e02a      	b.n	8006218 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6852      	ldr	r2, [r2, #4]
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	4611      	mov	r1, r2
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061e2:	2340      	movs	r3, #64	@ 0x40
 80061e4:	2200      	movs	r2, #0
 80061e6:	2100      	movs	r1, #0
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 f8e8 	bl	80073be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2240      	movs	r2, #64	@ 0x40
 80061fa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061fe:	2340      	movs	r3, #64	@ 0x40
 8006200:	2200      	movs	r2, #0
 8006202:	2180      	movs	r1, #128	@ 0x80
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 f8da 	bl	80073be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2240      	movs	r2, #64	@ 0x40
 8006214:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	78fa      	ldrb	r2, [r7, #3]
 8006230:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800624e:	b2da      	uxtb	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2204      	movs	r2, #4
 800625a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b04      	cmp	r3, #4
 800627e:	d106      	bne.n	800628e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006286:	b2da      	uxtb	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e012      	b.n	80062d8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d10b      	bne.n	80062d6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e014      	b.n	8006324 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b03      	cmp	r3, #3
 8006304:	d10d      	bne.n	8006322 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	4611      	mov	r1, r2
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006342:	2303      	movs	r3, #3
 8006344:	e014      	b.n	8006370 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b03      	cmp	r3, #3
 8006350:	d10d      	bne.n	800636e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006366:	78fa      	ldrb	r2, [r7, #3]
 8006368:	4611      	mov	r1, r2
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6852      	ldr	r2, [r2, #4]
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	4611      	mov	r1, r2
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
  }

  return USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b087      	sub	sp, #28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	3301      	adds	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063e4:	8a3b      	ldrh	r3, [r7, #16]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	b21a      	sxth	r2, r3
 80063ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	b21b      	sxth	r3, r3
 80063f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063f4:	89fb      	ldrh	r3, [r7, #14]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
	...

08006404 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800641a:	2b40      	cmp	r3, #64	@ 0x40
 800641c:	d005      	beq.n	800642a <USBD_StdDevReq+0x26>
 800641e:	2b40      	cmp	r3, #64	@ 0x40
 8006420:	d853      	bhi.n	80064ca <USBD_StdDevReq+0xc6>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00b      	beq.n	800643e <USBD_StdDevReq+0x3a>
 8006426:	2b20      	cmp	r3, #32
 8006428:	d14f      	bne.n	80064ca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	e04a      	b.n	80064d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	2b09      	cmp	r3, #9
 8006444:	d83b      	bhi.n	80064be <USBD_StdDevReq+0xba>
 8006446:	a201      	add	r2, pc, #4	@ (adr r2, 800644c <USBD_StdDevReq+0x48>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	080064a1 	.word	0x080064a1
 8006450:	080064b5 	.word	0x080064b5
 8006454:	080064bf 	.word	0x080064bf
 8006458:	080064ab 	.word	0x080064ab
 800645c:	080064bf 	.word	0x080064bf
 8006460:	0800647f 	.word	0x0800647f
 8006464:	08006475 	.word	0x08006475
 8006468:	080064bf 	.word	0x080064bf
 800646c:	08006497 	.word	0x08006497
 8006470:	08006489 	.word	0x08006489
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9de 	bl	8006838 <USBD_GetDescriptor>
          break;
 800647c:	e024      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fb55 	bl	8006b30 <USBD_SetAddress>
          break;
 8006486:	e01f      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fb94 	bl	8006bb8 <USBD_SetConfig>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]
          break;
 8006494:	e018      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc33 	bl	8006d04 <USBD_GetConfig>
          break;
 800649e:	e013      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fc64 	bl	8006d70 <USBD_GetStatus>
          break;
 80064a8:	e00e      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fc93 	bl	8006dd8 <USBD_SetFeature>
          break;
 80064b2:	e009      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fca2 	bl	8006e00 <USBD_ClrFeature>
          break;
 80064bc:	e004      	b.n	80064c8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fcf9 	bl	8006eb8 <USBD_CtlError>
          break;
 80064c6:	bf00      	nop
      }
      break;
 80064c8:	e004      	b.n	80064d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fcf3 	bl	8006eb8 <USBD_CtlError>
      break;
 80064d2:	bf00      	nop
  }

  return ret;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop

080064e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064f6:	2b40      	cmp	r3, #64	@ 0x40
 80064f8:	d005      	beq.n	8006506 <USBD_StdItfReq+0x26>
 80064fa:	2b40      	cmp	r3, #64	@ 0x40
 80064fc:	d82f      	bhi.n	800655e <USBD_StdItfReq+0x7e>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <USBD_StdItfReq+0x26>
 8006502:	2b20      	cmp	r3, #32
 8006504:	d12b      	bne.n	800655e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800650c:	b2db      	uxtb	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	2b02      	cmp	r3, #2
 8006512:	d81d      	bhi.n	8006550 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	889b      	ldrh	r3, [r3, #4]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b0f      	cmp	r3, #15
 800651c:	d813      	bhi.n	8006546 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	88db      	ldrh	r3, [r3, #6]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d110      	bne.n	800655a <USBD_StdItfReq+0x7a>
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10d      	bne.n	800655a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fd85 	bl	800704e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006544:	e009      	b.n	800655a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fcb5 	bl	8006eb8 <USBD_CtlError>
          break;
 800654e:	e004      	b.n	800655a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fcb0 	bl	8006eb8 <USBD_CtlError>
          break;
 8006558:	e000      	b.n	800655c <USBD_StdItfReq+0x7c>
          break;
 800655a:	bf00      	nop
      }
      break;
 800655c:	e004      	b.n	8006568 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fca9 	bl	8006eb8 <USBD_CtlError>
      break;
 8006566:	bf00      	nop
  }

  return ret;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	889b      	ldrh	r3, [r3, #4]
 8006584:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800658e:	2b40      	cmp	r3, #64	@ 0x40
 8006590:	d007      	beq.n	80065a2 <USBD_StdEPReq+0x30>
 8006592:	2b40      	cmp	r3, #64	@ 0x40
 8006594:	f200 8145 	bhi.w	8006822 <USBD_StdEPReq+0x2b0>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <USBD_StdEPReq+0x44>
 800659c:	2b20      	cmp	r3, #32
 800659e:	f040 8140 	bne.w	8006822 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	4798      	blx	r3
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]
      break;
 80065b4:	e13a      	b.n	800682c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d007      	beq.n	80065ce <USBD_StdEPReq+0x5c>
 80065be:	2b03      	cmp	r3, #3
 80065c0:	f300 8129 	bgt.w	8006816 <USBD_StdEPReq+0x2a4>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d07f      	beq.n	80066c8 <USBD_StdEPReq+0x156>
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d03c      	beq.n	8006646 <USBD_StdEPReq+0xd4>
 80065cc:	e123      	b.n	8006816 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d002      	beq.n	80065e0 <USBD_StdEPReq+0x6e>
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d016      	beq.n	800660c <USBD_StdEPReq+0x9a>
 80065de:	e02c      	b.n	800663a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00d      	beq.n	8006602 <USBD_StdEPReq+0x90>
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2b80      	cmp	r3, #128	@ 0x80
 80065ea:	d00a      	beq.n	8006602 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 ff29 	bl	8007448 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065f6:	2180      	movs	r1, #128	@ 0x80
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 ff25 	bl	8007448 <USBD_LL_StallEP>
 80065fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006600:	e020      	b.n	8006644 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fc57 	bl	8006eb8 <USBD_CtlError>
              break;
 800660a:	e01b      	b.n	8006644 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	885b      	ldrh	r3, [r3, #2]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10e      	bne.n	8006632 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <USBD_StdEPReq+0xc0>
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	2b80      	cmp	r3, #128	@ 0x80
 800661e:	d008      	beq.n	8006632 <USBD_StdEPReq+0xc0>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	88db      	ldrh	r3, [r3, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 ff0b 	bl	8007448 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fd0b 	bl	800704e <USBD_CtlSendStatus>

              break;
 8006638:	e004      	b.n	8006644 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fc3b 	bl	8006eb8 <USBD_CtlError>
              break;
 8006642:	bf00      	nop
          }
          break;
 8006644:	e0ec      	b.n	8006820 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d002      	beq.n	8006658 <USBD_StdEPReq+0xe6>
 8006652:	2b03      	cmp	r3, #3
 8006654:	d016      	beq.n	8006684 <USBD_StdEPReq+0x112>
 8006656:	e030      	b.n	80066ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00d      	beq.n	800667a <USBD_StdEPReq+0x108>
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b80      	cmp	r3, #128	@ 0x80
 8006662:	d00a      	beq.n	800667a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 feed 	bl	8007448 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800666e:	2180      	movs	r1, #128	@ 0x80
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fee9 	bl	8007448 <USBD_LL_StallEP>
 8006676:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006678:	e025      	b.n	80066c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fc1b 	bl	8006eb8 <USBD_CtlError>
              break;
 8006682:	e020      	b.n	80066c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	885b      	ldrh	r3, [r3, #2]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d11b      	bne.n	80066c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fef3 	bl	8007486 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fcd4 	bl	800704e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80066b8:	e004      	b.n	80066c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fbfb 	bl	8006eb8 <USBD_CtlError>
              break;
 80066c2:	e000      	b.n	80066c6 <USBD_StdEPReq+0x154>
              break;
 80066c4:	bf00      	nop
          }
          break;
 80066c6:	e0ab      	b.n	8006820 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d002      	beq.n	80066da <USBD_StdEPReq+0x168>
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d032      	beq.n	800673e <USBD_StdEPReq+0x1cc>
 80066d8:	e097      	b.n	800680a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <USBD_StdEPReq+0x17e>
 80066e0:	7bbb      	ldrb	r3, [r7, #14]
 80066e2:	2b80      	cmp	r3, #128	@ 0x80
 80066e4:	d004      	beq.n	80066f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fbe5 	bl	8006eb8 <USBD_CtlError>
                break;
 80066ee:	e091      	b.n	8006814 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	da0b      	bge.n	8006710 <USBD_StdEPReq+0x19e>
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	3310      	adds	r3, #16
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4413      	add	r3, r2
 800670c:	3304      	adds	r3, #4
 800670e:	e00b      	b.n	8006728 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4413      	add	r3, r2
 8006726:	3304      	adds	r3, #4
 8006728:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2202      	movs	r2, #2
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fc2f 	bl	8006f9a <USBD_CtlSendData>
              break;
 800673c:	e06a      	b.n	8006814 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800673e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006742:	2b00      	cmp	r3, #0
 8006744:	da11      	bge.n	800676a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	f003 020f 	and.w	r2, r3, #15
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3324      	adds	r3, #36	@ 0x24
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d117      	bne.n	8006790 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fba8 	bl	8006eb8 <USBD_CtlError>
                  break;
 8006768:	e054      	b.n	8006814 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fb95 	bl	8006eb8 <USBD_CtlError>
                  break;
 800678e:	e041      	b.n	8006814 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006794:	2b00      	cmp	r3, #0
 8006796:	da0b      	bge.n	80067b0 <USBD_StdEPReq+0x23e>
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	3310      	adds	r3, #16
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	4413      	add	r3, r2
 80067ac:	3304      	adds	r3, #4
 80067ae:	e00b      	b.n	80067c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	3304      	adds	r3, #4
 80067c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <USBD_StdEPReq+0x264>
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	2b80      	cmp	r3, #128	@ 0x80
 80067d4:	d103      	bne.n	80067de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e00e      	b.n	80067fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fe6e 	bl	80074c4 <USBD_LL_IsStallEP>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e002      	b.n	80067fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2202      	movs	r2, #2
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fbc9 	bl	8006f9a <USBD_CtlSendData>
              break;
 8006808:	e004      	b.n	8006814 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fb53 	bl	8006eb8 <USBD_CtlError>
              break;
 8006812:	bf00      	nop
          }
          break;
 8006814:	e004      	b.n	8006820 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fb4d 	bl	8006eb8 <USBD_CtlError>
          break;
 800681e:	bf00      	nop
      }
      break;
 8006820:	e004      	b.n	800682c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fb47 	bl	8006eb8 <USBD_CtlError>
      break;
 800682a:	bf00      	nop
  }

  return ret;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	885b      	ldrh	r3, [r3, #2]
 8006852:	0a1b      	lsrs	r3, r3, #8
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	2b06      	cmp	r3, #6
 800685a:	f200 813b 	bhi.w	8006ad4 <USBD_GetDescriptor+0x29c>
 800685e:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <USBD_GetDescriptor+0x2c>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	08006881 	.word	0x08006881
 8006868:	08006899 	.word	0x08006899
 800686c:	080068d9 	.word	0x080068d9
 8006870:	08006ad5 	.word	0x08006ad5
 8006874:	08006ad5 	.word	0x08006ad5
 8006878:	08006a75 	.word	0x08006a75
 800687c:	08006aa1 	.word	0x08006aa1
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	7c12      	ldrb	r2, [r2, #16]
 800688c:	f107 0108 	add.w	r1, r7, #8
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
 8006894:	60f8      	str	r0, [r7, #12]
      break;
 8006896:	e125      	b.n	8006ae4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	7c1b      	ldrb	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10d      	bne.n	80068bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	f107 0208 	add.w	r2, r7, #8
 80068ac:	4610      	mov	r0, r2
 80068ae:	4798      	blx	r3
 80068b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3301      	adds	r3, #1
 80068b6:	2202      	movs	r2, #2
 80068b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068ba:	e113      	b.n	8006ae4 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	f107 0208 	add.w	r2, r7, #8
 80068c8:	4610      	mov	r0, r2
 80068ca:	4798      	blx	r3
 80068cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	2202      	movs	r2, #2
 80068d4:	701a      	strb	r2, [r3, #0]
      break;
 80068d6:	e105      	b.n	8006ae4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	885b      	ldrh	r3, [r3, #2]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b05      	cmp	r3, #5
 80068e0:	f200 80ac 	bhi.w	8006a3c <USBD_GetDescriptor+0x204>
 80068e4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <USBD_GetDescriptor+0xb4>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	08006905 	.word	0x08006905
 80068f0:	08006939 	.word	0x08006939
 80068f4:	0800696d 	.word	0x0800696d
 80068f8:	080069a1 	.word	0x080069a1
 80068fc:	080069d5 	.word	0x080069d5
 8006900:	08006a09 	.word	0x08006a09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00b      	beq.n	8006928 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	7c12      	ldrb	r2, [r2, #16]
 800691c:	f107 0108 	add.w	r1, r7, #8
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
 8006924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006926:	e0a4      	b.n	8006a72 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fac4 	bl	8006eb8 <USBD_CtlError>
            err++;
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	3301      	adds	r3, #1
 8006934:	72fb      	strb	r3, [r7, #11]
          break;
 8006936:	e09c      	b.n	8006a72 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7c12      	ldrb	r2, [r2, #16]
 8006950:	f107 0108 	add.w	r1, r7, #8
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800695a:	e08a      	b.n	8006a72 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 faaa 	bl	8006eb8 <USBD_CtlError>
            err++;
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	3301      	adds	r3, #1
 8006968:	72fb      	strb	r3, [r7, #11]
          break;
 800696a:	e082      	b.n	8006a72 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	7c12      	ldrb	r2, [r2, #16]
 8006984:	f107 0108 	add.w	r1, r7, #8
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800698e:	e070      	b.n	8006a72 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa90 	bl	8006eb8 <USBD_CtlError>
            err++;
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	3301      	adds	r3, #1
 800699c:	72fb      	strb	r3, [r7, #11]
          break;
 800699e:	e068      	b.n	8006a72 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	7c12      	ldrb	r2, [r2, #16]
 80069b8:	f107 0108 	add.w	r1, r7, #8
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
 80069c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069c2:	e056      	b.n	8006a72 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa76 	bl	8006eb8 <USBD_CtlError>
            err++;
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	3301      	adds	r3, #1
 80069d0:	72fb      	strb	r3, [r7, #11]
          break;
 80069d2:	e04e      	b.n	8006a72 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	7c12      	ldrb	r2, [r2, #16]
 80069ec:	f107 0108 	add.w	r1, r7, #8
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f6:	e03c      	b.n	8006a72 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fa5c 	bl	8006eb8 <USBD_CtlError>
            err++;
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	3301      	adds	r3, #1
 8006a04:	72fb      	strb	r3, [r7, #11]
          break;
 8006a06:	e034      	b.n	8006a72 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	7c12      	ldrb	r2, [r2, #16]
 8006a20:	f107 0108 	add.w	r1, r7, #8
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a2a:	e022      	b.n	8006a72 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa42 	bl	8006eb8 <USBD_CtlError>
            err++;
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	3301      	adds	r3, #1
 8006a38:	72fb      	strb	r3, [r7, #11]
          break;
 8006a3a:	e01a      	b.n	8006a72 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00c      	beq.n	8006a62 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	8852      	ldrh	r2, [r2, #2]
 8006a54:	b2d1      	uxtb	r1, r2
 8006a56:	f107 0208 	add.w	r2, r7, #8
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
 8006a5e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8006a60:	e006      	b.n	8006a70 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fa27 	bl	8006eb8 <USBD_CtlError>
            err++;
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	72fb      	strb	r3, [r7, #11]
          break;
 8006a70:	bf00      	nop
      }
      break;
 8006a72:	e037      	b.n	8006ae4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	7c1b      	ldrb	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d109      	bne.n	8006a90 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a84:	f107 0208 	add.w	r2, r7, #8
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4798      	blx	r3
 8006a8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a8e:	e029      	b.n	8006ae4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa10 	bl	8006eb8 <USBD_CtlError>
        err++;
 8006a98:	7afb      	ldrb	r3, [r7, #11]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	72fb      	strb	r3, [r7, #11]
      break;
 8006a9e:	e021      	b.n	8006ae4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	7c1b      	ldrb	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10d      	bne.n	8006ac4 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab0:	f107 0208 	add.w	r2, r7, #8
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	2207      	movs	r2, #7
 8006ac0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ac2:	e00f      	b.n	8006ae4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f9f6 	bl	8006eb8 <USBD_CtlError>
        err++;
 8006acc:	7afb      	ldrb	r3, [r7, #11]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad2:	e007      	b.n	8006ae4 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f9ee 	bl	8006eb8 <USBD_CtlError>
      err++;
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ae2:	bf00      	nop
  }

  if (err != 0U)
 8006ae4:	7afb      	ldrb	r3, [r7, #11]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d11e      	bne.n	8006b28 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	88db      	ldrh	r3, [r3, #6]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d016      	beq.n	8006b20 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8006af2:	893b      	ldrh	r3, [r7, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00e      	beq.n	8006b16 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	88da      	ldrh	r2, [r3, #6]
 8006afc:	893b      	ldrh	r3, [r7, #8]
 8006afe:	4293      	cmp	r3, r2
 8006b00:	bf28      	it	cs
 8006b02:	4613      	movcs	r3, r2
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b08:	893b      	ldrh	r3, [r7, #8]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68f9      	ldr	r1, [r7, #12]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa43 	bl	8006f9a <USBD_CtlSendData>
 8006b14:	e009      	b.n	8006b2a <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f9cd 	bl	8006eb8 <USBD_CtlError>
 8006b1e:	e004      	b.n	8006b2a <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fa94 	bl	800704e <USBD_CtlSendStatus>
 8006b26:	e000      	b.n	8006b2a <USBD_GetDescriptor+0x2f2>
    return;
 8006b28:	bf00      	nop
  }
}
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	889b      	ldrh	r3, [r3, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d131      	bne.n	8006ba6 <USBD_SetAddress+0x76>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	88db      	ldrh	r3, [r3, #6]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d12d      	bne.n	8006ba6 <USBD_SetAddress+0x76>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b50:	d829      	bhi.n	8006ba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	885b      	ldrh	r3, [r3, #2]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d104      	bne.n	8006b74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f9a3 	bl	8006eb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b72:	e01d      	b.n	8006bb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	7bfa      	ldrb	r2, [r7, #15]
 8006b78:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fccb 	bl	800751c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa61 	bl	800704e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2202      	movs	r2, #2
 8006b96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9a:	e009      	b.n	8006bb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba4:	e004      	b.n	8006bb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f985 	bl	8006eb8 <USBD_CtlError>
  }
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	885b      	ldrh	r3, [r3, #2]
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006bce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d905      	bls.n	8006be4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f96c 	bl	8006eb8 <USBD_CtlError>
    return USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e088      	b.n	8006cf6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d002      	beq.n	8006bf6 <USBD_SetConfig+0x3e>
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d025      	beq.n	8006c40 <USBD_SetConfig+0x88>
 8006bf4:	e071      	b.n	8006cda <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006bf6:	4b42      	ldr	r3, [pc, #264]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01c      	beq.n	8006c38 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006bfe:	4b40      	ldr	r3, [pc, #256]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c08:	4b3d      	ldr	r3, [pc, #244]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff f93b 	bl	8005e8a <USBD_SetClassConfig>
 8006c14:	4603      	mov	r3, r0
 8006c16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f949 	bl	8006eb8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c26:	e065      	b.n	8006cf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fa10 	bl	800704e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2203      	movs	r2, #3
 8006c32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c36:	e05d      	b.n	8006cf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa08 	bl	800704e <USBD_CtlSendStatus>
      break;
 8006c3e:	e059      	b.n	8006cf4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c40:	4b2f      	ldr	r3, [pc, #188]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d112      	bne.n	8006c6e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006c50:	4b2b      	ldr	r3, [pc, #172]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c5a:	4b29      	ldr	r3, [pc, #164]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff f92e 	bl	8005ec2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f9f1 	bl	800704e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c6c:	e042      	b.n	8006cf4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006c6e:	4b24      	ldr	r3, [pc, #144]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d02a      	beq.n	8006cd2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff f91c 	bl	8005ec2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c94:	4b1a      	ldr	r3, [pc, #104]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff f8f5 	bl	8005e8a <USBD_SetClassConfig>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00f      	beq.n	8006cca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f903 	bl	8006eb8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff f901 	bl	8005ec2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006cc8:	e014      	b.n	8006cf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f9bf 	bl	800704e <USBD_CtlSendStatus>
      break;
 8006cd0:	e010      	b.n	8006cf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f9bb 	bl	800704e <USBD_CtlSendStatus>
      break;
 8006cd8:	e00c      	b.n	8006cf4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f8eb 	bl	8006eb8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ce2:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <USBD_SetConfig+0x148>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff f8ea 	bl	8005ec2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf2:	bf00      	nop
  }

  return ret;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20001154 	.word	0x20001154

08006d04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	88db      	ldrh	r3, [r3, #6]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d004      	beq.n	8006d20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f8cd 	bl	8006eb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d1e:	e023      	b.n	8006d68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	dc02      	bgt.n	8006d32 <USBD_GetConfig+0x2e>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	dc03      	bgt.n	8006d38 <USBD_GetConfig+0x34>
 8006d30:	e015      	b.n	8006d5e <USBD_GetConfig+0x5a>
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d00b      	beq.n	8006d4e <USBD_GetConfig+0x4a>
 8006d36:	e012      	b.n	8006d5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3308      	adds	r3, #8
 8006d42:	2201      	movs	r2, #1
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f927 	bl	8006f9a <USBD_CtlSendData>
        break;
 8006d4c:	e00c      	b.n	8006d68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	2201      	movs	r2, #1
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f91f 	bl	8006f9a <USBD_CtlSendData>
        break;
 8006d5c:	e004      	b.n	8006d68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f8a9 	bl	8006eb8 <USBD_CtlError>
        break;
 8006d66:	bf00      	nop
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d81e      	bhi.n	8006dc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	88db      	ldrh	r3, [r3, #6]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d004      	beq.n	8006d9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f890 	bl	8006eb8 <USBD_CtlError>
        break;
 8006d98:	e01a      	b.n	8006dd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f043 0202 	orr.w	r2, r3, #2
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	330c      	adds	r3, #12
 8006dba:	2202      	movs	r2, #2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f8eb 	bl	8006f9a <USBD_CtlSendData>
      break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f875 	bl	8006eb8 <USBD_CtlError>
      break;
 8006dce:	bf00      	nop
  }
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	885b      	ldrh	r3, [r3, #2]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d106      	bne.n	8006df8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f92b 	bl	800704e <USBD_CtlSendStatus>
  }
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d80b      	bhi.n	8006e30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	885b      	ldrh	r3, [r3, #2]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d10c      	bne.n	8006e3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f910 	bl	800704e <USBD_CtlSendStatus>
      }
      break;
 8006e2e:	e004      	b.n	8006e3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f840 	bl	8006eb8 <USBD_CtlError>
      break;
 8006e38:	e000      	b.n	8006e3c <USBD_ClrFeature+0x3c>
      break;
 8006e3a:	bf00      	nop
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	781a      	ldrb	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff faa9 	bl	80063c6 <SWAPBYTE>
 8006e74:	4603      	mov	r3, r0
 8006e76:	461a      	mov	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff fa9c 	bl	80063c6 <SWAPBYTE>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	461a      	mov	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff fa8f 	bl	80063c6 <SWAPBYTE>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	461a      	mov	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	80da      	strh	r2, [r3, #6]
}
 8006eb0:	bf00      	nop
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ec2:	2180      	movs	r1, #128	@ 0x80
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fabf 	bl	8007448 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006eca:	2100      	movs	r1, #0
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fabb 	bl	8007448 <USBD_LL_StallEP>
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d036      	beq.n	8006f5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ef4:	6938      	ldr	r0, [r7, #16]
 8006ef6:	f000 f836 	bl	8006f66 <USBD_GetLen>
 8006efa:	4603      	mov	r3, r0
 8006efc:	3301      	adds	r3, #1
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	7812      	ldrb	r2, [r2, #0]
 8006f12:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	3301      	adds	r3, #1
 8006f18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	4413      	add	r3, r2
 8006f20:	2203      	movs	r2, #3
 8006f22:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	3301      	adds	r3, #1
 8006f28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f2a:	e013      	b.n	8006f54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	4413      	add	r3, r2
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	7812      	ldrb	r2, [r2, #0]
 8006f36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	613b      	str	r3, [r7, #16]
    idx++;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	3301      	adds	r3, #1
 8006f42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4413      	add	r3, r2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	3301      	adds	r3, #1
 8006f52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e7      	bne.n	8006f2c <USBD_GetString+0x52>
 8006f5c:	e000      	b.n	8006f60 <USBD_GetString+0x86>
    return;
 8006f5e:	bf00      	nop
  }
}
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f76:	e005      	b.n	8006f84 <USBD_GetLen+0x1e>
  {
    len++;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f5      	bne.n	8006f78 <USBD_GetLen+0x12>
  }

  return len;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 faca 	bl	800755a <USBD_LL_Transmit>

  return USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 fab9 	bl	800755a <USBD_LL_Transmit>

  return USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2203      	movs	r2, #3
 8007002:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	2100      	movs	r1, #0
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fabd 	bl	800759c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	2100      	movs	r1, #0
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 faac 	bl	800759c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2204      	movs	r2, #4
 800705a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800705e:	2300      	movs	r3, #0
 8007060:	2200      	movs	r2, #0
 8007062:	2100      	movs	r1, #0
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa78 	bl	800755a <USBD_LL_Transmit>

  return USBD_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2205      	movs	r2, #5
 8007080:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007084:	2300      	movs	r3, #0
 8007086:	2200      	movs	r2, #0
 8007088:	2100      	movs	r1, #0
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa86 	bl	800759c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	70fb      	strb	r3, [r7, #3]
 80070a6:	4613      	mov	r3, r2
 80070a8:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 80070aa:	883b      	ldrh	r3, [r7, #0]
 80070ac:	089b      	lsrs	r3, r3, #2
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	78fb      	ldrb	r3, [r7, #3]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fb fa45 	bl	8002544 <HAL_PCDEx_SetTxFiFo>
 80070ba:	4603      	mov	r3, r0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 80070d0:	887b      	ldrh	r3, [r7, #2]
 80070d2:	089b      	lsrs	r3, r3, #2
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7fb fa7a 	bl	80025d2 <HAL_PCDEx_SetRxFiFo>
 80070de:	4603      	mov	r3, r0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f7fe fef7 	bl	8005ef2 <USBD_LL_SetupStage>
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	4619      	mov	r1, r3
 8007136:	f7fe ff31 	bl	8005f9c <USBD_LL_DataOutStage>
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	4613      	mov	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	3320      	adds	r3, #32
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	78fb      	ldrb	r3, [r7, #3]
 8007168:	4619      	mov	r1, r3
 800716a:	f7fe ff7a 	bl	8006062 <USBD_LL_DataInStage>
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff f889 	bl	800629c <USBD_LL_SOF>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800719a:	2301      	movs	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	79db      	ldrb	r3, [r3, #7]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d102      	bne.n	80071ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 80071a6:	2301      	movs	r3, #1
 80071a8:	73fb      	strb	r3, [r7, #15]
 80071aa:	e008      	b.n	80071be <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	79db      	ldrb	r3, [r3, #7]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d102      	bne.n	80071ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]
 80071b8:	e001      	b.n	80071be <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 80071ba:	f7f9 fb33 	bl	8000824 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071c4:	7bfa      	ldrb	r2, [r7, #15]
 80071c6:	4611      	mov	r1, r2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff f829 	bl	8006220 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe ffda 	bl	800618e <USBD_LL_Reset>
}
 80071da:	bf00      	nop
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff f824 	bl	8006240 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800720a:	f043 0301 	orr.w	r3, r3, #1
 800720e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	7adb      	ldrb	r3, [r3, #11]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007218:	4b04      	ldr	r3, [pc, #16]	@ (800722c <HAL_PCD_SuspendCallback+0x48>)
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	4a03      	ldr	r2, [pc, #12]	@ (800722c <HAL_PCD_SuspendCallback+0x48>)
 800721e:	f043 0306 	orr.w	r3, r3, #6
 8007222:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	e000ed00 	.word	0xe000ed00

08007230 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff f814 	bl	800626c <USBD_LL_Resume>
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800725e:	78fa      	ldrb	r2, [r7, #3]
 8007260:	4611      	mov	r1, r2
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff f862 	bl	800632c <USBD_LL_IsoOUTIncomplete>
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007282:	78fa      	ldrb	r2, [r7, #3]
 8007284:	4611      	mov	r1, r2
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff f82a 	bl	80062e0 <USBD_LL_IsoINIncomplete>
}
 800728c:	bf00      	nop
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff f868 	bl	8006378 <USBD_LL_DevConnected>
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff f865 	bl	800638e <USBD_LL_DevDisconnected>
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 80072d4:	4b27      	ldr	r3, [pc, #156]	@ (8007374 <USBD_LL_Init+0xa8>)
 80072d6:	4a28      	ldr	r2, [pc, #160]	@ (8007378 <USBD_LL_Init+0xac>)
 80072d8:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d143      	bne.n	800736a <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 80072e2:	4b24      	ldr	r3, [pc, #144]	@ (8007374 <USBD_LL_Init+0xa8>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 80072ec:	4b21      	ldr	r3, [pc, #132]	@ (8007374 <USBD_LL_Init+0xa8>)
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 80072f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007374 <USBD_LL_Init+0xa8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff fee0 	bl	80070c4 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 8007304:	4b1b      	ldr	r3, [pc, #108]	@ (8007374 <USBD_LL_Init+0xa8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2240      	movs	r2, #64	@ 0x40
 800730a:	2100      	movs	r1, #0
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fec4 	bl	800709a <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_MOUSE == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_MOUSE_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
 8007312:	4b18      	ldr	r3, [pc, #96]	@ (8007374 <USBD_LL_Init+0xa8>)
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	4b19      	ldr	r3, [pc, #100]	@ (800737c <USBD_LL_Init+0xb0>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2240      	movs	r2, #64	@ 0x40
 8007322:	4619      	mov	r1, r3
 8007324:	f7ff feb9 	bl	800709a <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
 800732c:	e01a      	b.n	8007364 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800732e:	4b11      	ldr	r3, [pc, #68]	@ (8007374 <USBD_LL_Init+0xa8>)
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	4a12      	ldr	r2, [pc, #72]	@ (8007380 <USBD_LL_Init+0xb4>)
 8007336:	5cd3      	ldrb	r3, [r2, r3]
 8007338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2280      	movs	r2, #128	@ 0x80
 8007340:	4619      	mov	r1, r3
 8007342:	f7ff feaa 	bl	800709a <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 8007346:	4b0b      	ldr	r3, [pc, #44]	@ (8007374 <USBD_LL_Init+0xa8>)
 8007348:	6818      	ldr	r0, [r3, #0]
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	4a0d      	ldr	r2, [pc, #52]	@ (8007384 <USBD_LL_Init+0xb8>)
 800734e:	5cd3      	ldrb	r3, [r2, r3]
 8007350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2240      	movs	r2, #64	@ 0x40
 8007358:	4619      	mov	r1, r3
 800735a:	f7ff fe9e 	bl	800709a <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	3301      	adds	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0e1      	beq.n	800732e <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20001158 	.word	0x20001158
 8007378:	20000378 	.word	0x20000378
 800737c:	200001aa 	.word	0x200001aa
 8007380:	20000e04 	.word	0x20000e04
 8007384:	20000e0c 	.word	0x20000e0c

08007388 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800739e:	4618      	mov	r0, r3
 80073a0:	f7f9 fff0 	bl	8001384 <HAL_PCD_Start>
 80073a4:	4603      	mov	r3, r0
 80073a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 f92a 	bl	8007604 <USBD_Get_USB_Status>
 80073b0:	4603      	mov	r3, r0
 80073b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	4608      	mov	r0, r1
 80073c8:	4611      	mov	r1, r2
 80073ca:	461a      	mov	r2, r3
 80073cc:	4603      	mov	r3, r0
 80073ce:	70fb      	strb	r3, [r7, #3]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70bb      	strb	r3, [r7, #2]
 80073d4:	4613      	mov	r3, r2
 80073d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 80073e6:	78bb      	ldrb	r3, [r7, #2]
 80073e8:	883a      	ldrh	r2, [r7, #0]
 80073ea:	78f9      	ldrb	r1, [r7, #3]
 80073ec:	f7fa fcc4 	bl	8001d78 <HAL_PCD_EP_Open>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 f904 	bl	8007604 <USBD_Get_USB_Status>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007400:	7bbb      	ldrb	r3, [r7, #14]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8007424:	78fa      	ldrb	r2, [r7, #3]
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f7fa fd0f 	bl	8001e4c <HAL_PCD_EP_Close>
 800742e:	4603      	mov	r3, r0
 8007430:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	4618      	mov	r0, r3
 8007436:	f000 f8e5 	bl	8007604 <USBD_Get_USB_Status>
 800743a:	4603      	mov	r3, r0
 800743c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800743e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8007462:	78fa      	ldrb	r2, [r7, #3]
 8007464:	4611      	mov	r1, r2
 8007466:	4618      	mov	r0, r3
 8007468:	f7fa fdc7 	bl	8001ffa <HAL_PCD_EP_SetStall>
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	4618      	mov	r0, r3
 8007474:	f000 f8c6 	bl	8007604 <USBD_Get_USB_Status>
 8007478:	4603      	mov	r3, r0
 800747a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800747c:	7bbb      	ldrb	r3, [r7, #14]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	4611      	mov	r1, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fa fe0b 	bl	80020c0 <HAL_PCD_EP_ClrStall>
 80074aa:	4603      	mov	r3, r0
 80074ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 f8a7 	bl	8007604 <USBD_Get_USB_Status>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80074d6:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 80074d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	da0b      	bge.n	80074f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074e6:	68f9      	ldr	r1, [r7, #12]
 80074e8:	4613      	mov	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	3316      	adds	r3, #22
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	e00b      	b.n	8007510 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074fe:	68f9      	ldr	r1, [r7, #12]
 8007500:	4613      	mov	r3, r2
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800750e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	4611      	mov	r1, r2
 800753a:	4618      	mov	r0, r3
 800753c:	f7fa fbf8 	bl	8001d30 <HAL_PCD_SetAddress>
 8007540:	4603      	mov	r3, r0
 8007542:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 f85c 	bl	8007604 <USBD_Get_USB_Status>
 800754c:	4603      	mov	r3, r0
 800754e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007550:	7bbb      	ldrb	r3, [r7, #14]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
 8007566:	460b      	mov	r3, r1
 8007568:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 8007578:	7af9      	ldrb	r1, [r7, #11]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	f7fa fd02 	bl	8001f86 <HAL_PCD_EP_Transmit>
 8007582:	4603      	mov	r3, r0
 8007584:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f83b 	bl	8007604 <USBD_Get_USB_Status>
 800758e:	4603      	mov	r3, r0
 8007590:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007592:	7dbb      	ldrb	r3, [r7, #22]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	607a      	str	r2, [r7, #4]
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	460b      	mov	r3, r1
 80075aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 80075ba:	7af9      	ldrb	r1, [r7, #11]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	f7fa fc8e 	bl	8001ee0 <HAL_PCD_EP_Receive>
 80075c4:	4603      	mov	r3, r0
 80075c6:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f81a 	bl	8007604 <USBD_Get_USB_Status>
 80075d0:	4603      	mov	r3, r0
 80075d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80075f0:	78fa      	ldrb	r2, [r7, #3]
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fa fcae 	bl	8001f56 <HAL_PCD_EP_GetRxCount>
 80075fa:	4603      	mov	r3, r0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	2b03      	cmp	r3, #3
 8007616:	d817      	bhi.n	8007648 <USBD_Get_USB_Status+0x44>
 8007618:	a201      	add	r2, pc, #4	@ (adr r2, 8007620 <USBD_Get_USB_Status+0x1c>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	08007631 	.word	0x08007631
 8007624:	08007637 	.word	0x08007637
 8007628:	0800763d 	.word	0x0800763d
 800762c:	08007643 	.word	0x08007643
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
    break;
 8007634:	e00b      	b.n	800764e <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 8007636:	2303      	movs	r3, #3
 8007638:	73fb      	strb	r3, [r7, #15]
    break;
 800763a:	e008      	b.n	800764e <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800763c:	2301      	movs	r3, #1
 800763e:	73fb      	strb	r3, [r7, #15]
    break;
 8007640:	e005      	b.n	800764e <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 8007642:	2303      	movs	r3, #3
 8007644:	73fb      	strb	r3, [r7, #15]
    break;
 8007646:	e002      	b.n	800764e <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8007648:	2303      	movs	r3, #3
 800764a:	73fb      	strb	r3, [r7, #15]
    break;
 800764c:	bf00      	nop
  }
  return usb_status;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <sniprintf>:
 800765c:	b40c      	push	{r2, r3}
 800765e:	b530      	push	{r4, r5, lr}
 8007660:	4b17      	ldr	r3, [pc, #92]	@ (80076c0 <sniprintf+0x64>)
 8007662:	1e0c      	subs	r4, r1, #0
 8007664:	681d      	ldr	r5, [r3, #0]
 8007666:	b09d      	sub	sp, #116	@ 0x74
 8007668:	da08      	bge.n	800767c <sniprintf+0x20>
 800766a:	238b      	movs	r3, #139	@ 0x8b
 800766c:	602b      	str	r3, [r5, #0]
 800766e:	f04f 30ff 	mov.w	r0, #4294967295
 8007672:	b01d      	add	sp, #116	@ 0x74
 8007674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007678:	b002      	add	sp, #8
 800767a:	4770      	bx	lr
 800767c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007680:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007684:	bf14      	ite	ne
 8007686:	f104 33ff 	addne.w	r3, r4, #4294967295
 800768a:	4623      	moveq	r3, r4
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	9307      	str	r3, [sp, #28]
 8007690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007694:	9002      	str	r0, [sp, #8]
 8007696:	9006      	str	r0, [sp, #24]
 8007698:	f8ad 3016 	strh.w	r3, [sp, #22]
 800769c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800769e:	ab21      	add	r3, sp, #132	@ 0x84
 80076a0:	a902      	add	r1, sp, #8
 80076a2:	4628      	mov	r0, r5
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	f000 f9c9 	bl	8007a3c <_svfiprintf_r>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	bfbc      	itt	lt
 80076ae:	238b      	movlt	r3, #139	@ 0x8b
 80076b0:	602b      	strlt	r3, [r5, #0]
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	d0dd      	beq.n	8007672 <sniprintf+0x16>
 80076b6:	9b02      	ldr	r3, [sp, #8]
 80076b8:	2200      	movs	r2, #0
 80076ba:	701a      	strb	r2, [r3, #0]
 80076bc:	e7d9      	b.n	8007672 <sniprintf+0x16>
 80076be:	bf00      	nop
 80076c0:	20000304 	.word	0x20000304

080076c4 <memset>:
 80076c4:	4402      	add	r2, r0
 80076c6:	4603      	mov	r3, r0
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d100      	bne.n	80076ce <memset+0xa>
 80076cc:	4770      	bx	lr
 80076ce:	f803 1b01 	strb.w	r1, [r3], #1
 80076d2:	e7f9      	b.n	80076c8 <memset+0x4>

080076d4 <_setlocale_r>:
 80076d4:	b510      	push	{r4, lr}
 80076d6:	4614      	mov	r4, r2
 80076d8:	b122      	cbz	r2, 80076e4 <_setlocale_r+0x10>
 80076da:	490a      	ldr	r1, [pc, #40]	@ (8007704 <_setlocale_r+0x30>)
 80076dc:	4610      	mov	r0, r2
 80076de:	f7f8 fd7f 	bl	80001e0 <strcmp>
 80076e2:	b908      	cbnz	r0, 80076e8 <_setlocale_r+0x14>
 80076e4:	4808      	ldr	r0, [pc, #32]	@ (8007708 <_setlocale_r+0x34>)
 80076e6:	bd10      	pop	{r4, pc}
 80076e8:	4907      	ldr	r1, [pc, #28]	@ (8007708 <_setlocale_r+0x34>)
 80076ea:	4620      	mov	r0, r4
 80076ec:	f7f8 fd78 	bl	80001e0 <strcmp>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d0f7      	beq.n	80076e4 <_setlocale_r+0x10>
 80076f4:	4905      	ldr	r1, [pc, #20]	@ (800770c <_setlocale_r+0x38>)
 80076f6:	4620      	mov	r0, r4
 80076f8:	f7f8 fd72 	bl	80001e0 <strcmp>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d0f1      	beq.n	80076e4 <_setlocale_r+0x10>
 8007700:	2000      	movs	r0, #0
 8007702:	e7f0      	b.n	80076e6 <_setlocale_r+0x12>
 8007704:	0800847a 	.word	0x0800847a
 8007708:	08008478 	.word	0x08008478
 800770c:	08008485 	.word	0x08008485

08007710 <setlocale>:
 8007710:	4b02      	ldr	r3, [pc, #8]	@ (800771c <setlocale+0xc>)
 8007712:	460a      	mov	r2, r1
 8007714:	4601      	mov	r1, r0
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	f7ff bfdc 	b.w	80076d4 <_setlocale_r>
 800771c:	20000304 	.word	0x20000304

08007720 <__errno>:
 8007720:	4b01      	ldr	r3, [pc, #4]	@ (8007728 <__errno+0x8>)
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20000304 	.word	0x20000304

0800772c <__libc_init_array>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4d0d      	ldr	r5, [pc, #52]	@ (8007764 <__libc_init_array+0x38>)
 8007730:	4c0d      	ldr	r4, [pc, #52]	@ (8007768 <__libc_init_array+0x3c>)
 8007732:	1b64      	subs	r4, r4, r5
 8007734:	10a4      	asrs	r4, r4, #2
 8007736:	2600      	movs	r6, #0
 8007738:	42a6      	cmp	r6, r4
 800773a:	d109      	bne.n	8007750 <__libc_init_array+0x24>
 800773c:	4d0b      	ldr	r5, [pc, #44]	@ (800776c <__libc_init_array+0x40>)
 800773e:	4c0c      	ldr	r4, [pc, #48]	@ (8007770 <__libc_init_array+0x44>)
 8007740:	f000 fc66 	bl	8008010 <_init>
 8007744:	1b64      	subs	r4, r4, r5
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	2600      	movs	r6, #0
 800774a:	42a6      	cmp	r6, r4
 800774c:	d105      	bne.n	800775a <__libc_init_array+0x2e>
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	f855 3b04 	ldr.w	r3, [r5], #4
 8007754:	4798      	blx	r3
 8007756:	3601      	adds	r6, #1
 8007758:	e7ee      	b.n	8007738 <__libc_init_array+0xc>
 800775a:	f855 3b04 	ldr.w	r3, [r5], #4
 800775e:	4798      	blx	r3
 8007760:	3601      	adds	r6, #1
 8007762:	e7f2      	b.n	800774a <__libc_init_array+0x1e>
 8007764:	080084bc 	.word	0x080084bc
 8007768:	080084bc 	.word	0x080084bc
 800776c:	080084bc 	.word	0x080084bc
 8007770:	080084c0 	.word	0x080084c0

08007774 <__retarget_lock_acquire_recursive>:
 8007774:	4770      	bx	lr

08007776 <__retarget_lock_release_recursive>:
 8007776:	4770      	bx	lr

08007778 <memcpy>:
 8007778:	440a      	add	r2, r1
 800777a:	4291      	cmp	r1, r2
 800777c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007780:	d100      	bne.n	8007784 <memcpy+0xc>
 8007782:	4770      	bx	lr
 8007784:	b510      	push	{r4, lr}
 8007786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800778e:	4291      	cmp	r1, r2
 8007790:	d1f9      	bne.n	8007786 <memcpy+0xe>
 8007792:	bd10      	pop	{r4, pc}

08007794 <_free_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4605      	mov	r5, r0
 8007798:	2900      	cmp	r1, #0
 800779a:	d041      	beq.n	8007820 <_free_r+0x8c>
 800779c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a0:	1f0c      	subs	r4, r1, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfb8      	it	lt
 80077a6:	18e4      	addlt	r4, r4, r3
 80077a8:	f000 f8e0 	bl	800796c <__malloc_lock>
 80077ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007824 <_free_r+0x90>)
 80077ae:	6813      	ldr	r3, [r2, #0]
 80077b0:	b933      	cbnz	r3, 80077c0 <_free_r+0x2c>
 80077b2:	6063      	str	r3, [r4, #4]
 80077b4:	6014      	str	r4, [r2, #0]
 80077b6:	4628      	mov	r0, r5
 80077b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077bc:	f000 b8dc 	b.w	8007978 <__malloc_unlock>
 80077c0:	42a3      	cmp	r3, r4
 80077c2:	d908      	bls.n	80077d6 <_free_r+0x42>
 80077c4:	6820      	ldr	r0, [r4, #0]
 80077c6:	1821      	adds	r1, r4, r0
 80077c8:	428b      	cmp	r3, r1
 80077ca:	bf01      	itttt	eq
 80077cc:	6819      	ldreq	r1, [r3, #0]
 80077ce:	685b      	ldreq	r3, [r3, #4]
 80077d0:	1809      	addeq	r1, r1, r0
 80077d2:	6021      	streq	r1, [r4, #0]
 80077d4:	e7ed      	b.n	80077b2 <_free_r+0x1e>
 80077d6:	461a      	mov	r2, r3
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	b10b      	cbz	r3, 80077e0 <_free_r+0x4c>
 80077dc:	42a3      	cmp	r3, r4
 80077de:	d9fa      	bls.n	80077d6 <_free_r+0x42>
 80077e0:	6811      	ldr	r1, [r2, #0]
 80077e2:	1850      	adds	r0, r2, r1
 80077e4:	42a0      	cmp	r0, r4
 80077e6:	d10b      	bne.n	8007800 <_free_r+0x6c>
 80077e8:	6820      	ldr	r0, [r4, #0]
 80077ea:	4401      	add	r1, r0
 80077ec:	1850      	adds	r0, r2, r1
 80077ee:	4283      	cmp	r3, r0
 80077f0:	6011      	str	r1, [r2, #0]
 80077f2:	d1e0      	bne.n	80077b6 <_free_r+0x22>
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	6053      	str	r3, [r2, #4]
 80077fa:	4408      	add	r0, r1
 80077fc:	6010      	str	r0, [r2, #0]
 80077fe:	e7da      	b.n	80077b6 <_free_r+0x22>
 8007800:	d902      	bls.n	8007808 <_free_r+0x74>
 8007802:	230c      	movs	r3, #12
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	e7d6      	b.n	80077b6 <_free_r+0x22>
 8007808:	6820      	ldr	r0, [r4, #0]
 800780a:	1821      	adds	r1, r4, r0
 800780c:	428b      	cmp	r3, r1
 800780e:	bf04      	itt	eq
 8007810:	6819      	ldreq	r1, [r3, #0]
 8007812:	685b      	ldreq	r3, [r3, #4]
 8007814:	6063      	str	r3, [r4, #4]
 8007816:	bf04      	itt	eq
 8007818:	1809      	addeq	r1, r1, r0
 800781a:	6021      	streq	r1, [r4, #0]
 800781c:	6054      	str	r4, [r2, #4]
 800781e:	e7ca      	b.n	80077b6 <_free_r+0x22>
 8007820:	bd38      	pop	{r3, r4, r5, pc}
 8007822:	bf00      	nop
 8007824:	200012a0 	.word	0x200012a0

08007828 <sbrk_aligned>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	4e0f      	ldr	r6, [pc, #60]	@ (8007868 <sbrk_aligned+0x40>)
 800782c:	460c      	mov	r4, r1
 800782e:	6831      	ldr	r1, [r6, #0]
 8007830:	4605      	mov	r5, r0
 8007832:	b911      	cbnz	r1, 800783a <sbrk_aligned+0x12>
 8007834:	f000 fba6 	bl	8007f84 <_sbrk_r>
 8007838:	6030      	str	r0, [r6, #0]
 800783a:	4621      	mov	r1, r4
 800783c:	4628      	mov	r0, r5
 800783e:	f000 fba1 	bl	8007f84 <_sbrk_r>
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	d103      	bne.n	800784e <sbrk_aligned+0x26>
 8007846:	f04f 34ff 	mov.w	r4, #4294967295
 800784a:	4620      	mov	r0, r4
 800784c:	bd70      	pop	{r4, r5, r6, pc}
 800784e:	1cc4      	adds	r4, r0, #3
 8007850:	f024 0403 	bic.w	r4, r4, #3
 8007854:	42a0      	cmp	r0, r4
 8007856:	d0f8      	beq.n	800784a <sbrk_aligned+0x22>
 8007858:	1a21      	subs	r1, r4, r0
 800785a:	4628      	mov	r0, r5
 800785c:	f000 fb92 	bl	8007f84 <_sbrk_r>
 8007860:	3001      	adds	r0, #1
 8007862:	d1f2      	bne.n	800784a <sbrk_aligned+0x22>
 8007864:	e7ef      	b.n	8007846 <sbrk_aligned+0x1e>
 8007866:	bf00      	nop
 8007868:	2000129c 	.word	0x2000129c

0800786c <_malloc_r>:
 800786c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007870:	1ccd      	adds	r5, r1, #3
 8007872:	f025 0503 	bic.w	r5, r5, #3
 8007876:	3508      	adds	r5, #8
 8007878:	2d0c      	cmp	r5, #12
 800787a:	bf38      	it	cc
 800787c:	250c      	movcc	r5, #12
 800787e:	2d00      	cmp	r5, #0
 8007880:	4606      	mov	r6, r0
 8007882:	db01      	blt.n	8007888 <_malloc_r+0x1c>
 8007884:	42a9      	cmp	r1, r5
 8007886:	d904      	bls.n	8007892 <_malloc_r+0x26>
 8007888:	230c      	movs	r3, #12
 800788a:	6033      	str	r3, [r6, #0]
 800788c:	2000      	movs	r0, #0
 800788e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007892:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007968 <_malloc_r+0xfc>
 8007896:	f000 f869 	bl	800796c <__malloc_lock>
 800789a:	f8d8 3000 	ldr.w	r3, [r8]
 800789e:	461c      	mov	r4, r3
 80078a0:	bb44      	cbnz	r4, 80078f4 <_malloc_r+0x88>
 80078a2:	4629      	mov	r1, r5
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff ffbf 	bl	8007828 <sbrk_aligned>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	4604      	mov	r4, r0
 80078ae:	d158      	bne.n	8007962 <_malloc_r+0xf6>
 80078b0:	f8d8 4000 	ldr.w	r4, [r8]
 80078b4:	4627      	mov	r7, r4
 80078b6:	2f00      	cmp	r7, #0
 80078b8:	d143      	bne.n	8007942 <_malloc_r+0xd6>
 80078ba:	2c00      	cmp	r4, #0
 80078bc:	d04b      	beq.n	8007956 <_malloc_r+0xea>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	4639      	mov	r1, r7
 80078c2:	4630      	mov	r0, r6
 80078c4:	eb04 0903 	add.w	r9, r4, r3
 80078c8:	f000 fb5c 	bl	8007f84 <_sbrk_r>
 80078cc:	4581      	cmp	r9, r0
 80078ce:	d142      	bne.n	8007956 <_malloc_r+0xea>
 80078d0:	6821      	ldr	r1, [r4, #0]
 80078d2:	1a6d      	subs	r5, r5, r1
 80078d4:	4629      	mov	r1, r5
 80078d6:	4630      	mov	r0, r6
 80078d8:	f7ff ffa6 	bl	8007828 <sbrk_aligned>
 80078dc:	3001      	adds	r0, #1
 80078de:	d03a      	beq.n	8007956 <_malloc_r+0xea>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	442b      	add	r3, r5
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	f8d8 3000 	ldr.w	r3, [r8]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	bb62      	cbnz	r2, 8007948 <_malloc_r+0xdc>
 80078ee:	f8c8 7000 	str.w	r7, [r8]
 80078f2:	e00f      	b.n	8007914 <_malloc_r+0xa8>
 80078f4:	6822      	ldr	r2, [r4, #0]
 80078f6:	1b52      	subs	r2, r2, r5
 80078f8:	d420      	bmi.n	800793c <_malloc_r+0xd0>
 80078fa:	2a0b      	cmp	r2, #11
 80078fc:	d917      	bls.n	800792e <_malloc_r+0xc2>
 80078fe:	1961      	adds	r1, r4, r5
 8007900:	42a3      	cmp	r3, r4
 8007902:	6025      	str	r5, [r4, #0]
 8007904:	bf18      	it	ne
 8007906:	6059      	strne	r1, [r3, #4]
 8007908:	6863      	ldr	r3, [r4, #4]
 800790a:	bf08      	it	eq
 800790c:	f8c8 1000 	streq.w	r1, [r8]
 8007910:	5162      	str	r2, [r4, r5]
 8007912:	604b      	str	r3, [r1, #4]
 8007914:	4630      	mov	r0, r6
 8007916:	f000 f82f 	bl	8007978 <__malloc_unlock>
 800791a:	f104 000b 	add.w	r0, r4, #11
 800791e:	1d23      	adds	r3, r4, #4
 8007920:	f020 0007 	bic.w	r0, r0, #7
 8007924:	1ac2      	subs	r2, r0, r3
 8007926:	bf1c      	itt	ne
 8007928:	1a1b      	subne	r3, r3, r0
 800792a:	50a3      	strne	r3, [r4, r2]
 800792c:	e7af      	b.n	800788e <_malloc_r+0x22>
 800792e:	6862      	ldr	r2, [r4, #4]
 8007930:	42a3      	cmp	r3, r4
 8007932:	bf0c      	ite	eq
 8007934:	f8c8 2000 	streq.w	r2, [r8]
 8007938:	605a      	strne	r2, [r3, #4]
 800793a:	e7eb      	b.n	8007914 <_malloc_r+0xa8>
 800793c:	4623      	mov	r3, r4
 800793e:	6864      	ldr	r4, [r4, #4]
 8007940:	e7ae      	b.n	80078a0 <_malloc_r+0x34>
 8007942:	463c      	mov	r4, r7
 8007944:	687f      	ldr	r7, [r7, #4]
 8007946:	e7b6      	b.n	80078b6 <_malloc_r+0x4a>
 8007948:	461a      	mov	r2, r3
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	42a3      	cmp	r3, r4
 800794e:	d1fb      	bne.n	8007948 <_malloc_r+0xdc>
 8007950:	2300      	movs	r3, #0
 8007952:	6053      	str	r3, [r2, #4]
 8007954:	e7de      	b.n	8007914 <_malloc_r+0xa8>
 8007956:	230c      	movs	r3, #12
 8007958:	6033      	str	r3, [r6, #0]
 800795a:	4630      	mov	r0, r6
 800795c:	f000 f80c 	bl	8007978 <__malloc_unlock>
 8007960:	e794      	b.n	800788c <_malloc_r+0x20>
 8007962:	6005      	str	r5, [r0, #0]
 8007964:	e7d6      	b.n	8007914 <_malloc_r+0xa8>
 8007966:	bf00      	nop
 8007968:	200012a0 	.word	0x200012a0

0800796c <__malloc_lock>:
 800796c:	4801      	ldr	r0, [pc, #4]	@ (8007974 <__malloc_lock+0x8>)
 800796e:	f7ff bf01 	b.w	8007774 <__retarget_lock_acquire_recursive>
 8007972:	bf00      	nop
 8007974:	20001298 	.word	0x20001298

08007978 <__malloc_unlock>:
 8007978:	4801      	ldr	r0, [pc, #4]	@ (8007980 <__malloc_unlock+0x8>)
 800797a:	f7ff befc 	b.w	8007776 <__retarget_lock_release_recursive>
 800797e:	bf00      	nop
 8007980:	20001298 	.word	0x20001298

08007984 <__ssputs_r>:
 8007984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007988:	688e      	ldr	r6, [r1, #8]
 800798a:	461f      	mov	r7, r3
 800798c:	42be      	cmp	r6, r7
 800798e:	680b      	ldr	r3, [r1, #0]
 8007990:	4682      	mov	sl, r0
 8007992:	460c      	mov	r4, r1
 8007994:	4690      	mov	r8, r2
 8007996:	d82d      	bhi.n	80079f4 <__ssputs_r+0x70>
 8007998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800799c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079a0:	d026      	beq.n	80079f0 <__ssputs_r+0x6c>
 80079a2:	6965      	ldr	r5, [r4, #20]
 80079a4:	6909      	ldr	r1, [r1, #16]
 80079a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079aa:	eba3 0901 	sub.w	r9, r3, r1
 80079ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079b2:	1c7b      	adds	r3, r7, #1
 80079b4:	444b      	add	r3, r9
 80079b6:	106d      	asrs	r5, r5, #1
 80079b8:	429d      	cmp	r5, r3
 80079ba:	bf38      	it	cc
 80079bc:	461d      	movcc	r5, r3
 80079be:	0553      	lsls	r3, r2, #21
 80079c0:	d527      	bpl.n	8007a12 <__ssputs_r+0x8e>
 80079c2:	4629      	mov	r1, r5
 80079c4:	f7ff ff52 	bl	800786c <_malloc_r>
 80079c8:	4606      	mov	r6, r0
 80079ca:	b360      	cbz	r0, 8007a26 <__ssputs_r+0xa2>
 80079cc:	6921      	ldr	r1, [r4, #16]
 80079ce:	464a      	mov	r2, r9
 80079d0:	f7ff fed2 	bl	8007778 <memcpy>
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079de:	81a3      	strh	r3, [r4, #12]
 80079e0:	6126      	str	r6, [r4, #16]
 80079e2:	6165      	str	r5, [r4, #20]
 80079e4:	444e      	add	r6, r9
 80079e6:	eba5 0509 	sub.w	r5, r5, r9
 80079ea:	6026      	str	r6, [r4, #0]
 80079ec:	60a5      	str	r5, [r4, #8]
 80079ee:	463e      	mov	r6, r7
 80079f0:	42be      	cmp	r6, r7
 80079f2:	d900      	bls.n	80079f6 <__ssputs_r+0x72>
 80079f4:	463e      	mov	r6, r7
 80079f6:	6820      	ldr	r0, [r4, #0]
 80079f8:	4632      	mov	r2, r6
 80079fa:	4641      	mov	r1, r8
 80079fc:	f000 faa8 	bl	8007f50 <memmove>
 8007a00:	68a3      	ldr	r3, [r4, #8]
 8007a02:	1b9b      	subs	r3, r3, r6
 8007a04:	60a3      	str	r3, [r4, #8]
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	4433      	add	r3, r6
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a12:	462a      	mov	r2, r5
 8007a14:	f000 fac6 	bl	8007fa4 <_realloc_r>
 8007a18:	4606      	mov	r6, r0
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d1e0      	bne.n	80079e0 <__ssputs_r+0x5c>
 8007a1e:	6921      	ldr	r1, [r4, #16]
 8007a20:	4650      	mov	r0, sl
 8007a22:	f7ff feb7 	bl	8007794 <_free_r>
 8007a26:	230c      	movs	r3, #12
 8007a28:	f8ca 3000 	str.w	r3, [sl]
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	e7e9      	b.n	8007a0e <__ssputs_r+0x8a>
	...

08007a3c <_svfiprintf_r>:
 8007a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	4698      	mov	r8, r3
 8007a42:	898b      	ldrh	r3, [r1, #12]
 8007a44:	061b      	lsls	r3, r3, #24
 8007a46:	b09d      	sub	sp, #116	@ 0x74
 8007a48:	4607      	mov	r7, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	d510      	bpl.n	8007a72 <_svfiprintf_r+0x36>
 8007a50:	690b      	ldr	r3, [r1, #16]
 8007a52:	b973      	cbnz	r3, 8007a72 <_svfiprintf_r+0x36>
 8007a54:	2140      	movs	r1, #64	@ 0x40
 8007a56:	f7ff ff09 	bl	800786c <_malloc_r>
 8007a5a:	6028      	str	r0, [r5, #0]
 8007a5c:	6128      	str	r0, [r5, #16]
 8007a5e:	b930      	cbnz	r0, 8007a6e <_svfiprintf_r+0x32>
 8007a60:	230c      	movs	r3, #12
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	b01d      	add	sp, #116	@ 0x74
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	2340      	movs	r3, #64	@ 0x40
 8007a70:	616b      	str	r3, [r5, #20]
 8007a72:	2300      	movs	r3, #0
 8007a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a76:	2320      	movs	r3, #32
 8007a78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a80:	2330      	movs	r3, #48	@ 0x30
 8007a82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c20 <_svfiprintf_r+0x1e4>
 8007a86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a8a:	f04f 0901 	mov.w	r9, #1
 8007a8e:	4623      	mov	r3, r4
 8007a90:	469a      	mov	sl, r3
 8007a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a96:	b10a      	cbz	r2, 8007a9c <_svfiprintf_r+0x60>
 8007a98:	2a25      	cmp	r2, #37	@ 0x25
 8007a9a:	d1f9      	bne.n	8007a90 <_svfiprintf_r+0x54>
 8007a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007aa0:	d00b      	beq.n	8007aba <_svfiprintf_r+0x7e>
 8007aa2:	465b      	mov	r3, fp
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ff6b 	bl	8007984 <__ssputs_r>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	f000 80a7 	beq.w	8007c02 <_svfiprintf_r+0x1c6>
 8007ab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ab6:	445a      	add	r2, fp
 8007ab8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007aba:	f89a 3000 	ldrb.w	r3, [sl]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 809f 	beq.w	8007c02 <_svfiprintf_r+0x1c6>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ace:	f10a 0a01 	add.w	sl, sl, #1
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	9307      	str	r3, [sp, #28]
 8007ad6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ada:	931a      	str	r3, [sp, #104]	@ 0x68
 8007adc:	4654      	mov	r4, sl
 8007ade:	2205      	movs	r2, #5
 8007ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae4:	484e      	ldr	r0, [pc, #312]	@ (8007c20 <_svfiprintf_r+0x1e4>)
 8007ae6:	f7f8 fb8b 	bl	8000200 <memchr>
 8007aea:	9a04      	ldr	r2, [sp, #16]
 8007aec:	b9d8      	cbnz	r0, 8007b26 <_svfiprintf_r+0xea>
 8007aee:	06d0      	lsls	r0, r2, #27
 8007af0:	bf44      	itt	mi
 8007af2:	2320      	movmi	r3, #32
 8007af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007af8:	0711      	lsls	r1, r2, #28
 8007afa:	bf44      	itt	mi
 8007afc:	232b      	movmi	r3, #43	@ 0x2b
 8007afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b02:	f89a 3000 	ldrb.w	r3, [sl]
 8007b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b08:	d015      	beq.n	8007b36 <_svfiprintf_r+0xfa>
 8007b0a:	9a07      	ldr	r2, [sp, #28]
 8007b0c:	4654      	mov	r4, sl
 8007b0e:	2000      	movs	r0, #0
 8007b10:	f04f 0c0a 	mov.w	ip, #10
 8007b14:	4621      	mov	r1, r4
 8007b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b1a:	3b30      	subs	r3, #48	@ 0x30
 8007b1c:	2b09      	cmp	r3, #9
 8007b1e:	d94b      	bls.n	8007bb8 <_svfiprintf_r+0x17c>
 8007b20:	b1b0      	cbz	r0, 8007b50 <_svfiprintf_r+0x114>
 8007b22:	9207      	str	r2, [sp, #28]
 8007b24:	e014      	b.n	8007b50 <_svfiprintf_r+0x114>
 8007b26:	eba0 0308 	sub.w	r3, r0, r8
 8007b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	46a2      	mov	sl, r4
 8007b34:	e7d2      	b.n	8007adc <_svfiprintf_r+0xa0>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	1d19      	adds	r1, r3, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	9103      	str	r1, [sp, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfbb      	ittet	lt
 8007b42:	425b      	neglt	r3, r3
 8007b44:	f042 0202 	orrlt.w	r2, r2, #2
 8007b48:	9307      	strge	r3, [sp, #28]
 8007b4a:	9307      	strlt	r3, [sp, #28]
 8007b4c:	bfb8      	it	lt
 8007b4e:	9204      	strlt	r2, [sp, #16]
 8007b50:	7823      	ldrb	r3, [r4, #0]
 8007b52:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b54:	d10a      	bne.n	8007b6c <_svfiprintf_r+0x130>
 8007b56:	7863      	ldrb	r3, [r4, #1]
 8007b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b5a:	d132      	bne.n	8007bc2 <_svfiprintf_r+0x186>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	1d1a      	adds	r2, r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	9203      	str	r2, [sp, #12]
 8007b64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b68:	3402      	adds	r4, #2
 8007b6a:	9305      	str	r3, [sp, #20]
 8007b6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c30 <_svfiprintf_r+0x1f4>
 8007b70:	7821      	ldrb	r1, [r4, #0]
 8007b72:	2203      	movs	r2, #3
 8007b74:	4650      	mov	r0, sl
 8007b76:	f7f8 fb43 	bl	8000200 <memchr>
 8007b7a:	b138      	cbz	r0, 8007b8c <_svfiprintf_r+0x150>
 8007b7c:	9b04      	ldr	r3, [sp, #16]
 8007b7e:	eba0 000a 	sub.w	r0, r0, sl
 8007b82:	2240      	movs	r2, #64	@ 0x40
 8007b84:	4082      	lsls	r2, r0
 8007b86:	4313      	orrs	r3, r2
 8007b88:	3401      	adds	r4, #1
 8007b8a:	9304      	str	r3, [sp, #16]
 8007b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b90:	4824      	ldr	r0, [pc, #144]	@ (8007c24 <_svfiprintf_r+0x1e8>)
 8007b92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b96:	2206      	movs	r2, #6
 8007b98:	f7f8 fb32 	bl	8000200 <memchr>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d036      	beq.n	8007c0e <_svfiprintf_r+0x1d2>
 8007ba0:	4b21      	ldr	r3, [pc, #132]	@ (8007c28 <_svfiprintf_r+0x1ec>)
 8007ba2:	bb1b      	cbnz	r3, 8007bec <_svfiprintf_r+0x1b0>
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	3307      	adds	r3, #7
 8007ba8:	f023 0307 	bic.w	r3, r3, #7
 8007bac:	3308      	adds	r3, #8
 8007bae:	9303      	str	r3, [sp, #12]
 8007bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb2:	4433      	add	r3, r6
 8007bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb6:	e76a      	b.n	8007a8e <_svfiprintf_r+0x52>
 8007bb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	e7a8      	b.n	8007b14 <_svfiprintf_r+0xd8>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	3401      	adds	r4, #1
 8007bc6:	9305      	str	r3, [sp, #20]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	f04f 0c0a 	mov.w	ip, #10
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd4:	3a30      	subs	r2, #48	@ 0x30
 8007bd6:	2a09      	cmp	r2, #9
 8007bd8:	d903      	bls.n	8007be2 <_svfiprintf_r+0x1a6>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0c6      	beq.n	8007b6c <_svfiprintf_r+0x130>
 8007bde:	9105      	str	r1, [sp, #20]
 8007be0:	e7c4      	b.n	8007b6c <_svfiprintf_r+0x130>
 8007be2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be6:	4604      	mov	r4, r0
 8007be8:	2301      	movs	r3, #1
 8007bea:	e7f0      	b.n	8007bce <_svfiprintf_r+0x192>
 8007bec:	ab03      	add	r3, sp, #12
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8007c2c <_svfiprintf_r+0x1f0>)
 8007bf4:	a904      	add	r1, sp, #16
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f3af 8000 	nop.w
 8007bfc:	1c42      	adds	r2, r0, #1
 8007bfe:	4606      	mov	r6, r0
 8007c00:	d1d6      	bne.n	8007bb0 <_svfiprintf_r+0x174>
 8007c02:	89ab      	ldrh	r3, [r5, #12]
 8007c04:	065b      	lsls	r3, r3, #25
 8007c06:	f53f af2d 	bmi.w	8007a64 <_svfiprintf_r+0x28>
 8007c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c0c:	e72c      	b.n	8007a68 <_svfiprintf_r+0x2c>
 8007c0e:	ab03      	add	r3, sp, #12
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	462a      	mov	r2, r5
 8007c14:	4b05      	ldr	r3, [pc, #20]	@ (8007c2c <_svfiprintf_r+0x1f0>)
 8007c16:	a904      	add	r1, sp, #16
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f000 f879 	bl	8007d10 <_printf_i>
 8007c1e:	e7ed      	b.n	8007bfc <_svfiprintf_r+0x1c0>
 8007c20:	08008480 	.word	0x08008480
 8007c24:	0800848a 	.word	0x0800848a
 8007c28:	00000000 	.word	0x00000000
 8007c2c:	08007985 	.word	0x08007985
 8007c30:	08008486 	.word	0x08008486

08007c34 <_printf_common>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	4616      	mov	r6, r2
 8007c3a:	4698      	mov	r8, r3
 8007c3c:	688a      	ldr	r2, [r1, #8]
 8007c3e:	690b      	ldr	r3, [r1, #16]
 8007c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c44:	4293      	cmp	r3, r2
 8007c46:	bfb8      	it	lt
 8007c48:	4613      	movlt	r3, r2
 8007c4a:	6033      	str	r3, [r6, #0]
 8007c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c50:	4607      	mov	r7, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	b10a      	cbz	r2, 8007c5a <_printf_common+0x26>
 8007c56:	3301      	adds	r3, #1
 8007c58:	6033      	str	r3, [r6, #0]
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	0699      	lsls	r1, r3, #26
 8007c5e:	bf42      	ittt	mi
 8007c60:	6833      	ldrmi	r3, [r6, #0]
 8007c62:	3302      	addmi	r3, #2
 8007c64:	6033      	strmi	r3, [r6, #0]
 8007c66:	6825      	ldr	r5, [r4, #0]
 8007c68:	f015 0506 	ands.w	r5, r5, #6
 8007c6c:	d106      	bne.n	8007c7c <_printf_common+0x48>
 8007c6e:	f104 0a19 	add.w	sl, r4, #25
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	6832      	ldr	r2, [r6, #0]
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	dc26      	bgt.n	8007cca <_printf_common+0x96>
 8007c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c80:	6822      	ldr	r2, [r4, #0]
 8007c82:	3b00      	subs	r3, #0
 8007c84:	bf18      	it	ne
 8007c86:	2301      	movne	r3, #1
 8007c88:	0692      	lsls	r2, r2, #26
 8007c8a:	d42b      	bmi.n	8007ce4 <_printf_common+0xb0>
 8007c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c90:	4641      	mov	r1, r8
 8007c92:	4638      	mov	r0, r7
 8007c94:	47c8      	blx	r9
 8007c96:	3001      	adds	r0, #1
 8007c98:	d01e      	beq.n	8007cd8 <_printf_common+0xa4>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	6922      	ldr	r2, [r4, #16]
 8007c9e:	f003 0306 	and.w	r3, r3, #6
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	bf02      	ittt	eq
 8007ca6:	68e5      	ldreq	r5, [r4, #12]
 8007ca8:	6833      	ldreq	r3, [r6, #0]
 8007caa:	1aed      	subeq	r5, r5, r3
 8007cac:	68a3      	ldr	r3, [r4, #8]
 8007cae:	bf0c      	ite	eq
 8007cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cb4:	2500      	movne	r5, #0
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	bfc4      	itt	gt
 8007cba:	1a9b      	subgt	r3, r3, r2
 8007cbc:	18ed      	addgt	r5, r5, r3
 8007cbe:	2600      	movs	r6, #0
 8007cc0:	341a      	adds	r4, #26
 8007cc2:	42b5      	cmp	r5, r6
 8007cc4:	d11a      	bne.n	8007cfc <_printf_common+0xc8>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e008      	b.n	8007cdc <_printf_common+0xa8>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4652      	mov	r2, sl
 8007cce:	4641      	mov	r1, r8
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	47c8      	blx	r9
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d103      	bne.n	8007ce0 <_printf_common+0xac>
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	e7c6      	b.n	8007c72 <_printf_common+0x3e>
 8007ce4:	18e1      	adds	r1, r4, r3
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	2030      	movs	r0, #48	@ 0x30
 8007cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cee:	4422      	add	r2, r4
 8007cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	e7c7      	b.n	8007c8c <_printf_common+0x58>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4641      	mov	r1, r8
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c8      	blx	r9
 8007d06:	3001      	adds	r0, #1
 8007d08:	d0e6      	beq.n	8007cd8 <_printf_common+0xa4>
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	e7d9      	b.n	8007cc2 <_printf_common+0x8e>
	...

08007d10 <_printf_i>:
 8007d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	7e0f      	ldrb	r7, [r1, #24]
 8007d16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d18:	2f78      	cmp	r7, #120	@ 0x78
 8007d1a:	4691      	mov	r9, r2
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	469a      	mov	sl, r3
 8007d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d26:	d807      	bhi.n	8007d38 <_printf_i+0x28>
 8007d28:	2f62      	cmp	r7, #98	@ 0x62
 8007d2a:	d80a      	bhi.n	8007d42 <_printf_i+0x32>
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	f000 80d2 	beq.w	8007ed6 <_printf_i+0x1c6>
 8007d32:	2f58      	cmp	r7, #88	@ 0x58
 8007d34:	f000 80b9 	beq.w	8007eaa <_printf_i+0x19a>
 8007d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d40:	e03a      	b.n	8007db8 <_printf_i+0xa8>
 8007d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d46:	2b15      	cmp	r3, #21
 8007d48:	d8f6      	bhi.n	8007d38 <_printf_i+0x28>
 8007d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d50 <_printf_i+0x40>)
 8007d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d50:	08007da9 	.word	0x08007da9
 8007d54:	08007dbd 	.word	0x08007dbd
 8007d58:	08007d39 	.word	0x08007d39
 8007d5c:	08007d39 	.word	0x08007d39
 8007d60:	08007d39 	.word	0x08007d39
 8007d64:	08007d39 	.word	0x08007d39
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007d39 	.word	0x08007d39
 8007d70:	08007d39 	.word	0x08007d39
 8007d74:	08007d39 	.word	0x08007d39
 8007d78:	08007d39 	.word	0x08007d39
 8007d7c:	08007ebd 	.word	0x08007ebd
 8007d80:	08007de7 	.word	0x08007de7
 8007d84:	08007e77 	.word	0x08007e77
 8007d88:	08007d39 	.word	0x08007d39
 8007d8c:	08007d39 	.word	0x08007d39
 8007d90:	08007edf 	.word	0x08007edf
 8007d94:	08007d39 	.word	0x08007d39
 8007d98:	08007de7 	.word	0x08007de7
 8007d9c:	08007d39 	.word	0x08007d39
 8007da0:	08007d39 	.word	0x08007d39
 8007da4:	08007e7f 	.word	0x08007e7f
 8007da8:	6833      	ldr	r3, [r6, #0]
 8007daa:	1d1a      	adds	r2, r3, #4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6032      	str	r2, [r6, #0]
 8007db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007db8:	2301      	movs	r3, #1
 8007dba:	e09d      	b.n	8007ef8 <_printf_i+0x1e8>
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	6820      	ldr	r0, [r4, #0]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	6031      	str	r1, [r6, #0]
 8007dc4:	0606      	lsls	r6, r0, #24
 8007dc6:	d501      	bpl.n	8007dcc <_printf_i+0xbc>
 8007dc8:	681d      	ldr	r5, [r3, #0]
 8007dca:	e003      	b.n	8007dd4 <_printf_i+0xc4>
 8007dcc:	0645      	lsls	r5, r0, #25
 8007dce:	d5fb      	bpl.n	8007dc8 <_printf_i+0xb8>
 8007dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	da03      	bge.n	8007de0 <_printf_i+0xd0>
 8007dd8:	232d      	movs	r3, #45	@ 0x2d
 8007dda:	426d      	negs	r5, r5
 8007ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007de0:	4859      	ldr	r0, [pc, #356]	@ (8007f48 <_printf_i+0x238>)
 8007de2:	230a      	movs	r3, #10
 8007de4:	e011      	b.n	8007e0a <_printf_i+0xfa>
 8007de6:	6821      	ldr	r1, [r4, #0]
 8007de8:	6833      	ldr	r3, [r6, #0]
 8007dea:	0608      	lsls	r0, r1, #24
 8007dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8007df0:	d402      	bmi.n	8007df8 <_printf_i+0xe8>
 8007df2:	0649      	lsls	r1, r1, #25
 8007df4:	bf48      	it	mi
 8007df6:	b2ad      	uxthmi	r5, r5
 8007df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dfa:	4853      	ldr	r0, [pc, #332]	@ (8007f48 <_printf_i+0x238>)
 8007dfc:	6033      	str	r3, [r6, #0]
 8007dfe:	bf14      	ite	ne
 8007e00:	230a      	movne	r3, #10
 8007e02:	2308      	moveq	r3, #8
 8007e04:	2100      	movs	r1, #0
 8007e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e0a:	6866      	ldr	r6, [r4, #4]
 8007e0c:	60a6      	str	r6, [r4, #8]
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	bfa2      	ittt	ge
 8007e12:	6821      	ldrge	r1, [r4, #0]
 8007e14:	f021 0104 	bicge.w	r1, r1, #4
 8007e18:	6021      	strge	r1, [r4, #0]
 8007e1a:	b90d      	cbnz	r5, 8007e20 <_printf_i+0x110>
 8007e1c:	2e00      	cmp	r6, #0
 8007e1e:	d04b      	beq.n	8007eb8 <_printf_i+0x1a8>
 8007e20:	4616      	mov	r6, r2
 8007e22:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e26:	fb03 5711 	mls	r7, r3, r1, r5
 8007e2a:	5dc7      	ldrb	r7, [r0, r7]
 8007e2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e30:	462f      	mov	r7, r5
 8007e32:	42bb      	cmp	r3, r7
 8007e34:	460d      	mov	r5, r1
 8007e36:	d9f4      	bls.n	8007e22 <_printf_i+0x112>
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d10b      	bne.n	8007e54 <_printf_i+0x144>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	07df      	lsls	r7, r3, #31
 8007e40:	d508      	bpl.n	8007e54 <_printf_i+0x144>
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	6861      	ldr	r1, [r4, #4]
 8007e46:	4299      	cmp	r1, r3
 8007e48:	bfde      	ittt	le
 8007e4a:	2330      	movle	r3, #48	@ 0x30
 8007e4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e54:	1b92      	subs	r2, r2, r6
 8007e56:	6122      	str	r2, [r4, #16]
 8007e58:	f8cd a000 	str.w	sl, [sp]
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	aa03      	add	r2, sp, #12
 8007e60:	4621      	mov	r1, r4
 8007e62:	4640      	mov	r0, r8
 8007e64:	f7ff fee6 	bl	8007c34 <_printf_common>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d14a      	bne.n	8007f02 <_printf_i+0x1f2>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	b004      	add	sp, #16
 8007e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	f043 0320 	orr.w	r3, r3, #32
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	4833      	ldr	r0, [pc, #204]	@ (8007f4c <_printf_i+0x23c>)
 8007e80:	2778      	movs	r7, #120	@ 0x78
 8007e82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	6831      	ldr	r1, [r6, #0]
 8007e8a:	061f      	lsls	r7, r3, #24
 8007e8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e90:	d402      	bmi.n	8007e98 <_printf_i+0x188>
 8007e92:	065f      	lsls	r7, r3, #25
 8007e94:	bf48      	it	mi
 8007e96:	b2ad      	uxthmi	r5, r5
 8007e98:	6031      	str	r1, [r6, #0]
 8007e9a:	07d9      	lsls	r1, r3, #31
 8007e9c:	bf44      	itt	mi
 8007e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea2:	6023      	strmi	r3, [r4, #0]
 8007ea4:	b11d      	cbz	r5, 8007eae <_printf_i+0x19e>
 8007ea6:	2310      	movs	r3, #16
 8007ea8:	e7ac      	b.n	8007e04 <_printf_i+0xf4>
 8007eaa:	4827      	ldr	r0, [pc, #156]	@ (8007f48 <_printf_i+0x238>)
 8007eac:	e7e9      	b.n	8007e82 <_printf_i+0x172>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	f023 0320 	bic.w	r3, r3, #32
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	e7f6      	b.n	8007ea6 <_printf_i+0x196>
 8007eb8:	4616      	mov	r6, r2
 8007eba:	e7bd      	b.n	8007e38 <_printf_i+0x128>
 8007ebc:	6833      	ldr	r3, [r6, #0]
 8007ebe:	6825      	ldr	r5, [r4, #0]
 8007ec0:	6961      	ldr	r1, [r4, #20]
 8007ec2:	1d18      	adds	r0, r3, #4
 8007ec4:	6030      	str	r0, [r6, #0]
 8007ec6:	062e      	lsls	r6, r5, #24
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	d501      	bpl.n	8007ed0 <_printf_i+0x1c0>
 8007ecc:	6019      	str	r1, [r3, #0]
 8007ece:	e002      	b.n	8007ed6 <_printf_i+0x1c6>
 8007ed0:	0668      	lsls	r0, r5, #25
 8007ed2:	d5fb      	bpl.n	8007ecc <_printf_i+0x1bc>
 8007ed4:	8019      	strh	r1, [r3, #0]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	4616      	mov	r6, r2
 8007edc:	e7bc      	b.n	8007e58 <_printf_i+0x148>
 8007ede:	6833      	ldr	r3, [r6, #0]
 8007ee0:	1d1a      	adds	r2, r3, #4
 8007ee2:	6032      	str	r2, [r6, #0]
 8007ee4:	681e      	ldr	r6, [r3, #0]
 8007ee6:	6862      	ldr	r2, [r4, #4]
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4630      	mov	r0, r6
 8007eec:	f7f8 f988 	bl	8000200 <memchr>
 8007ef0:	b108      	cbz	r0, 8007ef6 <_printf_i+0x1e6>
 8007ef2:	1b80      	subs	r0, r0, r6
 8007ef4:	6060      	str	r0, [r4, #4]
 8007ef6:	6863      	ldr	r3, [r4, #4]
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	2300      	movs	r3, #0
 8007efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f00:	e7aa      	b.n	8007e58 <_printf_i+0x148>
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	4632      	mov	r2, r6
 8007f06:	4649      	mov	r1, r9
 8007f08:	4640      	mov	r0, r8
 8007f0a:	47d0      	blx	sl
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d0ad      	beq.n	8007e6c <_printf_i+0x15c>
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	079b      	lsls	r3, r3, #30
 8007f14:	d413      	bmi.n	8007f3e <_printf_i+0x22e>
 8007f16:	68e0      	ldr	r0, [r4, #12]
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	4298      	cmp	r0, r3
 8007f1c:	bfb8      	it	lt
 8007f1e:	4618      	movlt	r0, r3
 8007f20:	e7a6      	b.n	8007e70 <_printf_i+0x160>
 8007f22:	2301      	movs	r3, #1
 8007f24:	4632      	mov	r2, r6
 8007f26:	4649      	mov	r1, r9
 8007f28:	4640      	mov	r0, r8
 8007f2a:	47d0      	blx	sl
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d09d      	beq.n	8007e6c <_printf_i+0x15c>
 8007f30:	3501      	adds	r5, #1
 8007f32:	68e3      	ldr	r3, [r4, #12]
 8007f34:	9903      	ldr	r1, [sp, #12]
 8007f36:	1a5b      	subs	r3, r3, r1
 8007f38:	42ab      	cmp	r3, r5
 8007f3a:	dcf2      	bgt.n	8007f22 <_printf_i+0x212>
 8007f3c:	e7eb      	b.n	8007f16 <_printf_i+0x206>
 8007f3e:	2500      	movs	r5, #0
 8007f40:	f104 0619 	add.w	r6, r4, #25
 8007f44:	e7f5      	b.n	8007f32 <_printf_i+0x222>
 8007f46:	bf00      	nop
 8007f48:	08008491 	.word	0x08008491
 8007f4c:	080084a2 	.word	0x080084a2

08007f50 <memmove>:
 8007f50:	4288      	cmp	r0, r1
 8007f52:	b510      	push	{r4, lr}
 8007f54:	eb01 0402 	add.w	r4, r1, r2
 8007f58:	d902      	bls.n	8007f60 <memmove+0x10>
 8007f5a:	4284      	cmp	r4, r0
 8007f5c:	4623      	mov	r3, r4
 8007f5e:	d807      	bhi.n	8007f70 <memmove+0x20>
 8007f60:	1e43      	subs	r3, r0, #1
 8007f62:	42a1      	cmp	r1, r4
 8007f64:	d008      	beq.n	8007f78 <memmove+0x28>
 8007f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f6e:	e7f8      	b.n	8007f62 <memmove+0x12>
 8007f70:	4402      	add	r2, r0
 8007f72:	4601      	mov	r1, r0
 8007f74:	428a      	cmp	r2, r1
 8007f76:	d100      	bne.n	8007f7a <memmove+0x2a>
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f82:	e7f7      	b.n	8007f74 <memmove+0x24>

08007f84 <_sbrk_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d06      	ldr	r5, [pc, #24]	@ (8007fa0 <_sbrk_r+0x1c>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	602b      	str	r3, [r5, #0]
 8007f90:	f7f8 fcb0 	bl	80008f4 <_sbrk>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_sbrk_r+0x1a>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_sbrk_r+0x1a>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	20001294 	.word	0x20001294

08007fa4 <_realloc_r>:
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	4680      	mov	r8, r0
 8007faa:	4615      	mov	r5, r2
 8007fac:	460c      	mov	r4, r1
 8007fae:	b921      	cbnz	r1, 8007fba <_realloc_r+0x16>
 8007fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	f7ff bc59 	b.w	800786c <_malloc_r>
 8007fba:	b92a      	cbnz	r2, 8007fc8 <_realloc_r+0x24>
 8007fbc:	f7ff fbea 	bl	8007794 <_free_r>
 8007fc0:	2400      	movs	r4, #0
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc8:	f000 f81a 	bl	8008000 <_malloc_usable_size_r>
 8007fcc:	4285      	cmp	r5, r0
 8007fce:	4606      	mov	r6, r0
 8007fd0:	d802      	bhi.n	8007fd8 <_realloc_r+0x34>
 8007fd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007fd6:	d8f4      	bhi.n	8007fc2 <_realloc_r+0x1e>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4640      	mov	r0, r8
 8007fdc:	f7ff fc46 	bl	800786c <_malloc_r>
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d0ec      	beq.n	8007fc0 <_realloc_r+0x1c>
 8007fe6:	42b5      	cmp	r5, r6
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4621      	mov	r1, r4
 8007fec:	bf28      	it	cs
 8007fee:	4632      	movcs	r2, r6
 8007ff0:	f7ff fbc2 	bl	8007778 <memcpy>
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	f7ff fbcc 	bl	8007794 <_free_r>
 8007ffc:	463c      	mov	r4, r7
 8007ffe:	e7e0      	b.n	8007fc2 <_realloc_r+0x1e>

08008000 <_malloc_usable_size_r>:
 8008000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008004:	1f18      	subs	r0, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	bfbc      	itt	lt
 800800a:	580b      	ldrlt	r3, [r1, r0]
 800800c:	18c0      	addlt	r0, r0, r3
 800800e:	4770      	bx	lr

08008010 <_init>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr

0800801c <_fini>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	bf00      	nop
 8008020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008022:	bc08      	pop	{r3}
 8008024:	469e      	mov	lr, r3
 8008026:	4770      	bx	lr
