
Project_Laboratory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c5c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08008dfc  08008dfc  00009dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090ec  080090ec  0000b2cc  2**0
                  CONTENTS
  4 .ARM          00000008  080090ec  080090ec  0000a0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f4  080090f4  0000b2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090f8  080090f8  0000a0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  080090fc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f58  200002cc  080093c8  0000b2cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001224  080093c8  0000c224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104aa  00000000  00000000  0000b2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003458  00000000  00000000  0001b7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0001ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000955  00000000  00000000  0001f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ce1  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001323a  00000000  00000000  00038eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087952  00000000  00000000  0004c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3a7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003794  00000000  00000000  000d3ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d7254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008de4 	.word	0x08008de4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	08008de4 	.word	0x08008de4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	4b26      	ldr	r3, [pc, #152]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a25      	ldr	r2, [pc, #148]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a17      	ldr	r2, [pc, #92]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000600:	4811      	ldr	r0, [pc, #68]	@ (8000648 <MX_GPIO_Init+0xb8>)
 8000602:	f001 fc4b 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	480a      	ldr	r0, [pc, #40]	@ (8000648 <MX_GPIO_Init+0xb8>)
 8000620:	f001 faa0 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 8000624:	2301      	movs	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	4619      	mov	r1, r3
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_GPIO_Init+0xbc>)
 8000638:	f001 fa94 	bl	8001b64 <HAL_GPIO_Init>

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40020800 	.word	0x40020800
 800064c:	40020000 	.word	0x40020000

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f001 f8dd 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f8a7 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f7ff ff97 	bl	8000590 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000662:	f001 f82b 	bl	80016bc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000666:	f004 fdfd 	bl	8005264 <MX_USB_DEVICE_Init>
  setlocale(LC_CTYPE, "");
 800066a:	4946      	ldr	r1, [pc, #280]	@ (8000784 <main+0x134>)
 800066c:	2002      	movs	r0, #2
 800066e:	f007 ff39 	bl	80084e4 <setlocale>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000678:	4843      	ldr	r0, [pc, #268]	@ (8000788 <main+0x138>)
 800067a:	f001 fc0f 	bl	8001e9c <HAL_GPIO_WritePin>
  GPIO_PinState button;
  bool started=false;
 800067e:	2300      	movs	r3, #0
 8000680:	75fb      	strb	r3, [r7, #23]
  wchar_t* message = L"ABCDEFGHIJKLMNOPQRSTUVWXYZ \nabcdefghijklmnopqrstuvwxyz \n0123456789 \nárvíztűrő tükörfúrógép \nÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP \n, . - / * + ? ! : \t @\n";
 8000682:	4b42      	ldr	r3, [pc, #264]	@ (800078c <main+0x13c>)
 8000684:	60fb      	str	r3, [r7, #12]
  int num = 0x50;
 8000686:	2350      	movs	r3, #80	@ 0x50
 8000688:	613b      	str	r3, [r7, #16]

  bool test = false;
 800068a:	2300      	movs	r3, #0
 800068c:	72fb      	strb	r3, [r7, #11]

  HAL_Delay(3000);
 800068e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000692:	f001 f931 	bl	80018f8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 8000696:	2101      	movs	r1, #1
 8000698:	483d      	ldr	r0, [pc, #244]	@ (8000790 <main+0x140>)
 800069a:	f001 fbe7 	bl	8001e6c <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	72bb      	strb	r3, [r7, #10]

	  if (!test)
 80006a2:	7afb      	ldrb	r3, [r7, #11]
 80006a4:	f083 0301 	eor.w	r3, r3, #1
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d014      	beq.n	80006d8 <main+0x88>
	  {
		  if(button == is_pushed)
 80006ae:	4b39      	ldr	r3, [pc, #228]	@ (8000794 <main+0x144>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	7aba      	ldrb	r2, [r7, #10]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d1ee      	bne.n	8000696 <main+0x46>
		  {
			  send_message(message);
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f000 f8e3 	bl	8000884 <send_message>
			  USBD_Delay(500);
 80006be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006c2:	f001 f919 	bl	80018f8 <HAL_Delay>

			  wchar_t del_str[2];
			  del_str[0] = 127;
 80006c6:	237f      	movs	r3, #127	@ 0x7f
 80006c8:	603b      	str	r3, [r7, #0]
			  del_str[1] = L'\0';
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]

			  send_message(del_str);
 80006ce:	463b      	mov	r3, r7
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f8d7 	bl	8000884 <send_message>
 80006d6:	e7de      	b.n	8000696 <main+0x46>
		  }
	  }
	  else
	  {
		  if (button == is_pushed && test)
 80006d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <main+0x144>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	7aba      	ldrb	r2, [r7, #10]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d110      	bne.n	8000704 <main+0xb4>
 80006e2:	7afb      	ldrb	r3, [r7, #11]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00d      	beq.n	8000704 <main+0xb4>
		  	  {
		  		  started = !started;
 80006e8:	7dfb      	ldrb	r3, [r7, #23]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f083 0301 	eor.w	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	75fb      	strb	r3, [r7, #23]
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	75fb      	strb	r3, [r7, #23]
		  	  }

		  	  if(started)
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0c5      	beq.n	8000696 <main+0x46>
		  	  {
		  		  report[2]=num;
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <main+0x148>)
 8000710:	709a      	strb	r2, [r3, #2]
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_set);
 8000712:	4b22      	ldr	r3, [pc, #136]	@ (800079c <main+0x14c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071c:	481a      	ldr	r0, [pc, #104]	@ (8000788 <main+0x138>)
 800071e:	f001 fbbd 	bl	8001e9c <HAL_GPIO_WritePin>

		  		  USBD_HID_Keybaord_SendReport(&hUsbDevice, report, len);
 8000722:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <main+0x150>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	491b      	ldr	r1, [pc, #108]	@ (8000798 <main+0x148>)
 800072a:	481e      	ldr	r0, [pc, #120]	@ (80007a4 <main+0x154>)
 800072c:	f006 f9b2 	bl	8006a94 <USBD_HID_Keybaord_SendReport>
		  		  USBD_Delay(100);
 8000730:	2064      	movs	r0, #100	@ 0x64
 8000732:	f001 f8e1 	bl	80018f8 <HAL_Delay>
		  		  num++;
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	3301      	adds	r3, #1
 800073a:	613b      	str	r3, [r7, #16]

		  		  report[2]= 0x00;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <main+0x148>)
 800073e:	2200      	movs	r2, #0
 8000740:	709a      	strb	r2, [r3, #2]
		  		  USBD_HID_Keybaord_SendReport(&hUsbDevice, report, len);
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <main+0x150>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	4913      	ldr	r1, [pc, #76]	@ (8000798 <main+0x148>)
 800074a:	4816      	ldr	r0, [pc, #88]	@ (80007a4 <main+0x154>)
 800074c:	f006 f9a2 	bl	8006a94 <USBD_HID_Keybaord_SendReport>
		  		  USBD_Delay(100);
 8000750:	2064      	movs	r0, #100	@ 0x64
 8000752:	f001 f8d1 	bl	80018f8 <HAL_Delay>

		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_reset);
 8000756:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <main+0x158>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000760:	4809      	ldr	r0, [pc, #36]	@ (8000788 <main+0x138>)
 8000762:	f001 fb9b 	bl	8001e9c <HAL_GPIO_WritePin>
		  		  started = !started;
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f083 0301 	eor.w	r3, r3, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	75fb      	strb	r3, [r7, #23]
 800077a:	7dfb      	ldrb	r3, [r7, #23]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	75fb      	strb	r3, [r7, #23]
	  button = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 8000782:	e788      	b.n	8000696 <main+0x46>
 8000784:	08008dfc 	.word	0x08008dfc
 8000788:	40020800 	.word	0x40020800
 800078c:	08008e00 	.word	0x08008e00
 8000790:	40020000 	.word	0x40020000
 8000794:	200002e9 	.word	0x200002e9
 8000798:	200002ec 	.word	0x200002ec
 800079c:	200002e8 	.word	0x200002e8
 80007a0:	20000002 	.word	0x20000002
 80007a4:	200007e0 	.word	0x200007e0
 80007a8:	20000000 	.word	0x20000000

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	@ 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	@ 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f007 fe62 	bl	8008484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b29      	ldr	r3, [pc, #164]	@ (800087c <SystemClock_Config+0xd0>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	4a28      	ldr	r2, [pc, #160]	@ (800087c <SystemClock_Config+0xd0>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e0:	4b26      	ldr	r3, [pc, #152]	@ (800087c <SystemClock_Config+0xd0>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <SystemClock_Config+0xd4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007f8:	4a21      	ldr	r2, [pc, #132]	@ (8000880 <SystemClock_Config+0xd4>)
 80007fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <SystemClock_Config+0xd4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800081e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000820:	2319      	movs	r3, #25
 8000822:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000824:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000828:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800082a:	2304      	movs	r3, #4
 800082c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800082e:	2307      	movs	r3, #7
 8000830:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fd9c 	bl	8003374 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000842:	f000 fe8b 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2102      	movs	r1, #2
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fffe 	bl	8003864 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800086e:	f000 fe75 	bl	800155c <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	@ 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <send_message>:

/* USER CODE BEGIN 4 */
void send_message(wchar_t* message)
{
 8000884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000888:	b08b      	sub	sp, #44	@ 0x2c
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	466b      	mov	r3, sp
 8000890:	461e      	mov	r6, r3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_set);
 8000892:	4b58      	ldr	r3, [pc, #352]	@ (80009f4 <send_message+0x170>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089c:	4856      	ldr	r0, [pc, #344]	@ (80009f8 <send_message+0x174>)
 800089e:	f001 fafd 	bl	8001e9c <HAL_GPIO_WritePin>

	int length = wcslen(message);
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f007 fdf6 	bl	8008494 <wcslen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	623b      	str	r3, [r7, #32]
	int t[length+1];
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	1c59      	adds	r1, r3, #1
 80008b0:	1e4b      	subs	r3, r1, #1
 80008b2:	61fb      	str	r3, [r7, #28]
 80008b4:	460a      	mov	r2, r1
 80008b6:	2300      	movs	r3, #0
 80008b8:	603a      	str	r2, [r7, #0]
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	f04f 0200 	mov.w	r2, #0
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	0143      	lsls	r3, r0, #5
 80008c8:	6838      	ldr	r0, [r7, #0]
 80008ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80008ce:	6838      	ldr	r0, [r7, #0]
 80008d0:	0142      	lsls	r2, r0, #5
 80008d2:	460a      	mov	r2, r1
 80008d4:	2300      	movs	r3, #0
 80008d6:	4692      	mov	sl, r2
 80008d8:	469b      	mov	fp, r3
 80008da:	f04f 0200 	mov.w	r2, #0
 80008de:	f04f 0300 	mov.w	r3, #0
 80008e2:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80008e6:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80008ea:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80008ee:	460b      	mov	r3, r1
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	3307      	adds	r3, #7
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	ebad 0d03 	sub.w	sp, sp, r3
 80008fc:	466b      	mov	r3, sp
 80008fe:	3303      	adds	r3, #3
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
	int is_special[length+1];
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	1c59      	adds	r1, r3, #1
 800090a:	1e4b      	subs	r3, r1, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	460a      	mov	r2, r1
 8000910:	2300      	movs	r3, #0
 8000912:	4690      	mov	r8, r2
 8000914:	4699      	mov	r9, r3
 8000916:	f04f 0200 	mov.w	r2, #0
 800091a:	f04f 0300 	mov.w	r3, #0
 800091e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000922:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000926:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800092a:	460a      	mov	r2, r1
 800092c:	2300      	movs	r3, #0
 800092e:	4614      	mov	r4, r2
 8000930:	461d      	mov	r5, r3
 8000932:	f04f 0200 	mov.w	r2, #0
 8000936:	f04f 0300 	mov.w	r3, #0
 800093a:	016b      	lsls	r3, r5, #5
 800093c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000940:	0162      	lsls	r2, r4, #5
 8000942:	460b      	mov	r3, r1
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	3307      	adds	r3, #7
 8000948:	08db      	lsrs	r3, r3, #3
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	ebad 0d03 	sub.w	sp, sp, r3
 8000950:	466b      	mov	r3, sp
 8000952:	3303      	adds	r3, #3
 8000954:	089b      	lsrs	r3, r3, #2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	613b      	str	r3, [r7, #16]
	convert_message_hun(message, t, is_special);
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	69b9      	ldr	r1, [r7, #24]
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f000 f854 	bl	8000a0c <convert_message_hun>
	for(int i=0; i<length+1;++i)
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
 8000968:	e027      	b.n	80009ba <send_message+0x136>
	{
		if(i!=0 && t[i-1]=='\n')
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	2b00      	cmp	r3, #0
 800096e:	d009      	beq.n	8000984 <send_message+0x100>
 8000970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097a:	2b0a      	cmp	r3, #10
 800097c:	d102      	bne.n	8000984 <send_message+0x100>
			USBD_Delay(50);
 800097e:	2032      	movs	r0, #50	@ 0x32
 8000980:	f000 ffba 	bl	80018f8 <HAL_Delay>

		report[2] = t[i];
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <send_message+0x178>)
 8000990:	709a      	strb	r2, [r3, #2]
		report[0] = is_special[i];
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <send_message+0x178>)
 800099e:	701a      	strb	r2, [r3, #0]

		USBD_HID_Keybaord_SendReport(&hUsbDevice, report, len);
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <send_message+0x17c>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4915      	ldr	r1, [pc, #84]	@ (80009fc <send_message+0x178>)
 80009a8:	4816      	ldr	r0, [pc, #88]	@ (8000a04 <send_message+0x180>)
 80009aa:	f006 f873 	bl	8006a94 <USBD_HID_Keybaord_SendReport>
		USBD_Delay(150);
 80009ae:	2096      	movs	r0, #150	@ 0x96
 80009b0:	f000 ffa2 	bl	80018f8 <HAL_Delay>
	for(int i=0; i<length+1;++i)
 80009b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b6:	3301      	adds	r3, #1
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ba:	6a3a      	ldr	r2, [r7, #32]
 80009bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009be:	429a      	cmp	r2, r3
 80009c0:	dad3      	bge.n	800096a <send_message+0xe6>
	}

	report[0] = 0x00;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <send_message+0x178>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
	USBD_HID_Keybaord_SendReport(&hUsbDevice, report, len);
 80009c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <send_message+0x17c>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	490b      	ldr	r1, [pc, #44]	@ (80009fc <send_message+0x178>)
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <send_message+0x180>)
 80009d2:	f006 f85f 	bl	8006a94 <USBD_HID_Keybaord_SendReport>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_reset);
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <send_message+0x184>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <send_message+0x174>)
 80009e2:	f001 fa5b 	bl	8001e9c <HAL_GPIO_WritePin>
 80009e6:	46b5      	mov	sp, r6
}
 80009e8:	bf00      	nop
 80009ea:	372c      	adds	r7, #44	@ 0x2c
 80009ec:	46bd      	mov	sp, r7
 80009ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f2:	bf00      	nop
 80009f4:	200002e8 	.word	0x200002e8
 80009f8:	40020800 	.word	0x40020800
 80009fc:	200002ec 	.word	0x200002ec
 8000a00:	20000002 	.word	0x20000002
 8000a04:	200007e0 	.word	0x200007e0
 8000a08:	20000000 	.word	0x20000000

08000a0c <convert_message_hun>:

int* convert_message_hun(wchar_t* message, int *t, int* is_special)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	int length = wcslen(message);
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f007 fd3b 	bl	8008494 <wcslen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	613b      	str	r3, [r7, #16]

	for(int i=0; i<length; ++i)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	f000 bd82 	b.w	800152e <convert_message_hun+0xb22>
	{
		is_special[i] = 0x00;
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
		switch (message[i])
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3b09      	subs	r3, #9
 8000a42:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000a46:	f200 8568 	bhi.w	800151a <convert_message_hun+0xb0e>
 8000a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <convert_message_hun+0x44>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08001441 	.word	0x08001441
 8000a54:	08001383 	.word	0x08001383
 8000a58:	0800151b 	.word	0x0800151b
 8000a5c:	0800151b 	.word	0x0800151b
 8000a60:	0800151b 	.word	0x0800151b
 8000a64:	0800151b 	.word	0x0800151b
 8000a68:	0800151b 	.word	0x0800151b
 8000a6c:	0800151b 	.word	0x0800151b
 8000a70:	0800151b 	.word	0x0800151b
 8000a74:	0800151b 	.word	0x0800151b
 8000a78:	0800151b 	.word	0x0800151b
 8000a7c:	0800151b 	.word	0x0800151b
 8000a80:	0800151b 	.word	0x0800151b
 8000a84:	0800151b 	.word	0x0800151b
 8000a88:	0800151b 	.word	0x0800151b
 8000a8c:	0800151b 	.word	0x0800151b
 8000a90:	0800151b 	.word	0x0800151b
 8000a94:	0800151b 	.word	0x0800151b
 8000a98:	0800151b 	.word	0x0800151b
 8000a9c:	0800151b 	.word	0x0800151b
 8000aa0:	0800151b 	.word	0x0800151b
 8000aa4:	0800151b 	.word	0x0800151b
 8000aa8:	0800151b 	.word	0x0800151b
 8000aac:	08001391 	.word	0x08001391
 8000ab0:	0800140d 	.word	0x0800140d
 8000ab4:	0800151b 	.word	0x0800151b
 8000ab8:	0800151b 	.word	0x0800151b
 8000abc:	0800151b 	.word	0x0800151b
 8000ac0:	0800151b 	.word	0x0800151b
 8000ac4:	0800151b 	.word	0x0800151b
 8000ac8:	0800151b 	.word	0x0800151b
 8000acc:	0800151b 	.word	0x0800151b
 8000ad0:	0800151b 	.word	0x0800151b
 8000ad4:	080013d7 	.word	0x080013d7
 8000ad8:	080013e5 	.word	0x080013e5
 8000adc:	0800139f 	.word	0x0800139f
 8000ae0:	080013bb 	.word	0x080013bb
 8000ae4:	080013ad 	.word	0x080013ad
 8000ae8:	080013c9 	.word	0x080013c9
 8000aec:	0800148f 	.word	0x0800148f
 8000af0:	0800149d 	.word	0x0800149d
 8000af4:	080014ab 	.word	0x080014ab
 8000af8:	080014b9 	.word	0x080014b9
 8000afc:	080014c7 	.word	0x080014c7
 8000b00:	080014d5 	.word	0x080014d5
 8000b04:	080014e3 	.word	0x080014e3
 8000b08:	080014f1 	.word	0x080014f1
 8000b0c:	080014ff 	.word	0x080014ff
 8000b10:	0800150d 	.word	0x0800150d
 8000b14:	08001427 	.word	0x08001427
 8000b18:	0800151b 	.word	0x0800151b
 8000b1c:	0800151b 	.word	0x0800151b
 8000b20:	0800151b 	.word	0x0800151b
 8000b24:	0800151b 	.word	0x0800151b
 8000b28:	080013f3 	.word	0x080013f3
 8000b2c:	08001475 	.word	0x08001475
 8000b30:	08000ff5 	.word	0x08000ff5
 8000b34:	0800100f 	.word	0x0800100f
 8000b38:	08001029 	.word	0x08001029
 8000b3c:	08001043 	.word	0x08001043
 8000b40:	0800105d 	.word	0x0800105d
 8000b44:	08001077 	.word	0x08001077
 8000b48:	08001091 	.word	0x08001091
 8000b4c:	080010ab 	.word	0x080010ab
 8000b50:	080010c5 	.word	0x080010c5
 8000b54:	080010df 	.word	0x080010df
 8000b58:	080010f9 	.word	0x080010f9
 8000b5c:	08001113 	.word	0x08001113
 8000b60:	0800112d 	.word	0x0800112d
 8000b64:	08001147 	.word	0x08001147
 8000b68:	08001161 	.word	0x08001161
 8000b6c:	0800117b 	.word	0x0800117b
 8000b70:	08001195 	.word	0x08001195
 8000b74:	080011af 	.word	0x080011af
 8000b78:	080011c9 	.word	0x080011c9
 8000b7c:	080011e3 	.word	0x080011e3
 8000b80:	080011fd 	.word	0x080011fd
 8000b84:	08001217 	.word	0x08001217
 8000b88:	08001231 	.word	0x08001231
 8000b8c:	0800124b 	.word	0x0800124b
 8000b90:	08001265 	.word	0x08001265
 8000b94:	0800127f 	.word	0x0800127f
 8000b98:	0800151b 	.word	0x0800151b
 8000b9c:	0800151b 	.word	0x0800151b
 8000ba0:	0800151b 	.word	0x0800151b
 8000ba4:	0800151b 	.word	0x0800151b
 8000ba8:	0800151b 	.word	0x0800151b
 8000bac:	0800151b 	.word	0x0800151b
 8000bb0:	08001001 	.word	0x08001001
 8000bb4:	0800101b 	.word	0x0800101b
 8000bb8:	08001035 	.word	0x08001035
 8000bbc:	0800104f 	.word	0x0800104f
 8000bc0:	08001069 	.word	0x08001069
 8000bc4:	08001083 	.word	0x08001083
 8000bc8:	0800109d 	.word	0x0800109d
 8000bcc:	080010b7 	.word	0x080010b7
 8000bd0:	080010d1 	.word	0x080010d1
 8000bd4:	080010eb 	.word	0x080010eb
 8000bd8:	08001105 	.word	0x08001105
 8000bdc:	0800111f 	.word	0x0800111f
 8000be0:	08001139 	.word	0x08001139
 8000be4:	08001153 	.word	0x08001153
 8000be8:	0800116d 	.word	0x0800116d
 8000bec:	08001187 	.word	0x08001187
 8000bf0:	080011a1 	.word	0x080011a1
 8000bf4:	080011bb 	.word	0x080011bb
 8000bf8:	080011d5 	.word	0x080011d5
 8000bfc:	080011ef 	.word	0x080011ef
 8000c00:	08001209 	.word	0x08001209
 8000c04:	08001223 	.word	0x08001223
 8000c08:	0800123d 	.word	0x0800123d
 8000c0c:	08001257 	.word	0x08001257
 8000c10:	08001271 	.word	0x08001271
 8000c14:	0800128b 	.word	0x0800128b
 8000c18:	0800151b 	.word	0x0800151b
 8000c1c:	0800151b 	.word	0x0800151b
 8000c20:	0800151b 	.word	0x0800151b
 8000c24:	0800151b 	.word	0x0800151b
 8000c28:	0800145b 	.word	0x0800145b
 8000c2c:	0800151b 	.word	0x0800151b
 8000c30:	0800151b 	.word	0x0800151b
 8000c34:	0800151b 	.word	0x0800151b
 8000c38:	0800151b 	.word	0x0800151b
 8000c3c:	0800151b 	.word	0x0800151b
 8000c40:	0800151b 	.word	0x0800151b
 8000c44:	0800151b 	.word	0x0800151b
 8000c48:	0800151b 	.word	0x0800151b
 8000c4c:	0800151b 	.word	0x0800151b
 8000c50:	0800151b 	.word	0x0800151b
 8000c54:	0800151b 	.word	0x0800151b
 8000c58:	0800151b 	.word	0x0800151b
 8000c5c:	0800151b 	.word	0x0800151b
 8000c60:	0800151b 	.word	0x0800151b
 8000c64:	0800151b 	.word	0x0800151b
 8000c68:	0800151b 	.word	0x0800151b
 8000c6c:	0800151b 	.word	0x0800151b
 8000c70:	0800151b 	.word	0x0800151b
 8000c74:	0800151b 	.word	0x0800151b
 8000c78:	0800151b 	.word	0x0800151b
 8000c7c:	0800151b 	.word	0x0800151b
 8000c80:	0800151b 	.word	0x0800151b
 8000c84:	0800151b 	.word	0x0800151b
 8000c88:	0800151b 	.word	0x0800151b
 8000c8c:	0800151b 	.word	0x0800151b
 8000c90:	0800151b 	.word	0x0800151b
 8000c94:	0800151b 	.word	0x0800151b
 8000c98:	0800151b 	.word	0x0800151b
 8000c9c:	0800151b 	.word	0x0800151b
 8000ca0:	0800151b 	.word	0x0800151b
 8000ca4:	0800151b 	.word	0x0800151b
 8000ca8:	0800151b 	.word	0x0800151b
 8000cac:	0800151b 	.word	0x0800151b
 8000cb0:	0800151b 	.word	0x0800151b
 8000cb4:	0800151b 	.word	0x0800151b
 8000cb8:	0800151b 	.word	0x0800151b
 8000cbc:	0800151b 	.word	0x0800151b
 8000cc0:	0800151b 	.word	0x0800151b
 8000cc4:	0800151b 	.word	0x0800151b
 8000cc8:	0800151b 	.word	0x0800151b
 8000ccc:	0800151b 	.word	0x0800151b
 8000cd0:	0800151b 	.word	0x0800151b
 8000cd4:	0800151b 	.word	0x0800151b
 8000cd8:	0800151b 	.word	0x0800151b
 8000cdc:	0800151b 	.word	0x0800151b
 8000ce0:	0800151b 	.word	0x0800151b
 8000ce4:	0800151b 	.word	0x0800151b
 8000ce8:	0800151b 	.word	0x0800151b
 8000cec:	0800151b 	.word	0x0800151b
 8000cf0:	0800151b 	.word	0x0800151b
 8000cf4:	0800151b 	.word	0x0800151b
 8000cf8:	0800151b 	.word	0x0800151b
 8000cfc:	0800151b 	.word	0x0800151b
 8000d00:	0800151b 	.word	0x0800151b
 8000d04:	0800151b 	.word	0x0800151b
 8000d08:	0800151b 	.word	0x0800151b
 8000d0c:	0800151b 	.word	0x0800151b
 8000d10:	0800151b 	.word	0x0800151b
 8000d14:	0800151b 	.word	0x0800151b
 8000d18:	0800151b 	.word	0x0800151b
 8000d1c:	0800151b 	.word	0x0800151b
 8000d20:	0800151b 	.word	0x0800151b
 8000d24:	0800151b 	.word	0x0800151b
 8000d28:	0800151b 	.word	0x0800151b
 8000d2c:	0800151b 	.word	0x0800151b
 8000d30:	08001335 	.word	0x08001335
 8000d34:	0800151b 	.word	0x0800151b
 8000d38:	0800151b 	.word	0x0800151b
 8000d3c:	0800151b 	.word	0x0800151b
 8000d40:	0800151b 	.word	0x0800151b
 8000d44:	0800151b 	.word	0x0800151b
 8000d48:	0800151b 	.word	0x0800151b
 8000d4c:	0800151b 	.word	0x0800151b
 8000d50:	0800131b 	.word	0x0800131b
 8000d54:	0800151b 	.word	0x0800151b
 8000d58:	0800151b 	.word	0x0800151b
 8000d5c:	0800151b 	.word	0x0800151b
 8000d60:	08001369 	.word	0x08001369
 8000d64:	0800151b 	.word	0x0800151b
 8000d68:	0800151b 	.word	0x0800151b
 8000d6c:	0800151b 	.word	0x0800151b
 8000d70:	0800151b 	.word	0x0800151b
 8000d74:	0800151b 	.word	0x0800151b
 8000d78:	080012cd 	.word	0x080012cd
 8000d7c:	0800151b 	.word	0x0800151b
 8000d80:	0800151b 	.word	0x0800151b
 8000d84:	08001299 	.word	0x08001299
 8000d88:	0800151b 	.word	0x0800151b
 8000d8c:	0800151b 	.word	0x0800151b
 8000d90:	0800151b 	.word	0x0800151b
 8000d94:	08001301 	.word	0x08001301
 8000d98:	0800151b 	.word	0x0800151b
 8000d9c:	080012b3 	.word	0x080012b3
 8000da0:	0800151b 	.word	0x0800151b
 8000da4:	0800151b 	.word	0x0800151b
 8000da8:	0800151b 	.word	0x0800151b
 8000dac:	0800151b 	.word	0x0800151b
 8000db0:	08001341 	.word	0x08001341
 8000db4:	0800151b 	.word	0x0800151b
 8000db8:	0800151b 	.word	0x0800151b
 8000dbc:	0800151b 	.word	0x0800151b
 8000dc0:	0800151b 	.word	0x0800151b
 8000dc4:	0800151b 	.word	0x0800151b
 8000dc8:	0800151b 	.word	0x0800151b
 8000dcc:	0800151b 	.word	0x0800151b
 8000dd0:	08001327 	.word	0x08001327
 8000dd4:	0800151b 	.word	0x0800151b
 8000dd8:	0800151b 	.word	0x0800151b
 8000ddc:	0800151b 	.word	0x0800151b
 8000de0:	08001375 	.word	0x08001375
 8000de4:	0800151b 	.word	0x0800151b
 8000de8:	0800151b 	.word	0x0800151b
 8000dec:	0800151b 	.word	0x0800151b
 8000df0:	0800151b 	.word	0x0800151b
 8000df4:	0800151b 	.word	0x0800151b
 8000df8:	080012d9 	.word	0x080012d9
 8000dfc:	0800151b 	.word	0x0800151b
 8000e00:	0800151b 	.word	0x0800151b
 8000e04:	080012a5 	.word	0x080012a5
 8000e08:	0800151b 	.word	0x0800151b
 8000e0c:	0800151b 	.word	0x0800151b
 8000e10:	0800151b 	.word	0x0800151b
 8000e14:	0800130d 	.word	0x0800130d
 8000e18:	0800151b 	.word	0x0800151b
 8000e1c:	080012bf 	.word	0x080012bf
 8000e20:	0800151b 	.word	0x0800151b
 8000e24:	0800151b 	.word	0x0800151b
 8000e28:	0800151b 	.word	0x0800151b
 8000e2c:	0800151b 	.word	0x0800151b
 8000e30:	0800151b 	.word	0x0800151b
 8000e34:	0800151b 	.word	0x0800151b
 8000e38:	0800151b 	.word	0x0800151b
 8000e3c:	0800151b 	.word	0x0800151b
 8000e40:	0800151b 	.word	0x0800151b
 8000e44:	0800151b 	.word	0x0800151b
 8000e48:	0800151b 	.word	0x0800151b
 8000e4c:	0800151b 	.word	0x0800151b
 8000e50:	0800151b 	.word	0x0800151b
 8000e54:	0800151b 	.word	0x0800151b
 8000e58:	0800151b 	.word	0x0800151b
 8000e5c:	0800151b 	.word	0x0800151b
 8000e60:	0800151b 	.word	0x0800151b
 8000e64:	0800151b 	.word	0x0800151b
 8000e68:	0800151b 	.word	0x0800151b
 8000e6c:	0800151b 	.word	0x0800151b
 8000e70:	0800151b 	.word	0x0800151b
 8000e74:	0800151b 	.word	0x0800151b
 8000e78:	0800151b 	.word	0x0800151b
 8000e7c:	0800151b 	.word	0x0800151b
 8000e80:	0800151b 	.word	0x0800151b
 8000e84:	0800151b 	.word	0x0800151b
 8000e88:	0800151b 	.word	0x0800151b
 8000e8c:	0800151b 	.word	0x0800151b
 8000e90:	0800151b 	.word	0x0800151b
 8000e94:	0800151b 	.word	0x0800151b
 8000e98:	0800151b 	.word	0x0800151b
 8000e9c:	0800151b 	.word	0x0800151b
 8000ea0:	0800151b 	.word	0x0800151b
 8000ea4:	0800151b 	.word	0x0800151b
 8000ea8:	0800151b 	.word	0x0800151b
 8000eac:	0800151b 	.word	0x0800151b
 8000eb0:	0800151b 	.word	0x0800151b
 8000eb4:	0800151b 	.word	0x0800151b
 8000eb8:	0800151b 	.word	0x0800151b
 8000ebc:	0800151b 	.word	0x0800151b
 8000ec0:	0800151b 	.word	0x0800151b
 8000ec4:	0800151b 	.word	0x0800151b
 8000ec8:	0800151b 	.word	0x0800151b
 8000ecc:	0800151b 	.word	0x0800151b
 8000ed0:	0800151b 	.word	0x0800151b
 8000ed4:	0800151b 	.word	0x0800151b
 8000ed8:	0800151b 	.word	0x0800151b
 8000edc:	0800151b 	.word	0x0800151b
 8000ee0:	0800151b 	.word	0x0800151b
 8000ee4:	0800151b 	.word	0x0800151b
 8000ee8:	0800151b 	.word	0x0800151b
 8000eec:	0800151b 	.word	0x0800151b
 8000ef0:	0800151b 	.word	0x0800151b
 8000ef4:	0800151b 	.word	0x0800151b
 8000ef8:	0800151b 	.word	0x0800151b
 8000efc:	0800151b 	.word	0x0800151b
 8000f00:	0800151b 	.word	0x0800151b
 8000f04:	0800151b 	.word	0x0800151b
 8000f08:	0800151b 	.word	0x0800151b
 8000f0c:	0800151b 	.word	0x0800151b
 8000f10:	0800151b 	.word	0x0800151b
 8000f14:	0800151b 	.word	0x0800151b
 8000f18:	0800151b 	.word	0x0800151b
 8000f1c:	0800151b 	.word	0x0800151b
 8000f20:	0800151b 	.word	0x0800151b
 8000f24:	0800151b 	.word	0x0800151b
 8000f28:	0800151b 	.word	0x0800151b
 8000f2c:	0800151b 	.word	0x0800151b
 8000f30:	0800151b 	.word	0x0800151b
 8000f34:	0800151b 	.word	0x0800151b
 8000f38:	0800151b 	.word	0x0800151b
 8000f3c:	0800151b 	.word	0x0800151b
 8000f40:	0800151b 	.word	0x0800151b
 8000f44:	0800151b 	.word	0x0800151b
 8000f48:	0800151b 	.word	0x0800151b
 8000f4c:	0800151b 	.word	0x0800151b
 8000f50:	0800151b 	.word	0x0800151b
 8000f54:	0800151b 	.word	0x0800151b
 8000f58:	0800151b 	.word	0x0800151b
 8000f5c:	0800151b 	.word	0x0800151b
 8000f60:	0800151b 	.word	0x0800151b
 8000f64:	0800151b 	.word	0x0800151b
 8000f68:	0800151b 	.word	0x0800151b
 8000f6c:	080012e7 	.word	0x080012e7
 8000f70:	080012f3 	.word	0x080012f3
 8000f74:	0800151b 	.word	0x0800151b
 8000f78:	0800151b 	.word	0x0800151b
 8000f7c:	0800151b 	.word	0x0800151b
 8000f80:	0800151b 	.word	0x0800151b
 8000f84:	0800151b 	.word	0x0800151b
 8000f88:	0800151b 	.word	0x0800151b
 8000f8c:	0800151b 	.word	0x0800151b
 8000f90:	0800151b 	.word	0x0800151b
 8000f94:	0800151b 	.word	0x0800151b
 8000f98:	0800151b 	.word	0x0800151b
 8000f9c:	0800151b 	.word	0x0800151b
 8000fa0:	0800151b 	.word	0x0800151b
 8000fa4:	0800151b 	.word	0x0800151b
 8000fa8:	0800151b 	.word	0x0800151b
 8000fac:	0800151b 	.word	0x0800151b
 8000fb0:	0800151b 	.word	0x0800151b
 8000fb4:	0800151b 	.word	0x0800151b
 8000fb8:	0800151b 	.word	0x0800151b
 8000fbc:	0800151b 	.word	0x0800151b
 8000fc0:	0800151b 	.word	0x0800151b
 8000fc4:	0800151b 	.word	0x0800151b
 8000fc8:	0800151b 	.word	0x0800151b
 8000fcc:	0800151b 	.word	0x0800151b
 8000fd0:	0800151b 	.word	0x0800151b
 8000fd4:	0800151b 	.word	0x0800151b
 8000fd8:	0800151b 	.word	0x0800151b
 8000fdc:	0800151b 	.word	0x0800151b
 8000fe0:	0800151b 	.word	0x0800151b
 8000fe4:	0800151b 	.word	0x0800151b
 8000fe8:	0800151b 	.word	0x0800151b
 8000fec:	0800134f 	.word	0x0800134f
 8000ff0:	0800135b 	.word	0x0800135b
		{
		    case 'A': is_special[i] = 0x02;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	601a      	str	r2, [r3, #0]
		    case 'a': t[i] = 0x04; break;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	4413      	add	r3, r2
 8001008:	2204      	movs	r2, #4
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e28c      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'B': is_special[i] = 0x02;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	2202      	movs	r2, #2
 8001018:	601a      	str	r2, [r3, #0]
		    case 'b': t[i] = 0x05; break;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	4413      	add	r3, r2
 8001022:	2205      	movs	r2, #5
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e27f      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'C': is_special[i] = 0x02;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	2202      	movs	r2, #2
 8001032:	601a      	str	r2, [r3, #0]
		    case 'c': t[i] = 0x06; break;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	4413      	add	r3, r2
 800103c:	2206      	movs	r2, #6
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e272      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'D': is_special[i] = 0x02;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	2202      	movs	r2, #2
 800104c:	601a      	str	r2, [r3, #0]
		    case 'd': t[i] = 0x07; break;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	2207      	movs	r2, #7
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e265      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'E': is_special[i] = 0x02;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	2202      	movs	r2, #2
 8001066:	601a      	str	r2, [r3, #0]
		    case 'e': t[i] = 0x08; break;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	4413      	add	r3, r2
 8001070:	2208      	movs	r2, #8
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e258      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'F': is_special[i] = 0x02;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	2202      	movs	r2, #2
 8001080:	601a      	str	r2, [r3, #0]
		    case 'f': t[i] = 0x09; break;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	2209      	movs	r2, #9
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e24b      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'G': is_special[i] = 0x02;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	2202      	movs	r2, #2
 800109a:	601a      	str	r2, [r3, #0]
		    case 'g': t[i] = 0x0a; break;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	220a      	movs	r2, #10
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e23e      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'H': is_special[i] = 0x02;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	2202      	movs	r2, #2
 80010b4:	601a      	str	r2, [r3, #0]
		    case 'h': t[i] = 0x0b; break;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	4413      	add	r3, r2
 80010be:	220b      	movs	r2, #11
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	e231      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'I': is_special[i] = 0x02;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	2202      	movs	r2, #2
 80010ce:	601a      	str	r2, [r3, #0]
		    case 'i': t[i] = 0x0c; break;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	4413      	add	r3, r2
 80010d8:	220c      	movs	r2, #12
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e224      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'J': is_special[i] = 0x02;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	2202      	movs	r2, #2
 80010e8:	601a      	str	r2, [r3, #0]
		    case 'j': t[i] = 0x0d; break;
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	4413      	add	r3, r2
 80010f2:	220d      	movs	r2, #13
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e217      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'K': is_special[i] = 0x02;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	2202      	movs	r2, #2
 8001102:	601a      	str	r2, [r3, #0]
		    case 'k': t[i] = 0x0e; break;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	4413      	add	r3, r2
 800110c:	220e      	movs	r2, #14
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e20a      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'L': is_special[i] = 0x02;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	2202      	movs	r2, #2
 800111c:	601a      	str	r2, [r3, #0]
		    case 'l': t[i] = 0x0f; break;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	4413      	add	r3, r2
 8001126:	220f      	movs	r2, #15
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e1fd      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'M': is_special[i] = 0x02;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	2202      	movs	r2, #2
 8001136:	601a      	str	r2, [r3, #0]
		    case 'm': t[i] = 0x10; break;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	4413      	add	r3, r2
 8001140:	2210      	movs	r2, #16
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e1f0      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'N': is_special[i] = 0x02;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	2202      	movs	r2, #2
 8001150:	601a      	str	r2, [r3, #0]
		    case 'n': t[i] = 0x11; break;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	4413      	add	r3, r2
 800115a:	2211      	movs	r2, #17
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e1e3      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'O': is_special[i] = 0x02;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	2202      	movs	r2, #2
 800116a:	601a      	str	r2, [r3, #0]
		    case 'o': t[i] = 0x12; break;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	4413      	add	r3, r2
 8001174:	2212      	movs	r2, #18
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e1d6      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'P': is_special[i] = 0x02;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	2202      	movs	r2, #2
 8001184:	601a      	str	r2, [r3, #0]
		    case 'p': t[i] = 0x13; break;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	4413      	add	r3, r2
 800118e:	2213      	movs	r2, #19
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e1c9      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'Q': is_special[i] = 0x02;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	2202      	movs	r2, #2
 800119e:	601a      	str	r2, [r3, #0]
		    case 'q': t[i] = 0x14; break;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	4413      	add	r3, r2
 80011a8:	2214      	movs	r2, #20
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e1bc      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'R': is_special[i] = 0x02;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	2202      	movs	r2, #2
 80011b8:	601a      	str	r2, [r3, #0]
		    case 'r': t[i] = 0x15; break;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	4413      	add	r3, r2
 80011c2:	2215      	movs	r2, #21
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e1af      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'S': is_special[i] = 0x02;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	2202      	movs	r2, #2
 80011d2:	601a      	str	r2, [r3, #0]
		    case 's': t[i] = 0x16; break;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	4413      	add	r3, r2
 80011dc:	2216      	movs	r2, #22
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e1a2      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'T': is_special[i] = 0x02;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	2202      	movs	r2, #2
 80011ec:	601a      	str	r2, [r3, #0]
		    case 't': t[i] = 0x17; break;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	4413      	add	r3, r2
 80011f6:	2217      	movs	r2, #23
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e195      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'U': is_special[i] = 0x02;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	2202      	movs	r2, #2
 8001206:	601a      	str	r2, [r3, #0]
		    case 'u': t[i] = 0x18; break;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	4413      	add	r3, r2
 8001210:	2218      	movs	r2, #24
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e188      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'V': is_special[i] = 0x02;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	2202      	movs	r2, #2
 8001220:	601a      	str	r2, [r3, #0]
		    case 'v': t[i] = 0x19; break;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	4413      	add	r3, r2
 800122a:	2219      	movs	r2, #25
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e17b      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'W': is_special[i] = 0x02;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	2202      	movs	r2, #2
 800123a:	601a      	str	r2, [r3, #0]
		    case 'w': t[i] = 0x1a; break;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	221a      	movs	r2, #26
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e16e      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'X': is_special[i] = 0x02;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	2202      	movs	r2, #2
 8001254:	601a      	str	r2, [r3, #0]
		    case 'x': t[i] = 0x1b; break;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	4413      	add	r3, r2
 800125e:	221b      	movs	r2, #27
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e161      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'Y': is_special[i] = 0x02;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	2202      	movs	r2, #2
 800126e:	601a      	str	r2, [r3, #0]
		    case 'y': t[i] = 0x1d; break;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	4413      	add	r3, r2
 8001278:	221d      	movs	r2, #29
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e154      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 'Z': is_special[i] = 0x02;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	2202      	movs	r2, #2
 8001288:	601a      	str	r2, [r3, #0]
		    case 'z': t[i] = 0x1c; break;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	4413      	add	r3, r2
 8001292:	221c      	movs	r2, #28
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e147      	b.n	8001528 <convert_message_hun+0xb1c>

		    case L'Ö': is_special[i] = 0x20;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	2220      	movs	r2, #32
 80012a2:	601a      	str	r2, [r3, #0]
		    case L'ö': t[i] = 0x27; break;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	4413      	add	r3, r2
 80012ac:	2227      	movs	r2, #39	@ 0x27
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e13a      	b.n	8001528 <convert_message_hun+0xb1c>
			case L'Ü': is_special[i] = 0x20;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	2220      	movs	r2, #32
 80012bc:	601a      	str	r2, [r3, #0]
			case L'ü': t[i] = 0x2d; break;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	4413      	add	r3, r2
 80012c6:	222d      	movs	r2, #45	@ 0x2d
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e12d      	b.n	8001528 <convert_message_hun+0xb1c>
			case L'Ó': is_special[i] = 0x20;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	2220      	movs	r2, #32
 80012d6:	601a      	str	r2, [r3, #0]
			case L'ó': t[i] = 0x2e; break;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	4413      	add	r3, r2
 80012e0:	222e      	movs	r2, #46	@ 0x2e
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e120      	b.n	8001528 <convert_message_hun+0xb1c>
			case L'Ő': is_special[i] = 0x20;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	2220      	movs	r2, #32
 80012f0:	601a      	str	r2, [r3, #0]
			case L'ő': t[i] = 0x2f; break;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	4413      	add	r3, r2
 80012fa:	222f      	movs	r2, #47	@ 0x2f
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e113      	b.n	8001528 <convert_message_hun+0xb1c>
			case L'Ú': is_special[i] = 0x20;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	2220      	movs	r2, #32
 800130a:	601a      	str	r2, [r3, #0]
			case L'ú': t[i] = 0x30; break;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	4413      	add	r3, r2
 8001314:	2230      	movs	r2, #48	@ 0x30
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e106      	b.n	8001528 <convert_message_hun+0xb1c>
			case L'É': is_special[i] = 0x20;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	2220      	movs	r2, #32
 8001324:	601a      	str	r2, [r3, #0]
			case L'é': t[i] = 0x33; break;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	4413      	add	r3, r2
 800132e:	2233      	movs	r2, #51	@ 0x33
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e0f9      	b.n	8001528 <convert_message_hun+0xb1c>
			case L'Á': is_special[i] = 0x20;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	2220      	movs	r2, #32
 800133e:	601a      	str	r2, [r3, #0]
			case L'á': t[i] = 0x34; break;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	2234      	movs	r2, #52	@ 0x34
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e0ec      	b.n	8001528 <convert_message_hun+0xb1c>
			case L'Ű': is_special[i] = 0x20;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	2220      	movs	r2, #32
 8001358:	601a      	str	r2, [r3, #0]
			case L'ű': t[i] = 0x31; break;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	4413      	add	r3, r2
 8001362:	2231      	movs	r2, #49	@ 0x31
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e0df      	b.n	8001528 <convert_message_hun+0xb1c>
			case L'Í': is_special[i] = 0x20;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	2220      	movs	r2, #32
 8001372:	601a      	str	r2, [r3, #0]
			case L'í': t[i] = 0x64; break;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	2264      	movs	r2, #100	@ 0x64
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e0d2      	b.n	8001528 <convert_message_hun+0xb1c>

		    case '\n': t[i] = 0x28; break;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	2228      	movs	r2, #40	@ 0x28
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e0cb      	b.n	8001528 <convert_message_hun+0xb1c>
		    case ' ': t[i] = 0x2c; break;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4413      	add	r3, r2
 8001398:	222c      	movs	r2, #44	@ 0x2c
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	e0c4      	b.n	8001528 <convert_message_hun+0xb1c>
		    case ',': t[i] = 0x36; break;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	4413      	add	r3, r2
 80013a6:	2236      	movs	r2, #54	@ 0x36
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e0bd      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '.': t[i] = 0x37; break;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	4413      	add	r3, r2
 80013b4:	2237      	movs	r2, #55	@ 0x37
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e0b6      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '-': t[i] = 0x38; break;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	2238      	movs	r2, #56	@ 0x38
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e0af      	b.n	8001528 <convert_message_hun+0xb1c>

		    case '/': t[i] = 0x54; break;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	4413      	add	r3, r2
 80013d0:	2254      	movs	r2, #84	@ 0x54
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	e0a8      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '*': t[i] = 0x55; break;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	4413      	add	r3, r2
 80013de:	2255      	movs	r2, #85	@ 0x55
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e0a1      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '+': t[i] = 0x57; break;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	4413      	add	r3, r2
 80013ec:	2257      	movs	r2, #87	@ 0x57
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e09a      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '?': is_special[i] = 0x20; t[i] = 0x36; break;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	2220      	movs	r2, #32
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	4413      	add	r3, r2
 8001406:	2236      	movs	r2, #54	@ 0x36
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e08d      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '!': is_special[i] = 0x20; t[i] = 0x21; break;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	2220      	movs	r2, #32
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	4413      	add	r3, r2
 8001420:	2221      	movs	r2, #33	@ 0x21
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e080      	b.n	8001528 <convert_message_hun+0xb1c>
		    case ':': is_special[i] = 0x20; t[i] = 0x37; break;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	2220      	movs	r2, #32
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	4413      	add	r3, r2
 800143a:	2237      	movs	r2, #55	@ 0x37
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e073      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '\t': is_special[i] = 0x00; t[i] = 0x2b; break;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	4413      	add	r3, r2
 8001454:	222b      	movs	r2, #43	@ 0x2b
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e066      	b.n	8001528 <convert_message_hun+0xb1c>
		    case 127: is_special[i] = 0x00; t[i] = 0x2a; break; // delete
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	222a      	movs	r2, #42	@ 0x2a
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e059      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '@': is_special[i] = 0x40; t[i] = 0x19; break;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	2240      	movs	r2, #64	@ 0x40
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	4413      	add	r3, r2
 8001488:	2219      	movs	r2, #25
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e04c      	b.n	8001528 <convert_message_hun+0xb1c>

		    case '0': t[i] = 0x35; break;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	2235      	movs	r2, #53	@ 0x35
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e045      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '1': t[i] = 0x1e; break;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	4413      	add	r3, r2
 80014a4:	221e      	movs	r2, #30
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e03e      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '2': t[i] = 0x1f; break;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	221f      	movs	r2, #31
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	e037      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '3': t[i] = 0x20; break;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	4413      	add	r3, r2
 80014c0:	2220      	movs	r2, #32
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e030      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '4': t[i] = 0x21; break;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4413      	add	r3, r2
 80014ce:	2221      	movs	r2, #33	@ 0x21
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e029      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '5': t[i] = 0x22; break;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	4413      	add	r3, r2
 80014dc:	2222      	movs	r2, #34	@ 0x22
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e022      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '6': t[i] = 0x23; break;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	2223      	movs	r2, #35	@ 0x23
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e01b      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '7': t[i] = 0x24; break;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	4413      	add	r3, r2
 80014f8:	2224      	movs	r2, #36	@ 0x24
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e014      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '8': t[i] = 0x25; break;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	4413      	add	r3, r2
 8001506:	2225      	movs	r2, #37	@ 0x25
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e00d      	b.n	8001528 <convert_message_hun+0xb1c>
		    case '9': t[i] = 0x26; break;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	4413      	add	r3, r2
 8001514:	2226      	movs	r2, #38	@ 0x26
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e006      	b.n	8001528 <convert_message_hun+0xb1c>

		    default: t[i] = 0x00; break;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	4413      	add	r3, r2
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	bf00      	nop
	for(int i=0; i<length; ++i)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	429a      	cmp	r2, r3
 8001534:	f6ff aa79 	blt.w	8000a2a <convert_message_hun+0x1e>
		}
	}

	t[length] = 0x00;
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	4413      	add	r3, r2
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
	is_special[length]= 0x00;
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

	return t;
 8001550:	68bb      	ldr	r3, [r7, #8]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <Error_Handler+0x8>

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a08      	ldr	r2, [pc, #32]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <NMI_Handler+0x4>

080015c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <MemManage_Handler+0x4>

080015d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <UsageFault_Handler+0x4>

080015e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160e:	f000 f953 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800161c:	4802      	ldr	r0, [pc, #8]	@ (8001628 <OTG_FS_IRQHandler+0x10>)
 800161e:	f000 fd9a 	bl	8002156 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200002f8 	.word	0x200002f8

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f006 ff4a 	bl	80084f4 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20010000 	.word	0x20010000
 800168c:	00000400 	.word	0x00000400
 8001690:	200002f4 	.word	0x200002f4
 8001694:	20001228 	.word	0x20001228

08001698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ca:	2204      	movs	r2, #4
 80016cc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d0:	2202      	movs	r2, #2
 80016d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016dc:	2202      	movs	r2, #2
 80016de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001700:	f000 fbe5 	bl	8001ece <HAL_PCD_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800170a:	f7ff ff27 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200002f8 	.word	0x200002f8

08001718 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001738:	d13a      	bne.n	80017b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b1e      	ldr	r3, [pc, #120]	@ (80017b8 <HAL_PCD_MspInit+0xa0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a1d      	ldr	r2, [pc, #116]	@ (80017b8 <HAL_PCD_MspInit+0xa0>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_PCD_MspInit+0xa0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001756:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001768:	230a      	movs	r3, #10
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4812      	ldr	r0, [pc, #72]	@ (80017bc <HAL_PCD_MspInit+0xa4>)
 8001774:	f000 f9f6 	bl	8001b64 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_PCD_MspInit+0xa0>)
 800177a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177c:	4a0e      	ldr	r2, [pc, #56]	@ (80017b8 <HAL_PCD_MspInit+0xa0>)
 800177e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001782:	6353      	str	r3, [r2, #52]	@ 0x34
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <HAL_PCD_MspInit+0xa0>)
 800178a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178c:	4a0a      	ldr	r2, [pc, #40]	@ (80017b8 <HAL_PCD_MspInit+0xa0>)
 800178e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001792:	6453      	str	r3, [r2, #68]	@ 0x44
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <HAL_PCD_MspInit+0xa0>)
 8001796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2043      	movs	r0, #67	@ 0x43
 80017a6:	f000 f9a6 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80017aa:	2043      	movs	r0, #67	@ 0x43
 80017ac:	f000 f9bf 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	@ 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020000 	.word	0x40020000

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017c4:	f7ff ff68 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ca:	490d      	ldr	r1, [pc, #52]	@ (8001800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e0:	4c0a      	ldr	r4, [pc, #40]	@ (800180c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ee:	f006 fe87 	bl	8008500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7fe ff2d 	bl	8000650 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001804:	080090fc 	.word	0x080090fc
  ldr r2, =_sbss
 8001808:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 800180c:	20001224 	.word	0x20001224

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f94f 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	200f      	movs	r0, #15
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fe8e 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f967 	bl	8001b4a <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f92f 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	@ (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000004 	.word	0x20000004
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	200007dc 	.word	0x200007dc

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200007dc 	.word	0x200007dc

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000000c 	.word	0x2000000c

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4907      	ldr	r1, [pc, #28]	@ (80019dc <__NVIC_EnableIRQ+0x38>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	@ (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	@ (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff29 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff3e 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff8e 	bl	8001a34 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5d 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff31 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e159      	b.n	8001e34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 8148 	bne.w	8001e2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d005      	beq.n	8001bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d130      	bne.n	8001c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0201 	and.w	r2, r3, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d017      	beq.n	8001c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80a2 	beq.w	8001e2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b57      	ldr	r3, [pc, #348]	@ (8001e4c <HAL_GPIO_Init+0x2e8>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	4a56      	ldr	r2, [pc, #344]	@ (8001e4c <HAL_GPIO_Init+0x2e8>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfa:	4b54      	ldr	r3, [pc, #336]	@ (8001e4c <HAL_GPIO_Init+0x2e8>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d06:	4a52      	ldr	r2, [pc, #328]	@ (8001e50 <HAL_GPIO_Init+0x2ec>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a49      	ldr	r2, [pc, #292]	@ (8001e54 <HAL_GPIO_Init+0x2f0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x202>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a48      	ldr	r2, [pc, #288]	@ (8001e58 <HAL_GPIO_Init+0x2f4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x1fe>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a47      	ldr	r2, [pc, #284]	@ (8001e5c <HAL_GPIO_Init+0x2f8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x1fa>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a46      	ldr	r2, [pc, #280]	@ (8001e60 <HAL_GPIO_Init+0x2fc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x1f6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a45      	ldr	r2, [pc, #276]	@ (8001e64 <HAL_GPIO_Init+0x300>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x1f2>
 8001d52:	2304      	movs	r3, #4
 8001d54:	e008      	b.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d66:	2300      	movs	r3, #0
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f002 0203 	and.w	r2, r2, #3
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d78:	4935      	ldr	r1, [pc, #212]	@ (8001e50 <HAL_GPIO_Init+0x2ec>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d86:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001daa:	4a2f      	ldr	r2, [pc, #188]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd4:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dda:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e04:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e28:	4a0f      	ldr	r2, [pc, #60]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	f67f aea2 	bls.w	8001b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3724      	adds	r7, #36	@ 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40013800 	.word	0x40013800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020c00 	.word	0x40020c00
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40013c00 	.word	0x40013c00

08001e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e001      	b.n	8001e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb8:	e003      	b.n	8001ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af02      	add	r7, sp, #8
 8001ed4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e101      	b.n	80020e4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fc0c 	bl	8001718 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2203      	movs	r2, #3
 8001f04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f0e:	d102      	bne.n	8001f16 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 ff71 	bl	8003e02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7c1a      	ldrb	r2, [r3, #16]
 8001f28:	f88d 2000 	strb.w	r2, [sp]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f30:	f001 fe50 	bl	8003bd4 <USB_CoreInit>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0ce      	b.n	80020e4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f001 ff69 	bl	8003e24 <USB_SetCurrentMode>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0bf      	b.n	80020e4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e04a      	b.n	8002000 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	3315      	adds	r3, #21
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3314      	adds	r3, #20
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	b298      	uxth	r0, r3
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	332e      	adds	r3, #46	@ 0x2e
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3318      	adds	r3, #24
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	331c      	adds	r3, #28
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3320      	adds	r3, #32
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3324      	adds	r3, #36	@ 0x24
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	791b      	ldrb	r3, [r3, #4]
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	429a      	cmp	r2, r3
 8002008:	d3af      	bcc.n	8001f6a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e044      	b.n	800209a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	3301      	adds	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	791b      	ldrb	r3, [r3, #4]
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d3b5      	bcc.n	8002010 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7c1a      	ldrb	r2, [r3, #16]
 80020ac:	f88d 2000 	strb.w	r2, [sp]
 80020b0:	3304      	adds	r3, #4
 80020b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b4:	f001 ff02 	bl	8003ebc <USB_DevInit>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00c      	b.n	80020e4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 ff4c 	bl	8004f7a <USB_DevDisconnect>

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_PCD_Start+0x1c>
 8002104:	2302      	movs	r3, #2
 8002106:	e022      	b.n	800214e <HAL_PCD_Start+0x62>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002128:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f001 fe53 	bl	8003de0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f002 fefa 	bl	8004f38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002156:	b590      	push	{r4, r7, lr}
 8002158:	b08d      	sub	sp, #52	@ 0x34
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f002 ffb8 	bl	80050e2 <USB_GetMode>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	f040 848c 	bne.w	8002a92 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f002 ff1c 	bl	8004fbc <USB_ReadInterrupts>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8482 	beq.w	8002a90 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f002 ff09 	bl	8004fbc <USB_ReadInterrupts>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d107      	bne.n	80021c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f002 0202 	and.w	r2, r2, #2
 80021c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 fef7 	bl	8004fbc <USB_ReadInterrupts>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d161      	bne.n	800229c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0210 	bic.w	r2, r2, #16
 80021e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f003 020f 	and.w	r2, r3, #15
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	3304      	adds	r3, #4
 8002206:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	0c5b      	lsrs	r3, r3, #17
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	2b02      	cmp	r3, #2
 8002212:	d124      	bne.n	800225e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d035      	beq.n	800228c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800222a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	6a38      	ldr	r0, [r7, #32]
 8002234:	f002 fd2e 	bl	8004c94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002244:	441a      	add	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002256:	441a      	add	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	615a      	str	r2, [r3, #20]
 800225c:	e016      	b.n	800228c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	0c5b      	lsrs	r3, r3, #17
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	2b06      	cmp	r3, #6
 8002268:	d110      	bne.n	800228c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002270:	2208      	movs	r2, #8
 8002272:	4619      	mov	r1, r3
 8002274:	6a38      	ldr	r0, [r7, #32]
 8002276:	f002 fd0d 	bl	8004c94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002286:	441a      	add	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0210 	orr.w	r2, r2, #16
 800229a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fe8b 	bl	8004fbc <USB_ReadInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80022b0:	f040 80a7 	bne.w	8002402 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 fe90 	bl	8004fe2 <USB_ReadDevAllOutEpInterrupt>
 80022c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80022c4:	e099      	b.n	80023fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 808e 	beq.w	80023ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 feb4 	bl	800504a <USB_ReadDevOutEPInterrupt>
 80022e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00c      	beq.n	8002308 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022fa:	461a      	mov	r2, r3
 80022fc:	2301      	movs	r3, #1
 80022fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fea4 	bl	8003050 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231e:	461a      	mov	r2, r3
 8002320:	2308      	movs	r3, #8
 8002322:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002324:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 ff7a 	bl	8003220 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002342:	461a      	mov	r2, r3
 8002344:	2310      	movs	r3, #16
 8002346:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d030      	beq.n	80023b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235a:	2b80      	cmp	r3, #128	@ 0x80
 800235c:	d109      	bne.n	8002372 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800236c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002370:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	3304      	adds	r3, #4
 8002386:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	78db      	ldrb	r3, [r3, #3]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d108      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2200      	movs	r2, #0
 8002394:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4619      	mov	r1, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f005 fe35 	bl	800800c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ae:	461a      	mov	r2, r3
 80023b0:	2302      	movs	r3, #2
 80023b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ca:	461a      	mov	r2, r3
 80023cc:	2320      	movs	r3, #32
 80023ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e6:	461a      	mov	r2, r3
 80023e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	3301      	adds	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80023f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80023fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f47f af62 	bne.w	80022c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f002 fdd8 	bl	8004fbc <USB_ReadInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002416:	f040 80db 	bne.w	80025d0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f002 fdf9 	bl	8005016 <USB_ReadDevAllInEpInterrupt>
 8002424:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800242a:	e0cd      	b.n	80025c8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800242c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80c2 	beq.w	80025bc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f002 fe1f 	bl	8005086 <USB_ReadDevInEPInterrupt>
 8002448:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d057      	beq.n	8002504 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	2201      	movs	r2, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	69f9      	ldr	r1, [r7, #28]
 8002470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002474:	4013      	ands	r3, r2
 8002476:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002484:	461a      	mov	r2, r3
 8002486:	2301      	movs	r3, #1
 8002488:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	799b      	ldrb	r3, [r3, #6]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d132      	bne.n	80024f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	3320      	adds	r3, #32
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4403      	add	r3, r0
 80024b2:	331c      	adds	r3, #28
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4419      	add	r1, r3
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4403      	add	r3, r0
 80024c6:	3320      	adds	r3, #32
 80024c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d113      	bne.n	80024f8 <HAL_PCD_IRQHandler+0x3a2>
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3324      	adds	r3, #36	@ 0x24
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d108      	bne.n	80024f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024f0:	461a      	mov	r2, r3
 80024f2:	2101      	movs	r1, #1
 80024f4:	f002 fe26 	bl	8005144 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f005 fcff 	bl	8007f02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800251a:	461a      	mov	r2, r3
 800251c:	2308      	movs	r3, #8
 800251e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002536:	461a      	mov	r2, r3
 8002538:	2310      	movs	r3, #16
 800253a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002552:	461a      	mov	r2, r3
 8002554:	2340      	movs	r3, #64	@ 0x40
 8002556:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d023      	beq.n	80025aa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002562:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002564:	6a38      	ldr	r0, [r7, #32]
 8002566:	f001 fe0d 	bl	8004184 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800256a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	3310      	adds	r3, #16
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	3304      	adds	r3, #4
 800257c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	78db      	ldrb	r3, [r3, #3]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2200      	movs	r2, #0
 800258a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f005 fd4c 	bl	8008030 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025a4:	461a      	mov	r2, r3
 80025a6:	2302      	movs	r3, #2
 80025a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fcbd 	bl	8002f36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	3301      	adds	r3, #1
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80025c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f47f af2e 	bne.w	800242c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fcf1 	bl	8004fbc <USB_ReadInterrupts>
 80025da:	4603      	mov	r3, r0
 80025dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025e4:	d122      	bne.n	800262c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002600:	2b01      	cmp	r3, #1
 8002602:	d108      	bne.n	8002616 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800260c:	2100      	movs	r1, #0
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fea4 	bl	800335c <HAL_PCDEx_LPM_Callback>
 8002614:	e002      	b.n	800261c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f005 fcea 	bl	8007ff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800262a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fcc3 	bl	8004fbc <USB_ReadInterrupts>
 8002636:	4603      	mov	r3, r0
 8002638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800263c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002640:	d112      	bne.n	8002668 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d102      	bne.n	8002658 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f005 fca6 	bl	8007fa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002666:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fca5 	bl	8004fbc <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800267c:	f040 80b7 	bne.w	80027ee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2110      	movs	r1, #16
 800269a:	4618      	mov	r0, r3
 800269c:	f001 fd72 	bl	8004184 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026a4:	e046      	b.n	8002734 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026b2:	461a      	mov	r2, r3
 80026b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80026b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ca:	0151      	lsls	r1, r2, #5
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	440a      	add	r2, r1
 80026d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80026d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026e6:	461a      	mov	r2, r3
 80026e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80026ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026fe:	0151      	lsls	r1, r2, #5
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	440a      	add	r2, r1
 8002704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002708:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800270c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800270e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800271e:	0151      	lsls	r1, r2, #5
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	440a      	add	r2, r1
 8002724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002728:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800272c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002730:	3301      	adds	r3, #1
 8002732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	791b      	ldrb	r3, [r3, #4]
 8002738:	461a      	mov	r2, r3
 800273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273c:	4293      	cmp	r3, r2
 800273e:	d3b2      	bcc.n	80026a6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800274e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002752:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7bdb      	ldrb	r3, [r3, #15]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d016      	beq.n	800278a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800276c:	f043 030b 	orr.w	r3, r3, #11
 8002770:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800277a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002782:	f043 030b 	orr.w	r3, r3, #11
 8002786:	6453      	str	r3, [r2, #68]	@ 0x44
 8002788:	e015      	b.n	80027b6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002798:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800279c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80027a0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027b0:	f043 030b 	orr.w	r3, r3, #11
 80027b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027c4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80027c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027d8:	461a      	mov	r2, r3
 80027da:	f002 fcb3 	bl	8005144 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80027ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fbe2 	bl	8004fbc <USB_ReadInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002802:	d123      	bne.n	800284c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f002 fc78 	bl	80050fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f001 fd2f 	bl	8004276 <USB_GetDevSpeed>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681c      	ldr	r4, [r3, #0]
 8002824:	f001 f9ca 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8002828:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800282e:	461a      	mov	r2, r3
 8002830:	4620      	mov	r0, r4
 8002832:	f001 fa33 	bl	8003c9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f005 fb8b 	bl	8007f52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800284a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f002 fbb3 	bl	8004fbc <USB_ReadInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b08      	cmp	r3, #8
 800285e:	d10a      	bne.n	8002876 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f005 fb68 	bl	8007f36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f002 0208 	and.w	r2, r2, #8
 8002874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fb9e 	bl	8004fbc <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002886:	2b80      	cmp	r3, #128	@ 0x80
 8002888:	d123      	bne.n	80028d2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002896:	2301      	movs	r3, #1
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
 800289a:	e014      	b.n	80028c6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fb0a 	bl	8002ed4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	3301      	adds	r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	791b      	ldrb	r3, [r3, #4]
 80028ca:	461a      	mov	r2, r3
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d3e4      	bcc.n	800289c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fb70 	bl	8004fbc <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028e6:	d13c      	bne.n	8002962 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e8:	2301      	movs	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ec:	e02b      	b.n	8002946 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3318      	adds	r3, #24
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d115      	bne.n	8002940 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002914:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	da12      	bge.n	8002940 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3317      	adds	r3, #23
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002936:	b2db      	uxtb	r3, r3
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 faca 	bl	8002ed4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	3301      	adds	r3, #1
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	791b      	ldrb	r3, [r3, #4]
 800294a:	461a      	mov	r2, r3
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	4293      	cmp	r3, r2
 8002950:	d3cd      	bcc.n	80028ee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f002 fb28 	bl	8004fbc <USB_ReadInterrupts>
 800296c:	4603      	mov	r3, r0
 800296e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002972:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002976:	d156      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002978:	2301      	movs	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
 800297c:	e045      	b.n	8002a0a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d12e      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da2b      	bge.n	8002a04 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80029b8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029bc:	429a      	cmp	r2, r3
 80029be:	d121      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a00:	6053      	str	r3, [r2, #4]
            break;
 8002a02:	e008      	b.n	8002a16 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	3301      	adds	r3, #1
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	791b      	ldrb	r3, [r3, #4]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d3b3      	bcc.n	800297e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fac6 	bl	8004fbc <USB_ReadInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a3a:	d10a      	bne.n	8002a52 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f005 fb09 	bl	8008054 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 fab0 	bl	8004fbc <USB_ReadInterrupts>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d115      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f005 faf9 	bl	8008070 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	e000      	b.n	8002a92 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002a90:	bf00      	nop
    }
  }
}
 8002a92:	3734      	adds	r7, #52	@ 0x34
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd90      	pop	{r4, r7, pc}

08002a98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_PCD_SetAddress+0x1a>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e012      	b.n	8002ad8 <HAL_PCD_SetAddress+0x40>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f002 fa0f 	bl	8004eec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	4608      	mov	r0, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	461a      	mov	r2, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	70fb      	strb	r3, [r7, #3]
 8002af2:	460b      	mov	r3, r1
 8002af4:	803b      	strh	r3, [r7, #0]
 8002af6:	4613      	mov	r3, r2
 8002af8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	da0f      	bge.n	8002b26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	3310      	adds	r3, #16
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	705a      	strb	r2, [r3, #1]
 8002b24:	e00f      	b.n	8002b46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 020f 	and.w	r2, r3, #15
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002b52:	883b      	ldrh	r3, [r7, #0]
 8002b54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	78ba      	ldrb	r2, [r7, #2]
 8002b60:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b74:	78bb      	ldrb	r3, [r7, #2]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d102      	bne.n	8002b80 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_PCD_EP_Open+0xae>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e00e      	b.n	8002bac <HAL_PCD_EP_Open+0xcc>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 fb8f 	bl	80042c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002baa:	7afb      	ldrb	r3, [r7, #11]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	da0f      	bge.n	8002be8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	3310      	adds	r3, #16
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	705a      	strb	r2, [r3, #1]
 8002be6:	e00f      	b.n	8002c08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 020f 	and.w	r2, r3, #15
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3304      	adds	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_PCD_EP_Close+0x6e>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e00e      	b.n	8002c40 <HAL_PCD_EP_Close+0x8c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fbcd 	bl	80043d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	460b      	mov	r3, r1
 8002c56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c58:	7afb      	ldrb	r3, [r7, #11]
 8002c5a:	f003 020f 	and.w	r2, r3, #15
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3304      	adds	r3, #4
 8002c70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2200      	movs	r2, #0
 8002c82:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	799b      	ldrb	r3, [r3, #6]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	799b      	ldrb	r3, [r3, #6]
 8002cac:	461a      	mov	r2, r3
 8002cae:	6979      	ldr	r1, [r7, #20]
 8002cb0:	f001 fc6a 	bl	8004588 <USB_EPStartXfer>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 020f 	and.w	r2, r3, #15
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002ce0:	681b      	ldr	r3, [r3, #0]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfe:	7afb      	ldrb	r3, [r7, #11]
 8002d00:	f003 020f 	and.w	r2, r3, #15
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	3310      	adds	r3, #16
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2200      	movs	r2, #0
 8002d26:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	799b      	ldrb	r3, [r3, #6]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d102      	bne.n	8002d48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	799b      	ldrb	r3, [r3, #6]
 8002d50:	461a      	mov	r2, r3
 8002d52:	6979      	ldr	r1, [r7, #20]
 8002d54:	f001 fc18 	bl	8004588 <USB_EPStartXfer>

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	7912      	ldrb	r2, [r2, #4]
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e04f      	b.n	8002e20 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	da0f      	bge.n	8002da8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	3310      	adds	r3, #16
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	705a      	strb	r2, [r3, #1]
 8002da6:	e00d      	b.n	8002dc4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	3304      	adds	r3, #4
 8002dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_PCD_EP_SetStall+0x82>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e01d      	b.n	8002e20 <HAL_PCD_EP_SetStall+0xbe>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68f9      	ldr	r1, [r7, #12]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 ffa6 	bl	8004d44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7999      	ldrb	r1, [r3, #6]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e10:	461a      	mov	r2, r3
 8002e12:	f002 f997 	bl	8005144 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	7912      	ldrb	r2, [r2, #4]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e042      	b.n	8002ecc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	da0f      	bge.n	8002e6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 020f 	and.w	r2, r3, #15
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	3304      	adds	r3, #4
 8002e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	705a      	strb	r2, [r3, #1]
 8002e6c:	e00f      	b.n	8002e8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	f003 020f 	and.w	r2, r3, #15
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_PCD_EP_ClrStall+0x86>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e00e      	b.n	8002ecc <HAL_PCD_EP_ClrStall+0xa4>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68f9      	ldr	r1, [r7, #12]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 ffaf 	bl	8004e20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	da0c      	bge.n	8002f02 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 020f 	and.w	r2, r3, #15
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	3310      	adds	r3, #16
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e00c      	b.n	8002f1c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 020f 	and.w	r2, r3, #15
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	3304      	adds	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68f9      	ldr	r1, [r7, #12]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 fdce 	bl	8004ac4 <USB_EPStopXfer>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f2c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b08a      	sub	sp, #40	@ 0x28
 8002f3a:	af02      	add	r7, sp, #8
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	3310      	adds	r3, #16
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d901      	bls.n	8002f6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e06b      	b.n	8003046 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d902      	bls.n	8002f8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3303      	adds	r3, #3
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f92:	e02a      	b.n	8002fea <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d902      	bls.n	8002fb0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	3303      	adds	r3, #3
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68d9      	ldr	r1, [r3, #12]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6978      	ldr	r0, [r7, #20]
 8002fce:	f001 fe23 	bl	8004c18 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	441a      	add	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	441a      	add	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d809      	bhi.n	8003014 <PCD_WriteEmptyTxFifo+0xde>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003008:	429a      	cmp	r2, r3
 800300a:	d203      	bcs.n	8003014 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1bf      	bne.n	8002f94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	d811      	bhi.n	8003044 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	2201      	movs	r2, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	43db      	mvns	r3, r3
 800303a:	6939      	ldr	r1, [r7, #16]
 800303c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003040:	4013      	ands	r3, r2
 8003042:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	333c      	adds	r3, #60	@ 0x3c
 8003068:	3304      	adds	r3, #4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	799b      	ldrb	r3, [r3, #6]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d17b      	bne.n	800317e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d015      	beq.n	80030bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	4a61      	ldr	r2, [pc, #388]	@ (8003218 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	f240 80b9 	bls.w	800320c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80b3 	beq.w	800320c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030b2:	461a      	mov	r2, r3
 80030b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b8:	6093      	str	r3, [r2, #8]
 80030ba:	e0a7      	b.n	800320c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d2:	461a      	mov	r2, r3
 80030d4:	2320      	movs	r3, #32
 80030d6:	6093      	str	r3, [r2, #8]
 80030d8:	e098      	b.n	800320c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f040 8093 	bne.w	800320c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003218 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d90f      	bls.n	800310e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003104:	461a      	mov	r2, r3
 8003106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800310a:	6093      	str	r3, [r2, #8]
 800310c:	e07e      	b.n	800320c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	3304      	adds	r3, #4
 8003122:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	0159      	lsls	r1, r3, #5
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	440b      	add	r3, r1
 8003130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d114      	bne.n	8003170 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003158:	461a      	mov	r2, r3
 800315a:	2101      	movs	r1, #1
 800315c:	f001 fff2 	bl	8005144 <USB_EP0_OutStart>
 8003160:	e006      	b.n	8003170 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	441a      	add	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f004 fea8 	bl	8007ecc <HAL_PCD_DataOutStageCallback>
 800317c:	e046      	b.n	800320c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	4a26      	ldr	r2, [pc, #152]	@ (800321c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d124      	bne.n	80031d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800319c:	461a      	mov	r2, r3
 800319e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031a2:	6093      	str	r3, [r2, #8]
 80031a4:	e032      	b.n	800320c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031bc:	461a      	mov	r2, r3
 80031be:	2320      	movs	r3, #32
 80031c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f004 fe7f 	bl	8007ecc <HAL_PCD_DataOutStageCallback>
 80031ce:	e01d      	b.n	800320c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d114      	bne.n	8003200 <PCD_EP_OutXfrComplete_int+0x1b0>
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031f8:	461a      	mov	r2, r3
 80031fa:	2100      	movs	r1, #0
 80031fc:	f001 ffa2 	bl	8005144 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f004 fe60 	bl	8007ecc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	4f54300a 	.word	0x4f54300a
 800321c:	4f54310a 	.word	0x4f54310a

08003220 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	333c      	adds	r3, #60	@ 0x3c
 8003238:	3304      	adds	r3, #4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a15      	ldr	r2, [pc, #84]	@ (80032a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d90e      	bls.n	8003274 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800326c:	461a      	mov	r2, r3
 800326e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003272:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f004 fe17 	bl	8007ea8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d90c      	bls.n	800329c <PCD_EP_OutSetupPacket_int+0x7c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	799b      	ldrb	r3, [r3, #6]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d108      	bne.n	800329c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003294:	461a      	mov	r2, r3
 8003296:	2101      	movs	r1, #1
 8003298:	f001 ff54 	bl	8005144 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	4f54300a 	.word	0x4f54300a

080032ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
 80032b8:	4613      	mov	r3, r2
 80032ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032ca:	883b      	ldrh	r3, [r7, #0]
 80032cc:	0419      	lsls	r1, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80032d8:	e028      	b.n	800332c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4413      	add	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
 80032ec:	e00d      	b.n	800330a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	3340      	adds	r3, #64	@ 0x40
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	4413      	add	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	3301      	adds	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	3b01      	subs	r3, #1
 8003310:	429a      	cmp	r2, r3
 8003312:	d3ec      	bcc.n	80032ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003314:	883b      	ldrh	r3, [r7, #0]
 8003316:	0418      	lsls	r0, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	3b01      	subs	r3, #1
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	4302      	orrs	r2, r0
 8003324:	3340      	adds	r3, #64	@ 0x40
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e267      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d075      	beq.n	800347e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003392:	4b88      	ldr	r3, [pc, #544]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d00c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4b85      	ldr	r3, [pc, #532]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d112      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b82      	ldr	r3, [pc, #520]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b7e      	ldr	r3, [pc, #504]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0x108>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d157      	bne.n	800347c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e242      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x74>
 80033da:	4b76      	ldr	r3, [pc, #472]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a75      	ldr	r2, [pc, #468]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x98>
 80033f2:	4b70      	ldr	r3, [pc, #448]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6f      	ldr	r2, [pc, #444]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6d      	ldr	r3, [pc, #436]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6c      	ldr	r2, [pc, #432]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 800340c:	4b69      	ldr	r3, [pc, #420]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a68      	ldr	r2, [pc, #416]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b66      	ldr	r3, [pc, #408]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a65      	ldr	r2, [pc, #404]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fa58 	bl	80018e0 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fa54 	bl	80018e0 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	@ 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e207      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b5b      	ldr	r3, [pc, #364]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xc0>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fa44 	bl	80018e0 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe fa40 	bl	80018e0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	@ 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1f3      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b51      	ldr	r3, [pc, #324]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0xe8>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800348a:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b47      	ldr	r3, [pc, #284]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b44      	ldr	r3, [pc, #272]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b41      	ldr	r3, [pc, #260]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1c7      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b3b      	ldr	r3, [pc, #236]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4937      	ldr	r1, [pc, #220]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b34      	ldr	r3, [pc, #208]	@ (80035b8 <HAL_RCC_OscConfig+0x244>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe f9f9 	bl	80018e0 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe f9f5 	bl	80018e0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1a8      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b2b      	ldr	r3, [pc, #172]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b28      	ldr	r3, [pc, #160]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4925      	ldr	r1, [pc, #148]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b24      	ldr	r3, [pc, #144]	@ (80035b8 <HAL_RCC_OscConfig+0x244>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe f9d8 	bl	80018e0 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe f9d4 	bl	80018e0 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e187      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d036      	beq.n	80035cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b15      	ldr	r3, [pc, #84]	@ (80035bc <HAL_RCC_OscConfig+0x248>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe f9b8 	bl	80018e0 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe f9b4 	bl	80018e0 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e167      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x200>
 8003592:	e01b      	b.n	80035cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003594:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <HAL_RCC_OscConfig+0x248>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fe f9a1 	bl	80018e0 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	e00e      	b.n	80035c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fe f99d 	bl	80018e0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d907      	bls.n	80035c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e150      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
 80035b4:	40023800 	.word	0x40023800
 80035b8:	42470000 	.word	0x42470000
 80035bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	4b88      	ldr	r3, [pc, #544]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1ea      	bne.n	80035a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8097 	beq.w	8003708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035de:	4b81      	ldr	r3, [pc, #516]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	4b7d      	ldr	r3, [pc, #500]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	4a7c      	ldr	r2, [pc, #496]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035fa:	4b7a      	ldr	r3, [pc, #488]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b77      	ldr	r3, [pc, #476]	@ (80037e8 <HAL_RCC_OscConfig+0x474>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b74      	ldr	r3, [pc, #464]	@ (80037e8 <HAL_RCC_OscConfig+0x474>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a73      	ldr	r2, [pc, #460]	@ (80037e8 <HAL_RCC_OscConfig+0x474>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fe f95d 	bl	80018e0 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fe f959 	bl	80018e0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e10c      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b6a      	ldr	r3, [pc, #424]	@ (80037e8 <HAL_RCC_OscConfig+0x474>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x2ea>
 8003650:	4b64      	ldr	r3, [pc, #400]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	4a63      	ldr	r2, [pc, #396]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	@ 0x70
 800365c:	e01c      	b.n	8003698 <HAL_RCC_OscConfig+0x324>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b05      	cmp	r3, #5
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x30c>
 8003666:	4b5f      	ldr	r3, [pc, #380]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366a:	4a5e      	ldr	r2, [pc, #376]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6713      	str	r3, [r2, #112]	@ 0x70
 8003672:	4b5c      	ldr	r3, [pc, #368]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	4a5b      	ldr	r2, [pc, #364]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	@ 0x70
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0x324>
 8003680:	4b58      	ldr	r3, [pc, #352]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003684:	4a57      	ldr	r2, [pc, #348]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	6713      	str	r3, [r2, #112]	@ 0x70
 800368c:	4b55      	ldr	r3, [pc, #340]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003690:	4a54      	ldr	r2, [pc, #336]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003692:	f023 0304 	bic.w	r3, r3, #4
 8003696:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe f91e 	bl	80018e0 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe f91a 	bl	80018e0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0cb      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	4b49      	ldr	r3, [pc, #292]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ee      	beq.n	80036a8 <HAL_RCC_OscConfig+0x334>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fe f908 	bl	80018e0 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fe f904 	bl	80018e0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0b5      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	4b3e      	ldr	r3, [pc, #248]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ee      	bne.n	80036d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b39      	ldr	r3, [pc, #228]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	4a38      	ldr	r2, [pc, #224]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003706:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80a1 	beq.w	8003854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003712:	4b34      	ldr	r3, [pc, #208]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b08      	cmp	r3, #8
 800371c:	d05c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d141      	bne.n	80037aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <HAL_RCC_OscConfig+0x478>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe f8d8 	bl	80018e0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe f8d4 	bl	80018e0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e087      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	019b      	lsls	r3, r3, #6
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	3b01      	subs	r3, #1
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	491b      	ldr	r1, [pc, #108]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800377c:	4b1b      	ldr	r3, [pc, #108]	@ (80037ec <HAL_RCC_OscConfig+0x478>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fe f8ad 	bl	80018e0 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378a:	f7fe f8a9 	bl	80018e0 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e05c      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379c:	4b11      	ldr	r3, [pc, #68]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x416>
 80037a8:	e054      	b.n	8003854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <HAL_RCC_OscConfig+0x478>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe f896 	bl	80018e0 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe f892 	bl	80018e0 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e045      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x444>
 80037d6:	e03d      	b.n	8003854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e038      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000
 80037ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003860 <HAL_RCC_OscConfig+0x4ec>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d028      	beq.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d121      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d11a      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003828:	4293      	cmp	r3, r2
 800382a:	d111      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	3b01      	subs	r3, #1
 800383a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800

08003864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0cc      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003878:	4b68      	ldr	r3, [pc, #416]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d90c      	bls.n	80038a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b65      	ldr	r3, [pc, #404]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b63      	ldr	r3, [pc, #396]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0b8      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b8:	4b59      	ldr	r3, [pc, #356]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4a58      	ldr	r2, [pc, #352]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d0:	4b53      	ldr	r3, [pc, #332]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a52      	ldr	r2, [pc, #328]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b50      	ldr	r3, [pc, #320]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	494d      	ldr	r1, [pc, #308]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d044      	beq.n	8003984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b47      	ldr	r3, [pc, #284]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d119      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d003      	beq.n	8003922 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391e:	2b03      	cmp	r3, #3
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	4b3f      	ldr	r3, [pc, #252]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003932:	4b3b      	ldr	r3, [pc, #236]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e067      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003942:	4b37      	ldr	r3, [pc, #220]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4934      	ldr	r1, [pc, #208]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003954:	f7fd ffc4 	bl	80018e0 <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	e00a      	b.n	8003972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395c:	f7fd ffc0 	bl	80018e0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e04f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	4b2b      	ldr	r3, [pc, #172]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 020c 	and.w	r2, r3, #12
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	429a      	cmp	r2, r3
 8003982:	d1eb      	bne.n	800395c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003984:	4b25      	ldr	r3, [pc, #148]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d20c      	bcs.n	80039ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b22      	ldr	r3, [pc, #136]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b20      	ldr	r3, [pc, #128]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e032      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b8:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4916      	ldr	r1, [pc, #88]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d6:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	490e      	ldr	r1, [pc, #56]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ea:	f000 f821 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039ee:	4602      	mov	r2, r0
 80039f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	490a      	ldr	r1, [pc, #40]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	5ccb      	ldrb	r3, [r1, r3]
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	4a09      	ldr	r2, [pc, #36]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a06:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd ff24 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023c00 	.word	0x40023c00
 8003a20:	40023800 	.word	0x40023800
 8003a24:	080090a0 	.word	0x080090a0
 8003a28:	20000004 	.word	0x20000004
 8003a2c:	20000008 	.word	0x20000008

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a34:	b090      	sub	sp, #64	@ 0x40
 8003a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a48:	4b59      	ldr	r3, [pc, #356]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d00d      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x40>
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	f200 80a1 	bhi.w	8003b9c <HAL_RCC_GetSysClockFreq+0x16c>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a62:	e09b      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b53      	ldr	r3, [pc, #332]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a68:	e09b      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6a:	4b53      	ldr	r3, [pc, #332]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a6e:	e098      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a70:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a7a:	4b4d      	ldr	r3, [pc, #308]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d028      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a86:	4b4a      	ldr	r3, [pc, #296]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4b47      	ldr	r3, [pc, #284]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a9c:	fb03 f201 	mul.w	r2, r3, r1
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	fb00 f303 	mul.w	r3, r0, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4a43      	ldr	r2, [pc, #268]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aaa:	fba0 1202 	umull	r1, r2, r0, r2
 8003aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ab0:	460a      	mov	r2, r1
 8003ab2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab6:	4413      	add	r3, r2
 8003ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abc:	2200      	movs	r2, #0
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	61fa      	str	r2, [r7, #28]
 8003ac2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003aca:	f7fc fbe9 	bl	80002a0 <__aeabi_uldivmod>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ad6:	e053      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad8:	4b35      	ldr	r3, [pc, #212]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	099b      	lsrs	r3, r3, #6
 8003ade:	2200      	movs	r2, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	617a      	str	r2, [r7, #20]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003aea:	f04f 0b00 	mov.w	fp, #0
 8003aee:	4652      	mov	r2, sl
 8003af0:	465b      	mov	r3, fp
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	0159      	lsls	r1, r3, #5
 8003afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b00:	0150      	lsls	r0, r2, #5
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	ebb2 080a 	subs.w	r8, r2, sl
 8003b0a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b22:	ebb2 0408 	subs.w	r4, r2, r8
 8003b26:	eb63 0509 	sbc.w	r5, r3, r9
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	00eb      	lsls	r3, r5, #3
 8003b34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b38:	00e2      	lsls	r2, r4, #3
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	461d      	mov	r5, r3
 8003b3e:	eb14 030a 	adds.w	r3, r4, sl
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	eb45 030b 	adc.w	r3, r5, fp
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b56:	4629      	mov	r1, r5
 8003b58:	028b      	lsls	r3, r1, #10
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b60:	4621      	mov	r1, r4
 8003b62:	028a      	lsls	r2, r1, #10
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	60fa      	str	r2, [r7, #12]
 8003b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b74:	f7fc fb94 	bl	80002a0 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3740      	adds	r7, #64	@ 0x40
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	00f42400 	.word	0x00f42400
 8003bb8:	017d7840 	.word	0x017d7840

08003bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000004 	.word	0x20000004

08003bd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	f107 001c 	add.w	r0, r7, #28
 8003be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003be6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d123      	bne.n	8003c36 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003c02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d105      	bne.n	8003c2a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f001 fae8 	bl	8005200 <USB_CoreReset>
 8003c30:	4603      	mov	r3, r0
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	e01b      	b.n	8003c6e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f001 fadc 	bl	8005200 <USB_CoreReset>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c60:	e005      	b.n	8003c6e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c6e:	7fbb      	ldrb	r3, [r7, #30]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10b      	bne.n	8003c8c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f043 0206 	orr.w	r2, r3, #6
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c98:	b004      	add	sp, #16
 8003c9a:	4770      	bx	lr

08003c9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d165      	bne.n	8003d7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4a41      	ldr	r2, [pc, #260]	@ (8003db8 <USB_SetTurnaroundTime+0x11c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d906      	bls.n	8003cc6 <USB_SetTurnaroundTime+0x2a>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4a40      	ldr	r2, [pc, #256]	@ (8003dbc <USB_SetTurnaroundTime+0x120>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d202      	bcs.n	8003cc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003cc0:	230f      	movs	r3, #15
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e062      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8003dbc <USB_SetTurnaroundTime+0x120>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d306      	bcc.n	8003cdc <USB_SetTurnaroundTime+0x40>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8003dc0 <USB_SetTurnaroundTime+0x124>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d202      	bcs.n	8003cdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003cd6:	230e      	movs	r3, #14
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e057      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4a38      	ldr	r2, [pc, #224]	@ (8003dc0 <USB_SetTurnaroundTime+0x124>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d306      	bcc.n	8003cf2 <USB_SetTurnaroundTime+0x56>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4a37      	ldr	r2, [pc, #220]	@ (8003dc4 <USB_SetTurnaroundTime+0x128>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d202      	bcs.n	8003cf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cec:	230d      	movs	r3, #13
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e04c      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4a33      	ldr	r2, [pc, #204]	@ (8003dc4 <USB_SetTurnaroundTime+0x128>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d306      	bcc.n	8003d08 <USB_SetTurnaroundTime+0x6c>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4a32      	ldr	r2, [pc, #200]	@ (8003dc8 <USB_SetTurnaroundTime+0x12c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d802      	bhi.n	8003d08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d02:	230c      	movs	r3, #12
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e041      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003dc8 <USB_SetTurnaroundTime+0x12c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d906      	bls.n	8003d1e <USB_SetTurnaroundTime+0x82>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4a2e      	ldr	r2, [pc, #184]	@ (8003dcc <USB_SetTurnaroundTime+0x130>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d802      	bhi.n	8003d1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d18:	230b      	movs	r3, #11
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e036      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4a2a      	ldr	r2, [pc, #168]	@ (8003dcc <USB_SetTurnaroundTime+0x130>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d906      	bls.n	8003d34 <USB_SetTurnaroundTime+0x98>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4a29      	ldr	r2, [pc, #164]	@ (8003dd0 <USB_SetTurnaroundTime+0x134>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d802      	bhi.n	8003d34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d2e:	230a      	movs	r3, #10
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e02b      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a26      	ldr	r2, [pc, #152]	@ (8003dd0 <USB_SetTurnaroundTime+0x134>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d906      	bls.n	8003d4a <USB_SetTurnaroundTime+0xae>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4a25      	ldr	r2, [pc, #148]	@ (8003dd4 <USB_SetTurnaroundTime+0x138>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d202      	bcs.n	8003d4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d44:	2309      	movs	r3, #9
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e020      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4a21      	ldr	r2, [pc, #132]	@ (8003dd4 <USB_SetTurnaroundTime+0x138>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d306      	bcc.n	8003d60 <USB_SetTurnaroundTime+0xc4>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4a20      	ldr	r2, [pc, #128]	@ (8003dd8 <USB_SetTurnaroundTime+0x13c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d802      	bhi.n	8003d60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	e015      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd8 <USB_SetTurnaroundTime+0x13c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d906      	bls.n	8003d76 <USB_SetTurnaroundTime+0xda>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ddc <USB_SetTurnaroundTime+0x140>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d202      	bcs.n	8003d76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d70:	2307      	movs	r3, #7
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e00a      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d76:	2306      	movs	r3, #6
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e007      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d82:	2309      	movs	r3, #9
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e001      	b.n	8003d8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d88:	2309      	movs	r3, #9
 8003d8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	029b      	lsls	r3, r3, #10
 8003da0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003da4:	431a      	orrs	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	00d8acbf 	.word	0x00d8acbf
 8003dbc:	00e4e1c0 	.word	0x00e4e1c0
 8003dc0:	00f42400 	.word	0x00f42400
 8003dc4:	01067380 	.word	0x01067380
 8003dc8:	011a499f 	.word	0x011a499f
 8003dcc:	01312cff 	.word	0x01312cff
 8003dd0:	014ca43f 	.word	0x014ca43f
 8003dd4:	016e3600 	.word	0x016e3600
 8003dd8:	01a6ab1f 	.word	0x01a6ab1f
 8003ddc:	01e84800 	.word	0x01e84800

08003de0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f023 0201 	bic.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d115      	bne.n	8003e72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e52:	200a      	movs	r0, #10
 8003e54:	f7fd fd50 	bl	80018f8 <HAL_Delay>
      ms += 10U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	330a      	adds	r3, #10
 8003e5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f001 f93f 	bl	80050e2 <USB_GetMode>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d01e      	beq.n	8003ea8 <USB_SetCurrentMode+0x84>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e6e:	d9f0      	bls.n	8003e52 <USB_SetCurrentMode+0x2e>
 8003e70:	e01a      	b.n	8003ea8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d115      	bne.n	8003ea4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e84:	200a      	movs	r0, #10
 8003e86:	f7fd fd37 	bl	80018f8 <HAL_Delay>
      ms += 10U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	330a      	adds	r3, #10
 8003e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f001 f926 	bl	80050e2 <USB_GetMode>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <USB_SetCurrentMode+0x84>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ea0:	d9f0      	bls.n	8003e84 <USB_SetCurrentMode+0x60>
 8003ea2:	e001      	b.n	8003ea8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e005      	b.n	8003eb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2bc8      	cmp	r3, #200	@ 0xc8
 8003eac:	d101      	bne.n	8003eb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	e009      	b.n	8003ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	3340      	adds	r3, #64	@ 0x40
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3301      	adds	r3, #1
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b0e      	cmp	r3, #14
 8003ef4:	d9f2      	bls.n	8003edc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ef6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d11c      	bne.n	8003f38 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f36:	e00b      	b.n	8003f50 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f56:	461a      	mov	r2, r3
 8003f58:	2300      	movs	r3, #0
 8003f5a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f5c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d10d      	bne.n	8003f80 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f968 	bl	8004244 <USB_SetDevSpeed>
 8003f74:	e008      	b.n	8003f88 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f76:	2101      	movs	r1, #1
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f963 	bl	8004244 <USB_SetDevSpeed>
 8003f7e:	e003      	b.n	8003f88 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f80:	2103      	movs	r1, #3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f95e 	bl	8004244 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f88:	2110      	movs	r1, #16
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f8fa 	bl	8004184 <USB_FlushTxFifo>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f924 	bl	80041e8 <USB_FlushRxFifo>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e043      	b.n	800405c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fea:	d118      	bne.n	800401e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ffe:	461a      	mov	r2, r3
 8004000:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e013      	b.n	8004030 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004014:	461a      	mov	r2, r3
 8004016:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	e008      	b.n	8004030 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402a:	461a      	mov	r2, r3
 800402c:	2300      	movs	r3, #0
 800402e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800403c:	461a      	mov	r2, r3
 800403e:	2300      	movs	r3, #0
 8004040:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800404e:	461a      	mov	r2, r3
 8004050:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004054:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3301      	adds	r3, #1
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004060:	461a      	mov	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4293      	cmp	r3, r2
 8004066:	d3b5      	bcc.n	8003fd4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	e043      	b.n	80040f6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004080:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004084:	d118      	bne.n	80040b8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004098:	461a      	mov	r2, r3
 800409a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e013      	b.n	80040ca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ae:	461a      	mov	r2, r3
 80040b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e008      	b.n	80040ca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c4:	461a      	mov	r2, r3
 80040c6:	2300      	movs	r3, #0
 80040c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d6:	461a      	mov	r2, r3
 80040d8:	2300      	movs	r3, #0
 80040da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	3301      	adds	r3, #1
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040fa:	461a      	mov	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4293      	cmp	r3, r2
 8004100:	d3b5      	bcc.n	800406e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004114:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004122:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004124:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f043 0210 	orr.w	r2, r3, #16
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	4b10      	ldr	r3, [pc, #64]	@ (8004180 <USB_DevInit+0x2c4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004144:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f043 0208 	orr.w	r2, r3, #8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004158:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800415c:	2b01      	cmp	r3, #1
 800415e:	d107      	bne.n	8004170 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004170:	7dfb      	ldrb	r3, [r7, #23]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800417c:	b004      	add	sp, #16
 800417e:	4770      	bx	lr
 8004180:	803c3800 	.word	0x803c3800

08004184 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3301      	adds	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800419e:	d901      	bls.n	80041a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e01b      	b.n	80041dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	daf2      	bge.n	8004192 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	019b      	lsls	r3, r3, #6
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3301      	adds	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041c8:	d901      	bls.n	80041ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e006      	b.n	80041dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d0f0      	beq.n	80041bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3301      	adds	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004200:	d901      	bls.n	8004206 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e018      	b.n	8004238 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	daf2      	bge.n	80041f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2210      	movs	r2, #16
 8004216:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3301      	adds	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004224:	d901      	bls.n	800422a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e006      	b.n	8004238 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b10      	cmp	r3, #16
 8004234:	d0f0      	beq.n	8004218 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004264:	4313      	orrs	r3, r2
 8004266:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0306 	and.w	r3, r3, #6
 800428e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004296:	2300      	movs	r3, #0
 8004298:	75fb      	strb	r3, [r7, #23]
 800429a:	e00a      	b.n	80042b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d002      	beq.n	80042a8 <USB_GetDevSpeed+0x32>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	d102      	bne.n	80042ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042a8:	2302      	movs	r3, #2
 80042aa:	75fb      	strb	r3, [r7, #23]
 80042ac:	e001      	b.n	80042b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042ae:	230f      	movs	r3, #15
 80042b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d13a      	bne.n	8004352 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	68f9      	ldr	r1, [r7, #12]
 80042f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d155      	bne.n	80043c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	791b      	ldrb	r3, [r3, #4]
 800432e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004330:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	059b      	lsls	r3, r3, #22
 8004336:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004338:	4313      	orrs	r3, r2
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	440a      	add	r2, r1
 8004342:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800434a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	e036      	b.n	80043c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f303 	lsl.w	r3, r1, r3
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004370:	4313      	orrs	r3, r2
 8004372:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d11a      	bne.n	80043c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	791b      	ldrb	r3, [r3, #4]
 80043a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043a6:	430b      	orrs	r3, r1
 80043a8:	4313      	orrs	r3, r2
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	785b      	ldrb	r3, [r3, #1]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d161      	bne.n	80044b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004402:	d11f      	bne.n	8004444 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	440a      	add	r2, r1
 800441a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800441e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004422:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	440a      	add	r2, r1
 800443a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800443e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004442:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800444a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	2101      	movs	r1, #1
 8004456:	fa01 f303 	lsl.w	r3, r1, r3
 800445a:	b29b      	uxth	r3, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004464:	4013      	ands	r3, r2
 8004466:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	2101      	movs	r1, #1
 800447a:	fa01 f303 	lsl.w	r3, r1, r3
 800447e:	b29b      	uxth	r3, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004488:	4013      	ands	r3, r2
 800448a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	0159      	lsls	r1, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	440b      	add	r3, r1
 80044a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a6:	4619      	mov	r1, r3
 80044a8:	4b35      	ldr	r3, [pc, #212]	@ (8004580 <USB_DeactivateEndpoint+0x1b0>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
 80044ae:	e060      	b.n	8004572 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044c6:	d11f      	bne.n	8004508 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	0151      	lsls	r1, r2, #5
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	440a      	add	r2, r1
 80044de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004502:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004506:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800450e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	2101      	movs	r1, #1
 800451a:	fa01 f303 	lsl.w	r3, r1, r3
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	43db      	mvns	r3, r3
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004528:	4013      	ands	r3, r2
 800452a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	2101      	movs	r1, #1
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	041b      	lsls	r3, r3, #16
 8004544:	43db      	mvns	r3, r3
 8004546:	68f9      	ldr	r1, [r7, #12]
 8004548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800454c:	4013      	ands	r3, r2
 800454e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	0159      	lsls	r1, r3, #5
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	440b      	add	r3, r1
 8004566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800456a:	4619      	mov	r1, r3
 800456c:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <USB_DeactivateEndpoint+0x1b4>)
 800456e:	4013      	ands	r3, r2
 8004570:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	ec337800 	.word	0xec337800
 8004584:	eff37800 	.word	0xeff37800

08004588 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	@ 0x28
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	4613      	mov	r3, r2
 8004594:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	785b      	ldrb	r3, [r3, #1]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	f040 817f 	bne.w	80048a8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d132      	bne.n	8004618 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80045d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80045d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	0151      	lsls	r1, r2, #5
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	440a      	add	r2, r1
 80045ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004610:	0cdb      	lsrs	r3, r3, #19
 8004612:	04db      	lsls	r3, r3, #19
 8004614:	6113      	str	r3, [r2, #16]
 8004616:	e097      	b.n	8004748 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	440a      	add	r2, r1
 800462e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004632:	0cdb      	lsrs	r3, r3, #19
 8004634:	04db      	lsls	r3, r3, #19
 8004636:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	0151      	lsls	r1, r2, #5
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	440a      	add	r2, r1
 800464e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004652:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004656:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800465a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11a      	bne.n	8004698 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d903      	bls.n	8004676 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	0151      	lsls	r1, r2, #5
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	440a      	add	r2, r1
 800468c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004690:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004694:	6113      	str	r3, [r2, #16]
 8004696:	e044      	b.n	8004722 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4413      	add	r3, r2
 80046a2:	1e5a      	subs	r2, r3, #1
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	8afb      	ldrh	r3, [r7, #22]
 80046be:	04d9      	lsls	r1, r3, #19
 80046c0:	4ba4      	ldr	r3, [pc, #656]	@ (8004954 <USB_EPStartXfer+0x3cc>)
 80046c2:	400b      	ands	r3, r1
 80046c4:	69b9      	ldr	r1, [r7, #24]
 80046c6:	0148      	lsls	r0, r1, #5
 80046c8:	69f9      	ldr	r1, [r7, #28]
 80046ca:	4401      	add	r1, r0
 80046cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80046d0:	4313      	orrs	r3, r2
 80046d2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	791b      	ldrb	r3, [r3, #4]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d122      	bne.n	8004722 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	0151      	lsls	r1, r2, #5
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	440a      	add	r2, r1
 80046f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046f6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80046fa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	8afb      	ldrh	r3, [r7, #22]
 800470c:	075b      	lsls	r3, r3, #29
 800470e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004712:	69b9      	ldr	r1, [r7, #24]
 8004714:	0148      	lsls	r0, r1, #5
 8004716:	69f9      	ldr	r1, [r7, #28]
 8004718:	4401      	add	r1, r0
 800471a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800471e:	4313      	orrs	r3, r2
 8004720:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004738:	69b9      	ldr	r1, [r7, #24]
 800473a:	0148      	lsls	r0, r1, #5
 800473c:	69f9      	ldr	r1, [r7, #28]
 800473e:	4401      	add	r1, r0
 8004740:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004744:	4313      	orrs	r3, r2
 8004746:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d14b      	bne.n	80047e6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004762:	461a      	mov	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	791b      	ldrb	r3, [r3, #4]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d128      	bne.n	80047c4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d110      	bne.n	80047a4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800479c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e00f      	b.n	80047c4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	0151      	lsls	r1, r2, #5
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	440a      	add	r2, r1
 80047ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	e166      	b.n	8004ab4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004800:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004804:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	791b      	ldrb	r3, [r3, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d015      	beq.n	800483a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 814e 	beq.w	8004ab4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	2101      	movs	r1, #1
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	69f9      	ldr	r1, [r7, #28]
 8004830:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004834:	4313      	orrs	r3, r2
 8004836:	634b      	str	r3, [r1, #52]	@ 0x34
 8004838:	e13c      	b.n	8004ab4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d110      	bne.n	800486c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004864:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e00f      	b.n	800488c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	0151      	lsls	r1, r2, #5
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	440a      	add	r2, r1
 8004882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800488a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	68d9      	ldr	r1, [r3, #12]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	b298      	uxth	r0, r3
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	4603      	mov	r3, r0
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f9b9 	bl	8004c18 <USB_WritePacket>
 80048a6:	e105      	b.n	8004ab4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048c2:	0cdb      	lsrs	r3, r3, #19
 80048c4:	04db      	lsls	r3, r3, #19
 80048c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80048e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80048ea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d132      	bne.n	8004958 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004920:	69b9      	ldr	r1, [r7, #24]
 8004922:	0148      	lsls	r0, r1, #5
 8004924:	69f9      	ldr	r1, [r7, #28]
 8004926:	4401      	add	r1, r0
 8004928:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800492c:	4313      	orrs	r3, r2
 800492e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	440a      	add	r2, r1
 8004946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800494a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800494e:	6113      	str	r3, [r2, #16]
 8004950:	e062      	b.n	8004a18 <USB_EPStartXfer+0x490>
 8004952:	bf00      	nop
 8004954:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d123      	bne.n	80049a8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004976:	69b9      	ldr	r1, [r7, #24]
 8004978:	0148      	lsls	r0, r1, #5
 800497a:	69f9      	ldr	r1, [r7, #28]
 800497c:	4401      	add	r1, r0
 800497e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004982:	4313      	orrs	r3, r2
 8004984:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	440a      	add	r2, r1
 800499c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049a4:	6113      	str	r3, [r2, #16]
 80049a6:	e037      	b.n	8004a18 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4413      	add	r3, r2
 80049b2:	1e5a      	subs	r2, r3, #1
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	8afa      	ldrh	r2, [r7, #22]
 80049c4:	fb03 f202 	mul.w	r2, r3, r2
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	8afb      	ldrh	r3, [r7, #22]
 80049dc:	04d9      	lsls	r1, r3, #19
 80049de:	4b38      	ldr	r3, [pc, #224]	@ (8004ac0 <USB_EPStartXfer+0x538>)
 80049e0:	400b      	ands	r3, r1
 80049e2:	69b9      	ldr	r1, [r7, #24]
 80049e4:	0148      	lsls	r0, r1, #5
 80049e6:	69f9      	ldr	r1, [r7, #28]
 80049e8:	4401      	add	r1, r0
 80049ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80049ee:	4313      	orrs	r3, r2
 80049f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a08:	69b9      	ldr	r1, [r7, #24]
 8004a0a:	0148      	lsls	r0, r1, #5
 8004a0c:	69f9      	ldr	r1, [r7, #28]
 8004a0e:	4401      	add	r1, r0
 8004a10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a14:	4313      	orrs	r3, r2
 8004a16:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d10d      	bne.n	8004a3a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	68d9      	ldr	r1, [r3, #12]
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a36:	460a      	mov	r2, r1
 8004a38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	791b      	ldrb	r3, [r3, #4]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d128      	bne.n	8004a94 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d110      	bne.n	8004a74 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	0151      	lsls	r1, r2, #5
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	440a      	add	r2, r1
 8004a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e00f      	b.n	8004a94 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ab2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	1ff80000 	.word	0x1ff80000

08004ac4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	785b      	ldrb	r3, [r3, #1]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d14a      	bne.n	8004b78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004af6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004afa:	f040 8086 	bne.w	8004c0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	7812      	ldrb	r2, [r2, #0]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	7812      	ldrb	r2, [r2, #0]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d902      	bls.n	8004b5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	75fb      	strb	r3, [r7, #23]
          break;
 8004b5a:	e056      	b.n	8004c0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b74:	d0e7      	beq.n	8004b46 <USB_EPStopXfer+0x82>
 8004b76:	e048      	b.n	8004c0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b90:	d13b      	bne.n	8004c0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bb0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	7812      	ldrb	r2, [r2, #0]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d902      	bls.n	8004bf0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	75fb      	strb	r3, [r7, #23]
          break;
 8004bee:	e00c      	b.n	8004c0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c08:	d0e7      	beq.n	8004bda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	@ 0x24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	4611      	mov	r1, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	460b      	mov	r3, r1
 8004c28:	71fb      	strb	r3, [r7, #7]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d123      	bne.n	8004c86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c3e:	88bb      	ldrh	r3, [r7, #4]
 8004c40:	3303      	adds	r3, #3
 8004c42:	089b      	lsrs	r3, r3, #2
 8004c44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	e018      	b.n	8004c7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	031a      	lsls	r2, r3, #12
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c58:	461a      	mov	r2, r3
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	3301      	adds	r3, #1
 8004c64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3301      	adds	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d3e2      	bcc.n	8004c4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3724      	adds	r7, #36	@ 0x24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b08b      	sub	sp, #44	@ 0x2c
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	089b      	lsrs	r3, r3, #2
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]
 8004cbe:	e014      	b.n	8004cea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	3301      	adds	r3, #1
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	3301      	adds	r3, #1
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	623b      	str	r3, [r7, #32]
 8004cea:	6a3a      	ldr	r2, [r7, #32]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d3e6      	bcc.n	8004cc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cf2:	8bfb      	ldrh	r3, [r7, #30]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01e      	beq.n	8004d36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d02:	461a      	mov	r2, r3
 8004d04:	f107 0310 	add.w	r3, r7, #16
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	701a      	strb	r2, [r3, #0]
      i++;
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	3301      	adds	r3, #1
 8004d22:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	3301      	adds	r3, #1
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004d2a:	8bfb      	ldrh	r3, [r7, #30]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d30:	8bfb      	ldrh	r3, [r7, #30]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1ea      	bne.n	8004d0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	372c      	adds	r7, #44	@ 0x2c
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	785b      	ldrb	r3, [r3, #1]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d12c      	bne.n	8004dba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	db12      	blt.n	8004d98 <USB_EPSetStall+0x54>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00f      	beq.n	8004d98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	0151      	lsls	r1, r2, #5
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	440a      	add	r2, r1
 8004d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004db2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	e02b      	b.n	8004e12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	db12      	blt.n	8004df2 <USB_EPSetStall+0xae>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00f      	beq.n	8004df2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004df0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d128      	bne.n	8004e8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	791b      	ldrb	r3, [r3, #4]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d003      	beq.n	8004e6c <USB_EPClearStall+0x4c>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	791b      	ldrb	r3, [r3, #4]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d138      	bne.n	8004ede <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	e027      	b.n	8004ede <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ea8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004eac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	791b      	ldrb	r3, [r3, #4]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d003      	beq.n	8004ebe <USB_EPClearStall+0x9e>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	791b      	ldrb	r3, [r3, #4]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d10f      	bne.n	8004ede <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004edc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f0a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004f0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004f20:	68f9      	ldr	r1, [r7, #12]
 8004f22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f66:	f023 0302 	bic.w	r3, r3, #2
 8004f6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f94:	f023 0303 	bic.w	r3, r3, #3
 8004f98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa8:	f043 0302 	orr.w	r3, r3, #2
 8004fac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	0c1b      	lsrs	r3, r3, #16
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	4013      	ands	r3, r2
 8005038:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	b29b      	uxth	r3, r3
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800505a:	78fb      	ldrb	r3, [r7, #3]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	4013      	ands	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005078:	68bb      	ldr	r3, [r7, #8]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005086:	b480      	push	{r7}
 8005088:	b087      	sub	sp, #28
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	460b      	mov	r3, r1
 8005090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	fa22 f303 	lsr.w	r3, r2, r3
 80050b6:	01db      	lsls	r3, r3, #7
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4013      	ands	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050d4:	68bb      	ldr	r3, [r7, #8]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0301 	and.w	r3, r3, #1
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005118:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800511c:	f023 0307 	bic.w	r3, r3, #7
 8005120:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005134:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	460b      	mov	r3, r1
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	333c      	adds	r3, #60	@ 0x3c
 800515a:	3304      	adds	r3, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4a26      	ldr	r2, [pc, #152]	@ (80051fc <USB_EP0_OutStart+0xb8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d90a      	bls.n	800517e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005178:	d101      	bne.n	800517e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	e037      	b.n	80051ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005184:	461a      	mov	r2, r3
 8005186:	2300      	movs	r3, #0
 8005188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800519c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051ac:	f043 0318 	orr.w	r3, r3, #24
 80051b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051c0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80051c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051c6:	7afb      	ldrb	r3, [r7, #11]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d10f      	bne.n	80051ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	461a      	mov	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051e6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80051ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	4f54300a 	.word	0x4f54300a

08005200 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3301      	adds	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005218:	d901      	bls.n	800521e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e01b      	b.n	8005256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	daf2      	bge.n	800520c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f043 0201 	orr.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005242:	d901      	bls.n	8005248 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e006      	b.n	8005256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	d0f0      	beq.n	8005236 <USB_CoreReset+0x36>

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8005268:	f001 f936 	bl	80064d8 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800526c:	2200      	movs	r2, #0
 800526e:	4912      	ldr	r1, [pc, #72]	@ (80052b8 <MX_USB_DEVICE_Init+0x54>)
 8005270:	4812      	ldr	r0, [pc, #72]	@ (80052bc <MX_USB_DEVICE_Init+0x58>)
 8005272:	f001 fc69 	bl	8006b48 <USBD_Init>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800527c:	f7fc f96e 	bl	800155c <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8005280:	490f      	ldr	r1, [pc, #60]	@ (80052c0 <MX_USB_DEVICE_Init+0x5c>)
 8005282:	480e      	ldr	r0, [pc, #56]	@ (80052bc <MX_USB_DEVICE_Init+0x58>)
 8005284:	f001 fc8c 	bl	8006ba0 <USBD_RegisterClass>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800528e:	f7fc f965 	bl	800155c <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8005292:	490c      	ldr	r1, [pc, #48]	@ (80052c4 <MX_USB_DEVICE_Init+0x60>)
 8005294:	4809      	ldr	r0, [pc, #36]	@ (80052bc <MX_USB_DEVICE_Init+0x58>)
 8005296:	f000 fe11 	bl	8005ebc <USBD_CDC_ACM_RegisterInterface>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80052a0:	f7fc f95c 	bl	800155c <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 80052a4:	4805      	ldr	r0, [pc, #20]	@ (80052bc <MX_USB_DEVICE_Init+0x58>)
 80052a6:	f001 fcb9 	bl	8006c1c <USBD_Start>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80052b0:	f7fc f954 	bl	800155c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80052b4:	bf00      	nop
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000024 	.word	0x20000024
 80052bc:	200007e0 	.word	0x200007e0
 80052c0:	20000154 	.word	0x20000154
 80052c4:	20000010 	.word	0x20000010

080052c8 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	01db      	lsls	r3, r3, #7
 80052d6:	4a06      	ldr	r2, [pc, #24]	@ (80052f0 <CDC_Init+0x28>)
 80052d8:	441a      	add	r2, r3
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	4905      	ldr	r1, [pc, #20]	@ (80052f4 <CDC_Init+0x2c>)
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fe26 	bl	8005f30 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 80052e4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000afc 	.word	0x20000afc
 80052f4:	200007e0 	.word	0x200007e0

080052f8 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8005302:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	603a      	str	r2, [r7, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	4603      	mov	r3, r0
 800531c:	71fb      	strb	r3, [r7, #7]
 800531e:	460b      	mov	r3, r1
 8005320:	71bb      	strb	r3, [r7, #6]
 8005322:	4613      	mov	r3, r2
 8005324:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8005326:	79bb      	ldrb	r3, [r7, #6]
 8005328:	2b23      	cmp	r3, #35	@ 0x23
 800532a:	f200 80b6 	bhi.w	800549a <CDC_Control+0x18a>
 800532e:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <CDC_Control+0x24>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	0800549b 	.word	0x0800549b
 8005338:	0800549b 	.word	0x0800549b
 800533c:	0800549b 	.word	0x0800549b
 8005340:	0800549b 	.word	0x0800549b
 8005344:	0800549b 	.word	0x0800549b
 8005348:	0800549b 	.word	0x0800549b
 800534c:	0800549b 	.word	0x0800549b
 8005350:	0800549b 	.word	0x0800549b
 8005354:	0800549b 	.word	0x0800549b
 8005358:	0800549b 	.word	0x0800549b
 800535c:	0800549b 	.word	0x0800549b
 8005360:	0800549b 	.word	0x0800549b
 8005364:	0800549b 	.word	0x0800549b
 8005368:	0800549b 	.word	0x0800549b
 800536c:	0800549b 	.word	0x0800549b
 8005370:	0800549b 	.word	0x0800549b
 8005374:	0800549b 	.word	0x0800549b
 8005378:	0800549b 	.word	0x0800549b
 800537c:	0800549b 	.word	0x0800549b
 8005380:	0800549b 	.word	0x0800549b
 8005384:	0800549b 	.word	0x0800549b
 8005388:	0800549b 	.word	0x0800549b
 800538c:	0800549b 	.word	0x0800549b
 8005390:	0800549b 	.word	0x0800549b
 8005394:	0800549b 	.word	0x0800549b
 8005398:	0800549b 	.word	0x0800549b
 800539c:	0800549b 	.word	0x0800549b
 80053a0:	0800549b 	.word	0x0800549b
 80053a4:	0800549b 	.word	0x0800549b
 80053a8:	0800549b 	.word	0x0800549b
 80053ac:	0800549b 	.word	0x0800549b
 80053b0:	0800549b 	.word	0x0800549b
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	08005425 	.word	0x08005425
 80053bc:	0800549b 	.word	0x0800549b
 80053c0:	0800549b 	.word	0x0800549b
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	3302      	adds	r3, #2
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80053dc:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	3303      	adds	r3, #3
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	061b      	lsls	r3, r3, #24
 80053e6:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	4611      	mov	r1, r2
 80053ec:	4a2f      	ldr	r2, [pc, #188]	@ (80054ac <CDC_Control+0x19c>)
 80053ee:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	7911      	ldrb	r1, [r2, #4]
 80053f8:	4a2c      	ldr	r2, [pc, #176]	@ (80054ac <CDC_Control+0x19c>)
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	460a      	mov	r2, r1
 8005400:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	7951      	ldrb	r1, [r2, #5]
 8005408:	4a28      	ldr	r2, [pc, #160]	@ (80054ac <CDC_Control+0x19c>)
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	460a      	mov	r2, r1
 8005410:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	7991      	ldrb	r1, [r2, #6]
 8005418:	4a24      	ldr	r2, [pc, #144]	@ (80054ac <CDC_Control+0x19c>)
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4413      	add	r3, r2
 800541e:	460a      	mov	r2, r1
 8005420:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8005422:	e03b      	b.n	800549c <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	4a21      	ldr	r2, [pc, #132]	@ (80054ac <CDC_Control+0x19c>)
 8005428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800542c:	b2da      	uxtb	r2, r3
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	4a1d      	ldr	r2, [pc, #116]	@ (80054ac <CDC_Control+0x19c>)
 8005436:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800543a:	0a1a      	lsrs	r2, r3, #8
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	3301      	adds	r3, #1
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	4a19      	ldr	r2, [pc, #100]	@ (80054ac <CDC_Control+0x19c>)
 8005448:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800544c:	0c1a      	lsrs	r2, r3, #16
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	3302      	adds	r3, #2
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	4a14      	ldr	r2, [pc, #80]	@ (80054ac <CDC_Control+0x19c>)
 800545a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800545e:	0e1a      	lsrs	r2, r3, #24
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	3303      	adds	r3, #3
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	3204      	adds	r2, #4
 800546e:	490f      	ldr	r1, [pc, #60]	@ (80054ac <CDC_Control+0x19c>)
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	791b      	ldrb	r3, [r3, #4]
 8005476:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	3205      	adds	r2, #5
 800547e:	490b      	ldr	r1, [pc, #44]	@ (80054ac <CDC_Control+0x19c>)
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	440b      	add	r3, r1
 8005484:	795b      	ldrb	r3, [r3, #5]
 8005486:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	3206      	adds	r2, #6
 800548e:	4907      	ldr	r1, [pc, #28]	@ (80054ac <CDC_Control+0x19c>)
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	440b      	add	r3, r1
 8005494:	799b      	ldrb	r3, [r3, #6]
 8005496:	7013      	strb	r3, [r2, #0]
    break;
 8005498:	e000      	b.n	800549c <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800549a:	bf00      	nop
  }

  return (USBD_OK);
 800549c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20000b7c 	.word	0x20000b7c

080054b0 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 f825 	bl	8005518 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	4907      	ldr	r1, [pc, #28]	@ (80054f0 <CDC_Receive+0x40>)
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fd2b 	bl	8005f30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	4904      	ldr	r1, [pc, #16]	@ (80054f0 <CDC_Receive+0x40>)
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fd86 	bl	8005ff0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80054e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	200007e0 	.word	0x200007e0

080054f4 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	461a      	mov	r2, r3
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
 8005504:	4613      	mov	r3, r2
 8005506:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	6039      	str	r1, [r7, #0]
 8005522:	71fb      	strb	r3, [r7, #7]
 8005524:	4613      	mov	r3, r2
 8005526:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005536:	fb02 f303 	mul.w	r3, r2, r3
 800553a:	4a0e      	ldr	r2, [pc, #56]	@ (8005574 <CDC_Transmit+0x5c>)
 800553c:	4413      	add	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800554a:	2301      	movs	r3, #1
 800554c:	e00d      	b.n	800556a <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800554e:	88bb      	ldrh	r3, [r7, #4]
 8005550:	79f8      	ldrb	r0, [r7, #7]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	4908      	ldr	r1, [pc, #32]	@ (8005578 <CDC_Transmit+0x60>)
 8005556:	f000 fcc7 	bl	8005ee8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	4906      	ldr	r1, [pc, #24]	@ (8005578 <CDC_Transmit+0x60>)
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fd04 	bl	8005f6c <USBD_CDC_TransmitPacket>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000d9c 	.word	0x20000d9c
 8005578:	200007e0 	.word	0x200007e0

0800557c <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	6039      	str	r1, [r7, #0]
 8005586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2212      	movs	r2, #18
 800558c:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800558e:	4b03      	ldr	r3, [pc, #12]	@ (800559c <USBD_DeviceDescriptor+0x20>)
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	20000040 	.word	0x20000040

080055a0 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	4603      	mov	r3, r0
 80055a8:	6039      	str	r1, [r7, #0]
 80055aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2204      	movs	r2, #4
 80055b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80055b2:	4b03      	ldr	r3, [pc, #12]	@ (80055c0 <USBD_LangIDStrDescriptor+0x20>)
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	20000054 	.word	0x20000054

080055c4 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	6039      	str	r1, [r7, #0]
 80055ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d105      	bne.n	80055e2 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	4907      	ldr	r1, [pc, #28]	@ (80055f8 <USBD_ProductStrDescriptor+0x34>)
 80055da:	4808      	ldr	r0, [pc, #32]	@ (80055fc <USBD_ProductStrDescriptor+0x38>)
 80055dc:	f002 fb5d 	bl	8007c9a <USBD_GetString>
 80055e0:	e004      	b.n	80055ec <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	4904      	ldr	r1, [pc, #16]	@ (80055f8 <USBD_ProductStrDescriptor+0x34>)
 80055e6:	4805      	ldr	r0, [pc, #20]	@ (80055fc <USBD_ProductStrDescriptor+0x38>)
 80055e8:	f002 fb57 	bl	8007c9a <USBD_GetString>
  }
  return USBD_StrDesc;
 80055ec:	4b02      	ldr	r3, [pc, #8]	@ (80055f8 <USBD_ProductStrDescriptor+0x34>)
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000b84 	.word	0x20000b84
 80055fc:	0800902c 	.word	0x0800902c

08005600 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	6039      	str	r1, [r7, #0]
 800560a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	4904      	ldr	r1, [pc, #16]	@ (8005620 <USBD_ManufacturerStrDescriptor+0x20>)
 8005610:	4804      	ldr	r0, [pc, #16]	@ (8005624 <USBD_ManufacturerStrDescriptor+0x24>)
 8005612:	f002 fb42 	bl	8007c9a <USBD_GetString>
  return USBD_StrDesc;
 8005616:	4b02      	ldr	r3, [pc, #8]	@ (8005620 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20000b84 	.word	0x20000b84
 8005624:	08009044 	.word	0x08009044

08005628 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	6039      	str	r1, [r7, #0]
 8005632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	221a      	movs	r2, #26
 8005638:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800563a:	f000 f843 	bl	80056c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800563e:	4b02      	ldr	r3, [pc, #8]	@ (8005648 <USBD_SerialStrDescriptor+0x20>)
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20000058 	.word	0x20000058

0800564c <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	6039      	str	r1, [r7, #0]
 8005656:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d105      	bne.n	800566a <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	4907      	ldr	r1, [pc, #28]	@ (8005680 <USBD_ConfigStrDescriptor+0x34>)
 8005662:	4808      	ldr	r0, [pc, #32]	@ (8005684 <USBD_ConfigStrDescriptor+0x38>)
 8005664:	f002 fb19 	bl	8007c9a <USBD_GetString>
 8005668:	e004      	b.n	8005674 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	4904      	ldr	r1, [pc, #16]	@ (8005680 <USBD_ConfigStrDescriptor+0x34>)
 800566e:	4805      	ldr	r0, [pc, #20]	@ (8005684 <USBD_ConfigStrDescriptor+0x38>)
 8005670:	f002 fb13 	bl	8007c9a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005674:	4b02      	ldr	r3, [pc, #8]	@ (8005680 <USBD_ConfigStrDescriptor+0x34>)
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000b84 	.word	0x20000b84
 8005684:	08009058 	.word	0x08009058

08005688 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	6039      	str	r1, [r7, #0]
 8005692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d105      	bne.n	80056a6 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	4907      	ldr	r1, [pc, #28]	@ (80056bc <USBD_InterfaceStrDescriptor+0x34>)
 800569e:	4808      	ldr	r0, [pc, #32]	@ (80056c0 <USBD_InterfaceStrDescriptor+0x38>)
 80056a0:	f002 fafb 	bl	8007c9a <USBD_GetString>
 80056a4:	e004      	b.n	80056b0 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	4904      	ldr	r1, [pc, #16]	@ (80056bc <USBD_InterfaceStrDescriptor+0x34>)
 80056aa:	4805      	ldr	r0, [pc, #20]	@ (80056c0 <USBD_InterfaceStrDescriptor+0x38>)
 80056ac:	f002 faf5 	bl	8007c9a <USBD_GetString>
  }
  return USBD_StrDesc;
 80056b0:	4b02      	ldr	r3, [pc, #8]	@ (80056bc <USBD_InterfaceStrDescriptor+0x34>)
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000b84 	.word	0x20000b84
 80056c0:	08009068 	.word	0x08009068

080056c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80056ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005708 <Get_SerialNum+0x44>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80056d0:	4b0e      	ldr	r3, [pc, #56]	@ (800570c <Get_SerialNum+0x48>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80056d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005710 <Get_SerialNum+0x4c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80056ea:	2208      	movs	r2, #8
 80056ec:	4909      	ldr	r1, [pc, #36]	@ (8005714 <Get_SerialNum+0x50>)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f814 	bl	800571c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80056f4:	2204      	movs	r2, #4
 80056f6:	4908      	ldr	r1, [pc, #32]	@ (8005718 <Get_SerialNum+0x54>)
 80056f8:	68b8      	ldr	r0, [r7, #8]
 80056fa:	f000 f80f 	bl	800571c <IntToUnicode>
  }
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	1fff7a10 	.word	0x1fff7a10
 800570c:	1fff7a14 	.word	0x1fff7a14
 8005710:	1fff7a18 	.word	0x1fff7a18
 8005714:	2000005a 	.word	0x2000005a
 8005718:	2000006a 	.word	0x2000006a

0800571c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]
 8005732:	e027      	b.n	8005784 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	0f1b      	lsrs	r3, r3, #28
 8005738:	2b09      	cmp	r3, #9
 800573a:	d80b      	bhi.n	8005754 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	0f1b      	lsrs	r3, r3, #28
 8005740:	b2da      	uxtb	r2, r3
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	4619      	mov	r1, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	440b      	add	r3, r1
 800574c:	3230      	adds	r2, #48	@ 0x30
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e00a      	b.n	800576a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	0f1b      	lsrs	r3, r3, #28
 8005758:	b2da      	uxtb	r2, r3
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	4619      	mov	r1, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	440b      	add	r3, r1
 8005764:	3237      	adds	r2, #55	@ 0x37
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	3301      	adds	r3, #1
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	4413      	add	r3, r2
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	3301      	adds	r3, #1
 8005782:	75fb      	strb	r3, [r7, #23]
 8005784:	7dfa      	ldrb	r2, [r7, #23]
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	429a      	cmp	r2, r3
 800578a:	d3d3      	bcc.n	8005734 <IntToUnicode+0x18>
  }
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80057ac:	2300      	movs	r3, #0
 80057ae:	73fb      	strb	r3, [r7, #15]
 80057b0:	e0c6      	b.n	8005940 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80057b8:	fb02 f303 	mul.w	r3, r2, r3
 80057bc:	4a65      	ldr	r2, [pc, #404]	@ (8005954 <USBD_CDC_Init+0x1b8>)
 80057be:	4413      	add	r3, r2
 80057c0:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7c1b      	ldrb	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d13d      	bne.n	8005846 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	4a62      	ldr	r2, [pc, #392]	@ (8005958 <USBD_CDC_Init+0x1bc>)
 80057ce:	5cd1      	ldrb	r1, [r2, r3]
 80057d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057d4:	2202      	movs	r2, #2
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f002 fcd1 	bl	800817e <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	4a5e      	ldr	r2, [pc, #376]	@ (8005958 <USBD_CDC_Init+0x1bc>)
 80057e0:	5cd3      	ldrb	r3, [r2, r3]
 80057e2:	f003 020f 	and.w	r2, r3, #15
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	3324      	adds	r3, #36	@ 0x24
 80057f4:	2201      	movs	r2, #1
 80057f6:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	4a58      	ldr	r2, [pc, #352]	@ (800595c <USBD_CDC_Init+0x1c0>)
 80057fc:	5cd1      	ldrb	r1, [r2, r3]
 80057fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005802:	2202      	movs	r2, #2
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f002 fcba 	bl	800817e <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	4a53      	ldr	r2, [pc, #332]	@ (800595c <USBD_CDC_Init+0x1c0>)
 800580e:	5cd3      	ldrb	r3, [r2, r3]
 8005810:	f003 020f 	and.w	r2, r3, #15
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005824:	2201      	movs	r2, #1
 8005826:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	4a4d      	ldr	r2, [pc, #308]	@ (8005960 <USBD_CDC_Init+0x1c4>)
 800582c:	5cd3      	ldrb	r3, [r2, r3]
 800582e:	f003 020f 	and.w	r2, r3, #15
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	3326      	adds	r3, #38	@ 0x26
 8005840:	2210      	movs	r2, #16
 8005842:	801a      	strh	r2, [r3, #0]
 8005844:	e03a      	b.n	80058bc <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	4a43      	ldr	r2, [pc, #268]	@ (8005958 <USBD_CDC_Init+0x1bc>)
 800584a:	5cd1      	ldrb	r1, [r2, r3]
 800584c:	2340      	movs	r3, #64	@ 0x40
 800584e:	2202      	movs	r2, #2
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f002 fc94 	bl	800817e <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	4a3f      	ldr	r2, [pc, #252]	@ (8005958 <USBD_CDC_Init+0x1bc>)
 800585a:	5cd3      	ldrb	r3, [r2, r3]
 800585c:	f003 020f 	and.w	r2, r3, #15
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	3324      	adds	r3, #36	@ 0x24
 800586e:	2201      	movs	r2, #1
 8005870:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	4a39      	ldr	r2, [pc, #228]	@ (800595c <USBD_CDC_Init+0x1c0>)
 8005876:	5cd1      	ldrb	r1, [r2, r3]
 8005878:	2340      	movs	r3, #64	@ 0x40
 800587a:	2202      	movs	r2, #2
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f002 fc7e 	bl	800817e <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	4a35      	ldr	r2, [pc, #212]	@ (800595c <USBD_CDC_Init+0x1c0>)
 8005886:	5cd3      	ldrb	r3, [r2, r3]
 8005888:	f003 020f 	and.w	r2, r3, #15
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800589c:	2201      	movs	r2, #1
 800589e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005960 <USBD_CDC_Init+0x1c4>)
 80058a4:	5cd3      	ldrb	r3, [r2, r3]
 80058a6:	f003 020f 	and.w	r2, r3, #15
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	3326      	adds	r3, #38	@ 0x26
 80058b8:	2210      	movs	r2, #16
 80058ba:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	4a28      	ldr	r2, [pc, #160]	@ (8005960 <USBD_CDC_Init+0x1c4>)
 80058c0:	5cd1      	ldrb	r1, [r2, r3]
 80058c2:	2308      	movs	r3, #8
 80058c4:	2203      	movs	r2, #3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f002 fc59 	bl	800817e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	4a24      	ldr	r2, [pc, #144]	@ (8005960 <USBD_CDC_Init+0x1c4>)
 80058d0:	5cd3      	ldrb	r3, [r2, r3]
 80058d2:	f003 020f 	and.w	r2, r3, #15
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	3324      	adds	r3, #36	@ 0x24
 80058e4:	2201      	movs	r2, #1
 80058e6:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	7bfa      	ldrb	r2, [r7, #15]
 80058f2:	4610      	mov	r0, r2
 80058f4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2200      	movs	r2, #0
 8005902:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	7c1b      	ldrb	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10b      	bne.n	8005926 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	4a12      	ldr	r2, [pc, #72]	@ (800595c <USBD_CDC_Init+0x1c0>)
 8005912:	5cd1      	ldrb	r1, [r2, r3]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800591a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f002 fd1c 	bl	800835c <USBD_LL_PrepareReceive>
 8005924:	e009      	b.n	800593a <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	4a0c      	ldr	r2, [pc, #48]	@ (800595c <USBD_CDC_Init+0x1c0>)
 800592a:	5cd1      	ldrb	r1, [r2, r3]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005932:	2340      	movs	r3, #64	@ 0x40
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f002 fd11 	bl	800835c <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	3301      	adds	r3, #1
 800593e:	73fb      	strb	r3, [r7, #15]
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f43f af35 	beq.w	80057b2 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000d9c 	.word	0x20000d9c
 8005958:	20000d84 	.word	0x20000d84
 800595c:	20000d88 	.word	0x20000d88
 8005960:	20000d8c 	.word	0x20000d8c

08005964 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005970:	2300      	movs	r3, #0
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e057      	b.n	8005a26 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	4a2f      	ldr	r2, [pc, #188]	@ (8005a38 <USBD_CDC_DeInit+0xd4>)
 800597a:	5cd3      	ldrb	r3, [r2, r3]
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f002 fc23 	bl	80081ca <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	4a2c      	ldr	r2, [pc, #176]	@ (8005a38 <USBD_CDC_DeInit+0xd4>)
 8005988:	5cd3      	ldrb	r3, [r2, r3]
 800598a:	f003 020f 	and.w	r2, r3, #15
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	3324      	adds	r3, #36	@ 0x24
 800599c:	2200      	movs	r2, #0
 800599e:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	4a26      	ldr	r2, [pc, #152]	@ (8005a3c <USBD_CDC_DeInit+0xd8>)
 80059a4:	5cd3      	ldrb	r3, [r2, r3]
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f002 fc0e 	bl	80081ca <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	4a22      	ldr	r2, [pc, #136]	@ (8005a3c <USBD_CDC_DeInit+0xd8>)
 80059b2:	5cd3      	ldrb	r3, [r2, r3]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80059c8:	2200      	movs	r2, #0
 80059ca:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005a40 <USBD_CDC_DeInit+0xdc>)
 80059d0:	5cd3      	ldrb	r3, [r2, r3]
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f002 fbf8 	bl	80081ca <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	4a18      	ldr	r2, [pc, #96]	@ (8005a40 <USBD_CDC_DeInit+0xdc>)
 80059de:	5cd3      	ldrb	r3, [r2, r3]
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	440b      	add	r3, r1
 80059f0:	3324      	adds	r3, #36	@ 0x24
 80059f2:	2200      	movs	r2, #0
 80059f4:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	4a11      	ldr	r2, [pc, #68]	@ (8005a40 <USBD_CDC_DeInit+0xdc>)
 80059fa:	5cd3      	ldrb	r3, [r2, r3]
 80059fc:	f003 020f 	and.w	r2, r3, #15
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3326      	adds	r3, #38	@ 0x26
 8005a0e:	2200      	movs	r2, #0
 8005a10:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	7bfa      	ldrb	r2, [r7, #15]
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	3301      	adds	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0a4      	beq.n	8005976 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000d84 	.word	0x20000d84
 8005a3c:	20000d88 	.word	0x20000d88
 8005a40:	20000d8c 	.word	0x20000d8c

08005a44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	757b      	strb	r3, [r7, #21]
 8005a66:	e015      	b.n	8005a94 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	889b      	ldrh	r3, [r3, #4]
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	7d7b      	ldrb	r3, [r7, #21]
 8005a70:	496d      	ldr	r1, [pc, #436]	@ (8005c28 <USBD_CDC_Setup+0x1e4>)
 8005a72:	5ccb      	ldrb	r3, [r1, r3]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d007      	beq.n	8005a88 <USBD_CDC_Setup+0x44>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	889b      	ldrh	r3, [r3, #4]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	7d7b      	ldrb	r3, [r7, #21]
 8005a80:	496a      	ldr	r1, [pc, #424]	@ (8005c2c <USBD_CDC_Setup+0x1e8>)
 8005a82:	5ccb      	ldrb	r3, [r1, r3]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d102      	bne.n	8005a8e <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8005a88:	7d7b      	ldrb	r3, [r7, #21]
 8005a8a:	75bb      	strb	r3, [r7, #22]
      break;
 8005a8c:	e005      	b.n	8005a9a <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005a8e:	7d7b      	ldrb	r3, [r7, #21]
 8005a90:	3301      	adds	r3, #1
 8005a92:	757b      	strb	r3, [r7, #21]
 8005a94:	7d7b      	ldrb	r3, [r7, #21]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0e6      	beq.n	8005a68 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8005a9a:	7dbb      	ldrb	r3, [r7, #22]
 8005a9c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	4a62      	ldr	r2, [pc, #392]	@ (8005c30 <USBD_CDC_Setup+0x1ec>)
 8005aa6:	4413      	add	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d04a      	beq.n	8005b4c <USBD_CDC_Setup+0x108>
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	f040 80aa 	bne.w	8005c10 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	88db      	ldrh	r3, [r3, #6]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d038      	beq.n	8005b36 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	da1d      	bge.n	8005b0a <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005ad4:	689c      	ldr	r4, [r3, #8]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	7859      	ldrb	r1, [r3, #1]
 8005ada:	7dbb      	ldrb	r3, [r7, #22]
 8005adc:	025b      	lsls	r3, r3, #9
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	88db      	ldrh	r3, [r3, #6]
 8005ae6:	7db8      	ldrb	r0, [r7, #22]
 8005ae8:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	88db      	ldrh	r3, [r3, #6]
 8005aee:	2b07      	cmp	r3, #7
 8005af0:	bf28      	it	cs
 8005af2:	2307      	movcs	r3, #7
 8005af4:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8005af6:	7dbb      	ldrb	r3, [r7, #22]
 8005af8:	025b      	lsls	r3, r3, #9
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	89fa      	ldrh	r2, [r7, #14]
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f002 f929 	bl	8007d5a <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8005b08:	e089      	b.n	8005c1e <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	785a      	ldrb	r2, [r3, #1]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	88db      	ldrh	r3, [r3, #6]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005b20:	7dbb      	ldrb	r3, [r7, #22]
 8005b22:	025b      	lsls	r3, r3, #9
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	18d1      	adds	r1, r2, r3
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	88db      	ldrh	r3, [r3, #6]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 f93f 	bl	8007db2 <USBD_CtlPrepareRx>
    break;
 8005b34:	e073      	b.n	8005c1e <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005b3c:	689c      	ldr	r4, [r3, #8]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	7859      	ldrb	r1, [r3, #1]
 8005b42:	7db8      	ldrb	r0, [r7, #22]
 8005b44:	2300      	movs	r3, #0
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	47a0      	blx	r4
    break;
 8005b4a:	e068      	b.n	8005c1e <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b0b      	cmp	r3, #11
 8005b52:	d852      	bhi.n	8005bfa <USBD_CDC_Setup+0x1b6>
 8005b54:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <USBD_CDC_Setup+0x118>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005c09 	.word	0x08005c09
 8005b64:	08005bfb 	.word	0x08005bfb
 8005b68:	08005bfb 	.word	0x08005bfb
 8005b6c:	08005bfb 	.word	0x08005bfb
 8005b70:	08005bfb 	.word	0x08005bfb
 8005b74:	08005bfb 	.word	0x08005bfb
 8005b78:	08005bfb 	.word	0x08005bfb
 8005b7c:	08005bfb 	.word	0x08005bfb
 8005b80:	08005bfb 	.word	0x08005bfb
 8005b84:	08005bb7 	.word	0x08005bb7
 8005b88:	08005be1 	.word	0x08005be1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d107      	bne.n	8005ba8 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b98:	f107 030a 	add.w	r3, r7, #10
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f002 f8da 	bl	8007d5a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005ba6:	e032      	b.n	8005c0e <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f002 f864 	bl	8007c78 <USBD_CtlError>
        ret = USBD_FAIL;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb4:	e02b      	b.n	8005c0e <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d107      	bne.n	8005bd2 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bc2:	f107 030d 	add.w	r3, r7, #13
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f002 f8c5 	bl	8007d5a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005bd0:	e01d      	b.n	8005c0e <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f002 f84f 	bl	8007c78 <USBD_CtlError>
        ret = USBD_FAIL;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bde:	e016      	b.n	8005c0e <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d00f      	beq.n	8005c0c <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f002 f842 	bl	8007c78 <USBD_CtlError>
        ret = USBD_FAIL;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005bf8:	e008      	b.n	8005c0c <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f002 f83b 	bl	8007c78 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c02:	2303      	movs	r3, #3
 8005c04:	75fb      	strb	r3, [r7, #23]
      break;
 8005c06:	e002      	b.n	8005c0e <USBD_CDC_Setup+0x1ca>
      break;
 8005c08:	bf00      	nop
 8005c0a:	e008      	b.n	8005c1e <USBD_CDC_Setup+0x1da>
      break;
 8005c0c:	bf00      	nop
    }
    break;
 8005c0e:	e006      	b.n	8005c1e <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f002 f830 	bl	8007c78 <USBD_CtlError>
    ret = USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	75fb      	strb	r3, [r7, #23]
    break;
 8005c1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd90      	pop	{r4, r7, pc}
 8005c28:	20000d90 	.word	0x20000d90
 8005c2c:	20000d94 	.word	0x20000d94
 8005c30:	20000d9c 	.word	0x20000d9c

08005c34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8005c4a:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005c50:	2300      	movs	r3, #0
 8005c52:	75bb      	strb	r3, [r7, #22]
 8005c54:	e00d      	b.n	8005c72 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8005c56:	78fa      	ldrb	r2, [r7, #3]
 8005c58:	7dbb      	ldrb	r3, [r7, #22]
 8005c5a:	4934      	ldr	r1, [pc, #208]	@ (8005d2c <USBD_CDC_DataIn+0xf8>)
 8005c5c:	5ccb      	ldrb	r3, [r1, r3]
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d102      	bne.n	8005c6c <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8005c66:	7dbb      	ldrb	r3, [r7, #22]
 8005c68:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6a:	e005      	b.n	8005c78 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005c6c:	7dbb      	ldrb	r3, [r7, #22]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	75bb      	strb	r3, [r7, #22]
 8005c72:	7dbb      	ldrb	r3, [r7, #22]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0ee      	beq.n	8005c56 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	4a2b      	ldr	r2, [pc, #172]	@ (8005d30 <USBD_CDC_DataIn+0xfc>)
 8005c84:	4413      	add	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c88:	78fa      	ldrb	r2, [r7, #3]
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	3318      	adds	r3, #24
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d029      	beq.n	8005cf2 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	3318      	adds	r3, #24
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	78f9      	ldrb	r1, [r7, #3]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	440b      	add	r3, r1
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4403      	add	r3, r0
 8005cbe:	331c      	adds	r3, #28
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cc6:	fb01 f303 	mul.w	r3, r1, r3
 8005cca:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d110      	bne.n	8005cf2 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005cd0:	78fa      	ldrb	r2, [r7, #3]
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	3318      	adds	r3, #24
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ce4:	78f9      	ldrb	r1, [r7, #3]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2200      	movs	r2, #0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f002 fb15 	bl	800831a <USBD_LL_Transmit>
 8005cf0:	e016      	b.n	8005d20 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00c      	beq.n	8005d20 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005d0c:	691c      	ldr	r4, [r3, #16]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	7df8      	ldrb	r0, [r7, #23]
 8005d1e:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd90      	pop	{r4, r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000d84 	.word	0x20000d84
 8005d30:	20000d9c 	.word	0x20000d9c

08005d34 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	73bb      	strb	r3, [r7, #14]
 8005d4c:	e00b      	b.n	8005d66 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
 8005d50:	4a17      	ldr	r2, [pc, #92]	@ (8005db0 <USBD_CDC_DataOut+0x7c>)
 8005d52:	5cd3      	ldrb	r3, [r2, r3]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d102      	bne.n	8005d60 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8005d5a:	7bbb      	ldrb	r3, [r7, #14]
 8005d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d5e:	e005      	b.n	8005d6c <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005d60:	7bbb      	ldrb	r3, [r7, #14]
 8005d62:	3301      	adds	r3, #1
 8005d64:	73bb      	strb	r3, [r7, #14]
 8005d66:	7bbb      	ldrb	r3, [r7, #14]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005d72:	fb02 f303 	mul.w	r3, r2, r3
 8005d76:	4a0f      	ldr	r2, [pc, #60]	@ (8005db4 <USBD_CDC_DataOut+0x80>)
 8005d78:	4413      	add	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f002 fb0c 	bl	800839e <USBD_LL_GetRxDataSize>
 8005d86:	4602      	mov	r2, r0
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005da2:	7bf8      	ldrb	r0, [r7, #15]
 8005da4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000d88 	.word	0x20000d88
 8005db4:	20000d9c 	.word	0x20000d9c

08005db8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73fb      	strb	r3, [r7, #15]
 8005dc8:	e02d      	b.n	8005e26 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
 8005dd4:	4a18      	ldr	r2, [pc, #96]	@ (8005e38 <USBD_CDC_EP0_RxReady+0x80>)
 8005dd6:	4413      	add	r3, r2
 8005dd8:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e024      	b.n	8005e2e <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d018      	beq.n	8005e20 <USBD_CDC_EP0_RxReady+0x68>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005df4:	2bff      	cmp	r3, #255	@ 0xff
 8005df6:	d013      	beq.n	8005e20 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005dfe:	689c      	ldr	r4, [r3, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	025b      	lsls	r3, r3, #9
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005e14:	7bf8      	ldrb	r0, [r7, #15]
 8005e16:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	22ff      	movs	r2, #255	@ 0xff
 8005e1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	3301      	adds	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0ce      	beq.n	8005dca <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd90      	pop	{r4, r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000d9c 	.word	0x20000d9c

08005e3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	224b      	movs	r2, #75	@ 0x4b
 8005e48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005e4a:	4b03      	ldr	r3, [pc, #12]	@ (8005e58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20000108 	.word	0x20000108

08005e5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	224b      	movs	r2, #75	@ 0x4b
 8005e68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005e6a:	4b03      	ldr	r3, [pc, #12]	@ (8005e78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	200000bc 	.word	0x200000bc

08005e7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	224b      	movs	r2, #75	@ 0x4b
 8005e88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005e8a:	4b03      	ldr	r3, [pc, #12]	@ (8005e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	20000108 	.word	0x20000108

08005e9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	220a      	movs	r2, #10
 8005ea8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005eaa:	4b03      	ldr	r3, [pc, #12]	@ (8005eb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	20000074 	.word	0x20000074

08005ebc <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e004      	b.n	8005eda <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	4a09      	ldr	r2, [pc, #36]	@ (8005f2c <USBD_CDC_SetTxBuffer+0x44>)
 8005f08:	4413      	add	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20000d9c 	.word	0x20000d9c

08005f30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005f48:	fb02 f303 	mul.w	r3, r2, r3
 8005f4c:	4a06      	ldr	r2, [pc, #24]	@ (8005f68 <USBD_CDC_SetRxBuffer+0x38>)
 8005f4e:	4413      	add	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	20000d9c 	.word	0x20000d9c

08005f6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	6039      	str	r1, [r7, #0]
 8005f76:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	4a17      	ldr	r2, [pc, #92]	@ (8005fe8 <USBD_CDC_TransmitPacket+0x7c>)
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d121      	bne.n	8005fde <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	4a11      	ldr	r2, [pc, #68]	@ (8005fec <USBD_CDC_TransmitPacket+0x80>)
 8005fa6:	5cd3      	ldrb	r3, [r2, r3]
 8005fa8:	f003 020f 	and.w	r2, r3, #15
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005fb2:	6838      	ldr	r0, [r7, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4403      	add	r3, r0
 8005fbe:	3318      	adds	r3, #24
 8005fc0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4a09      	ldr	r2, [pc, #36]	@ (8005fec <USBD_CDC_TransmitPacket+0x80>)
 8005fc6:	5cd1      	ldrb	r1, [r2, r3]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005fd4:	6838      	ldr	r0, [r7, #0]
 8005fd6:	f002 f9a0 	bl	800831a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000d9c 	.word	0x20000d9c
 8005fec:	20000d84 	.word	0x20000d84

08005ff0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	6039      	str	r1, [r7, #0]
 8005ffa:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006006:	fb02 f303 	mul.w	r3, r2, r3
 800600a:	4a11      	ldr	r2, [pc, #68]	@ (8006050 <USBD_CDC_ReceivePacket+0x60>)
 800600c:	4413      	add	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	7c1b      	ldrb	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	4a0e      	ldr	r2, [pc, #56]	@ (8006054 <USBD_CDC_ReceivePacket+0x64>)
 800601c:	5cd1      	ldrb	r1, [r2, r3]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006028:	6838      	ldr	r0, [r7, #0]
 800602a:	f002 f997 	bl	800835c <USBD_LL_PrepareReceive>
 800602e:	e009      	b.n	8006044 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	4a08      	ldr	r2, [pc, #32]	@ (8006054 <USBD_CDC_ReceivePacket+0x64>)
 8006034:	5cd1      	ldrb	r1, [r2, r3]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800603c:	2340      	movs	r3, #64	@ 0x40
 800603e:	6838      	ldr	r0, [r7, #0]
 8006040:	f002 f98c 	bl	800835c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000d9c 	.word	0x20000d9c
 8006054:	20000d88 	.word	0x20000d88

08006058 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	70fb      	strb	r3, [r7, #3]
 800606a:	460b      	mov	r3, r1
 800606c:	70bb      	strb	r3, [r7, #2]
 800606e:	4613      	mov	r3, r2
 8006070:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3309      	adds	r3, #9
 8006076:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
 800607c:	e05b      	b.n	8006136 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3302      	adds	r3, #2
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3310      	adds	r3, #16
 800608a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800608e:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	330a      	adds	r3, #10
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	331a      	adds	r3, #26
 800609c:	78ba      	ldrb	r2, [r7, #2]
 800609e:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3322      	adds	r3, #34	@ 0x22
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3323      	adds	r3, #35	@ 0x23
 80060ac:	78ba      	ldrb	r2, [r7, #2]
 80060ae:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3326      	adds	r3, #38	@ 0x26
 80060b4:	7e3a      	ldrb	r2, [r7, #24]
 80060b6:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	332d      	adds	r3, #45	@ 0x2d
 80060bc:	78ba      	ldrb	r2, [r7, #2]
 80060be:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3336      	adds	r3, #54	@ 0x36
 80060c4:	7f3a      	ldrb	r2, [r7, #28]
 80060c6:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	333d      	adds	r3, #61	@ 0x3d
 80060cc:	787a      	ldrb	r2, [r7, #1]
 80060ce:	701a      	strb	r2, [r3, #0]

    desc += 66;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3342      	adds	r3, #66	@ 0x42
 80060d4:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	491c      	ldr	r1, [pc, #112]	@ (800614c <USBD_Update_CDC_ACM_DESC+0xf4>)
 80060da:	787a      	ldrb	r2, [r7, #1]
 80060dc:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	491b      	ldr	r1, [pc, #108]	@ (8006150 <USBD_Update_CDC_ACM_DESC+0xf8>)
 80060e2:	7f3a      	ldrb	r2, [r7, #28]
 80060e4:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	491a      	ldr	r1, [pc, #104]	@ (8006154 <USBD_Update_CDC_ACM_DESC+0xfc>)
 80060ea:	7e3a      	ldrb	r2, [r7, #24]
 80060ec:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	4919      	ldr	r1, [pc, #100]	@ (8006158 <USBD_Update_CDC_ACM_DESC+0x100>)
 80060f2:	78fa      	ldrb	r2, [r7, #3]
 80060f4:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	4918      	ldr	r1, [pc, #96]	@ (800615c <USBD_Update_CDC_ACM_DESC+0x104>)
 80060fa:	78ba      	ldrb	r2, [r7, #2]
 80060fc:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	4917      	ldr	r1, [pc, #92]	@ (8006160 <USBD_Update_CDC_ACM_DESC+0x108>)
 8006102:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006106:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8006108:	787b      	ldrb	r3, [r7, #1]
 800610a:	3302      	adds	r3, #2
 800610c:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800610e:	787b      	ldrb	r3, [r7, #1]
 8006110:	3301      	adds	r3, #1
 8006112:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8006114:	7f3b      	ldrb	r3, [r7, #28]
 8006116:	3301      	adds	r3, #1
 8006118:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800611a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800611e:	3301      	adds	r3, #1
 8006120:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	3302      	adds	r3, #2
 8006128:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	3301      	adds	r3, #1
 800612e:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	3301      	adds	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0a0      	beq.n	800607e <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000d84 	.word	0x20000d84
 8006150:	20000d88 	.word	0x20000d88
 8006154:	20000d8c 	.word	0x20000d8c
 8006158:	20000d90 	.word	0x20000d90
 800615c:	20000d94 	.word	0x20000d94
 8006160:	20000d98 	.word	0x20000d98

08006164 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8006170:	4b08      	ldr	r3, [pc, #32]	@ (8006194 <USBD_COMPOSITE_Init+0x30>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	78fa      	ldrb	r2, [r7, #3]
 8006176:	4611      	mov	r1, r2
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
 800617c:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <USBD_COMPOSITE_Init+0x34>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	78fa      	ldrb	r2, [r7, #3]
 8006182:	4611      	mov	r1, r2
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000080 	.word	0x20000080
 8006198:	200001a0 	.word	0x200001a0

0800619c <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 80061a8:	4b08      	ldr	r3, [pc, #32]	@ (80061cc <USBD_COMPOSITE_DeInit+0x30>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	4611      	mov	r1, r2
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
 80061b4:	4b06      	ldr	r3, [pc, #24]	@ (80061d0 <USBD_COMPOSITE_DeInit+0x34>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	4611      	mov	r1, r2
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000080 	.word	0x20000080
 80061d0:	200001a0 	.word	0x200001a0

080061d4 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	e019      	b.n	8006218 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	889b      	ldrh	r3, [r3, #4]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	4915      	ldr	r1, [pc, #84]	@ (8006244 <USBD_COMPOSITE_Setup+0x70>)
 80061ee:	5ccb      	ldrb	r3, [r1, r3]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d007      	beq.n	8006204 <USBD_COMPOSITE_Setup+0x30>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	889b      	ldrh	r3, [r3, #4]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	4912      	ldr	r1, [pc, #72]	@ (8006248 <USBD_COMPOSITE_Setup+0x74>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	429a      	cmp	r2, r3
 8006202:	d106      	bne.n	8006212 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8006204:	4b11      	ldr	r3, [pc, #68]	@ (800624c <USBD_COMPOSITE_Setup+0x78>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	4798      	blx	r3
 800620e:	4603      	mov	r3, r0
 8006210:	e014      	b.n	800623c <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	3301      	adds	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0e2      	beq.n	80061e4 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_MOUSE.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (LOBYTE(req->wIndex) == HID_KEYBOARD_ITF_NBR)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	889b      	ldrh	r3, [r3, #4]
 8006222:	b2da      	uxtb	r2, r3
 8006224:	4b0a      	ldr	r3, [pc, #40]	@ (8006250 <USBD_COMPOSITE_Setup+0x7c>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d106      	bne.n	800623a <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
 800622c:	4b09      	ldr	r3, [pc, #36]	@ (8006254 <USBD_COMPOSITE_Setup+0x80>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3
 8006236:	4603      	mov	r3, r0
 8006238:	e000      	b.n	800623c <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800623a:	2303      	movs	r3, #3
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000d90 	.word	0x20000d90
 8006248:	20000d94 	.word	0x20000d94
 800624c:	20000080 	.word	0x20000080
 8006250:	200010c0 	.word	0x200010c0
 8006254:	200001a0 	.word	0x200001a0

08006258 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006264:	2300      	movs	r3, #0
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	e01a      	b.n	80062a0 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	4918      	ldr	r1, [pc, #96]	@ (80062d0 <USBD_COMPOSITE_DataIn+0x78>)
 8006270:	5ccb      	ldrb	r3, [r1, r3]
 8006272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006276:	429a      	cmp	r2, r3
 8006278:	d007      	beq.n	800628a <USBD_COMPOSITE_DataIn+0x32>
 800627a:	78fa      	ldrb	r2, [r7, #3]
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	4915      	ldr	r1, [pc, #84]	@ (80062d4 <USBD_COMPOSITE_DataIn+0x7c>)
 8006280:	5ccb      	ldrb	r3, [r1, r3]
 8006282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006286:	429a      	cmp	r2, r3
 8006288:	d107      	bne.n	800629a <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800628a:	4b13      	ldr	r3, [pc, #76]	@ (80062d8 <USBD_COMPOSITE_DataIn+0x80>)
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	78fa      	ldrb	r2, [r7, #3]
 8006290:	4611      	mov	r1, r2
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	4798      	blx	r3
 8006296:	4603      	mov	r3, r0
 8006298:	e015      	b.n	80062c6 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	3301      	adds	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0e1      	beq.n	800626a <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_MOUSE.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (epnum == (HID_KEYBOARD_IN_EP & 0x7F))
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	4b0c      	ldr	r3, [pc, #48]	@ (80062dc <USBD_COMPOSITE_DataIn+0x84>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d107      	bne.n	80062c4 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
 80062b4:	4b0a      	ldr	r3, [pc, #40]	@ (80062e0 <USBD_COMPOSITE_DataIn+0x88>)
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	78fa      	ldrb	r2, [r7, #3]
 80062ba:	4611      	mov	r1, r2
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
 80062c0:	4603      	mov	r3, r0
 80062c2:	e000      	b.n	80062c6 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 80062c4:	2303      	movs	r3, #3
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000d84 	.word	0x20000d84
 80062d4:	20000d8c 	.word	0x20000d8c
 80062d8:	20000080 	.word	0x20000080
 80062dc:	2000019e 	.word	0x2000019e
 80062e0:	200001a0 	.word	0x200001a0

080062e4 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 80062ec:	4b04      	ldr	r3, [pc, #16]	@ (8006300 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000080 	.word	0x20000080

08006304 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006370:	2300      	movs	r3, #0
 8006372:	73fb      	strb	r3, [r7, #15]
 8006374:	e010      	b.n	8006398 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	4a0b      	ldr	r2, [pc, #44]	@ (80063a8 <USBD_COMPOSITE_DataOut+0x44>)
 800637a:	5cd3      	ldrb	r3, [r2, r3]
 800637c:	78fa      	ldrb	r2, [r7, #3]
 800637e:	429a      	cmp	r2, r3
 8006380:	d107      	bne.n	8006392 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8006382:	4b0a      	ldr	r3, [pc, #40]	@ (80063ac <USBD_COMPOSITE_DataOut+0x48>)
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	78fa      	ldrb	r2, [r7, #3]
 8006388:	4611      	mov	r1, r2
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
 800638e:	4603      	mov	r3, r0
 8006390:	e006      	b.n	80063a0 <USBD_COMPOSITE_DataOut+0x3c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	3301      	adds	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0eb      	beq.n	8006376 <USBD_COMPOSITE_DataOut+0x12>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800639e:	2303      	movs	r3, #3
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20000d88 	.word	0x20000d88
 80063ac:	20000080 	.word	0x20000080

080063b0 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2264      	movs	r2, #100	@ 0x64
 80063bc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80063be:	4b03      	ldr	r3, [pc, #12]	@ (80063cc <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	2000101c 	.word	0x2000101c

080063d0 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2264      	movs	r2, #100	@ 0x64
 80063dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 80063de:	4b03      	ldr	r3, [pc, #12]	@ (80063ec <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20000fb8 	.word	0x20000fb8

080063f0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2264      	movs	r2, #100	@ 0x64
 80063fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80063fe:	4b03      	ldr	r3, [pc, #12]	@ (800640c <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	2000101c 	.word	0x2000101c

08006410 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	220a      	movs	r2, #10
 800641c:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800641e:	4b03      	ldr	r3, [pc, #12]	@ (800642c <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	20000194 	.word	0x20000194

08006430 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	@ 0x28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	460b      	mov	r3, r1
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800643e:	4b20      	ldr	r3, [pc, #128]	@ (80064c0 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	7afa      	ldrb	r2, [r7, #11]
 8006444:	429a      	cmp	r2, r3
 8006446:	d836      	bhi.n	80064b6 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	f107 0318 	add.w	r3, r7, #24
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	605a      	str	r2, [r3, #4]
 8006456:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006458:	2300      	movs	r3, #0
 800645a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800645e:	e01a      	b.n	8006496 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8006460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006464:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8006466:	5cd3      	ldrb	r3, [r2, r3]
 8006468:	7afa      	ldrb	r2, [r7, #11]
 800646a:	429a      	cmp	r2, r3
 800646c:	d10e      	bne.n	800648c <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800646e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006472:	f107 0014 	add.w	r0, r7, #20
 8006476:	4a14      	ldr	r2, [pc, #80]	@ (80064c8 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8006478:	2110      	movs	r1, #16
 800647a:	f001 ffcf 	bl	800841c <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800647e:	f107 0314 	add.w	r3, r7, #20
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	4911      	ldr	r1, [pc, #68]	@ (80064cc <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8006486:	4618      	mov	r0, r3
 8006488:	f001 fc07 	bl	8007c9a <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800648c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006490:	3301      	adds	r3, #1
 8006492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006496:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0e0      	beq.n	8006460 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_MOUSE_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    if (index == HID_KEYBOARD_STR_DESC_IDX)
 800649e:	4b0c      	ldr	r3, [pc, #48]	@ (80064d0 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	7afa      	ldrb	r2, [r7, #11]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d104      	bne.n	80064b2 <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	4908      	ldr	r1, [pc, #32]	@ (80064cc <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 80064ac:	4809      	ldr	r0, [pc, #36]	@ (80064d4 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 80064ae:	f001 fbf4 	bl	8007c9a <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 80064b2:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 80064b4:	e000      	b.n	80064b8 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80064b6:	2300      	movs	r3, #0
  }
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3728      	adds	r7, #40	@ 0x28
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000190 	.word	0x20000190
 80064c4:	20000d98 	.word	0x20000d98
 80064c8:	0800907c 	.word	0x0800907c
 80064cc:	20001080 	.word	0x20001080
 80064d0:	200010c1 	.word	0x200010c1
 80064d4:	0800908c 	.word	0x0800908c

080064d8 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b089      	sub	sp, #36	@ 0x24
 80064dc:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 80064e6:	2381      	movs	r3, #129	@ 0x81
 80064e8:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 80064ea:	2301      	movs	r3, #1
 80064ec:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 80064ee:	2300      	movs	r3, #0
 80064f0:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_KEYBOARD == 1)
  ptr = USBD_HID_KEYBOARD.GetFSConfigDescriptor(&len);
 80064f2:	4b6f      	ldr	r3, [pc, #444]	@ (80066b0 <USBD_COMPOSITE_Mount_Class+0x1d8>)
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	1d3a      	adds	r2, r7, #4
 80064f8:	4610      	mov	r0, r2
 80064fa:	4798      	blx	r3
 80064fc:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 80064fe:	4b6d      	ldr	r3, [pc, #436]	@ (80066b4 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	7afa      	ldrb	r2, [r7, #11]
 8006504:	7a79      	ldrb	r1, [r7, #9]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 faf0 	bl	8006aec <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3309      	adds	r3, #9
 8006510:	88ba      	ldrh	r2, [r7, #4]
 8006512:	3a09      	subs	r2, #9
 8006514:	4619      	mov	r1, r3
 8006516:	4868      	ldr	r0, [pc, #416]	@ (80066b8 <USBD_COMPOSITE_Mount_Class+0x1e0>)
 8006518:	f002 f818 	bl	800854c <memcpy>

  ptr = USBD_HID_KEYBOARD.GetHSConfigDescriptor(&len);
 800651c:	4b64      	ldr	r3, [pc, #400]	@ (80066b0 <USBD_COMPOSITE_Mount_Class+0x1d8>)
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	1d3a      	adds	r2, r7, #4
 8006522:	4610      	mov	r0, r2
 8006524:	4798      	blx	r3
 8006526:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8006528:	4b62      	ldr	r3, [pc, #392]	@ (80066b4 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	7afa      	ldrb	r2, [r7, #11]
 800652e:	7a79      	ldrb	r1, [r7, #9]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 fadb 	bl	8006aec <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3309      	adds	r3, #9
 800653a:	88ba      	ldrh	r2, [r7, #4]
 800653c:	3a09      	subs	r2, #9
 800653e:	4619      	mov	r1, r3
 8006540:	485e      	ldr	r0, [pc, #376]	@ (80066bc <USBD_COMPOSITE_Mount_Class+0x1e4>)
 8006542:	f002 f803 	bl	800854c <memcpy>

  in_ep_track += 1;
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	3301      	adds	r3, #1
 800654a:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 800654c:	7a7b      	ldrb	r3, [r7, #9]
 800654e:	3301      	adds	r3, #1
 8006550:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8006552:	4b58      	ldr	r3, [pc, #352]	@ (80066b4 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	b2da      	uxtb	r2, r3
 800655a:	4b56      	ldr	r3, [pc, #344]	@ (80066b4 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800655c:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800655e:	4b58      	ldr	r3, [pc, #352]	@ (80066c0 <USBD_COMPOSITE_Mount_Class+0x1e8>)
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	1d3a      	adds	r2, r7, #4
 8006564:	4610      	mov	r0, r2
 8006566:	4798      	blx	r3
 8006568:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800656a:	7a7b      	ldrb	r3, [r7, #9]
 800656c:	3301      	adds	r3, #1
 800656e:	b2d8      	uxtb	r0, r3
 8006570:	7afb      	ldrb	r3, [r7, #11]
 8006572:	3301      	adds	r3, #1
 8006574:	b2db      	uxtb	r3, r3
 8006576:	4a4f      	ldr	r2, [pc, #316]	@ (80066b4 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006578:	7812      	ldrb	r2, [r2, #0]
 800657a:	7afc      	ldrb	r4, [r7, #11]
 800657c:	7a79      	ldrb	r1, [r7, #9]
 800657e:	9202      	str	r2, [sp, #8]
 8006580:	7aba      	ldrb	r2, [r7, #10]
 8006582:	9201      	str	r2, [sp, #4]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4623      	mov	r3, r4
 8006588:	4602      	mov	r2, r0
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f7ff fd64 	bl	8006058 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3309      	adds	r3, #9
 8006594:	88ba      	ldrh	r2, [r7, #4]
 8006596:	3a09      	subs	r2, #9
 8006598:	4619      	mov	r1, r3
 800659a:	484a      	ldr	r0, [pc, #296]	@ (80066c4 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800659c:	f001 ffd6 	bl	800854c <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 80065a0:	4b47      	ldr	r3, [pc, #284]	@ (80066c0 <USBD_COMPOSITE_Mount_Class+0x1e8>)
 80065a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a4:	1d3a      	adds	r2, r7, #4
 80065a6:	4610      	mov	r0, r2
 80065a8:	4798      	blx	r3
 80065aa:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 80065ac:	7a7b      	ldrb	r3, [r7, #9]
 80065ae:	3301      	adds	r3, #1
 80065b0:	b2d8      	uxtb	r0, r3
 80065b2:	7afb      	ldrb	r3, [r7, #11]
 80065b4:	3301      	adds	r3, #1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	4a3e      	ldr	r2, [pc, #248]	@ (80066b4 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	7afc      	ldrb	r4, [r7, #11]
 80065be:	7a79      	ldrb	r1, [r7, #9]
 80065c0:	9202      	str	r2, [sp, #8]
 80065c2:	7aba      	ldrb	r2, [r7, #10]
 80065c4:	9201      	str	r2, [sp, #4]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4623      	mov	r3, r4
 80065ca:	4602      	mov	r2, r0
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff fd43 	bl	8006058 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3309      	adds	r3, #9
 80065d6:	88ba      	ldrh	r2, [r7, #4]
 80065d8:	3a09      	subs	r2, #9
 80065da:	4619      	mov	r1, r3
 80065dc:	483a      	ldr	r0, [pc, #232]	@ (80066c8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80065de:	f001 ffb5 	bl	800854c <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 80065e2:	7afb      	ldrb	r3, [r7, #11]
 80065e4:	3302      	adds	r3, #2
 80065e6:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 80065e8:	7abb      	ldrb	r3, [r7, #10]
 80065ea:	3301      	adds	r3, #1
 80065ec:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 80065ee:	7a7b      	ldrb	r3, [r7, #9]
 80065f0:	3302      	adds	r3, #2
 80065f2:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 80065f4:	4b2f      	ldr	r3, [pc, #188]	@ (80066b4 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	4b2d      	ldr	r3, [pc, #180]	@ (80066b4 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 80065fe:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8006600:	2364      	movs	r3, #100	@ 0x64
 8006602:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8006604:	4b31      	ldr	r3, [pc, #196]	@ (80066cc <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8006606:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2209      	movs	r2, #9
 800660c:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3301      	adds	r3, #1
 8006612:	2202      	movs	r2, #2
 8006614:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3302      	adds	r3, #2
 800661a:	88fa      	ldrh	r2, [r7, #6]
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8006620:	88fb      	ldrh	r3, [r7, #6]
 8006622:	0a1b      	lsrs	r3, r3, #8
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3303      	adds	r3, #3
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3304      	adds	r3, #4
 8006632:	7a7a      	ldrb	r2, [r7, #9]
 8006634:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3305      	adds	r3, #5
 800663a:	2201      	movs	r2, #1
 800663c:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3306      	adds	r3, #6
 8006642:	2200      	movs	r2, #0
 8006644:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3307      	adds	r3, #7
 800664a:	22c0      	movs	r2, #192	@ 0xc0
 800664c:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3308      	adds	r3, #8
 8006652:	2232      	movs	r2, #50	@ 0x32
 8006654:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8006656:	4b1e      	ldr	r3, [pc, #120]	@ (80066d0 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8006658:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2209      	movs	r2, #9
 800665e:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	2202      	movs	r2, #2
 8006666:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3302      	adds	r3, #2
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	0a1b      	lsrs	r3, r3, #8
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3303      	adds	r3, #3
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3304      	adds	r3, #4
 8006684:	7a7a      	ldrb	r2, [r7, #9]
 8006686:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3305      	adds	r3, #5
 800668c:	2201      	movs	r2, #1
 800668e:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3306      	adds	r3, #6
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3307      	adds	r3, #7
 800669c:	22c0      	movs	r2, #192	@ 0xc0
 800669e:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3308      	adds	r3, #8
 80066a4:	2232      	movs	r2, #50	@ 0x32
 80066a6:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 80066a8:	bf00      	nop
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd90      	pop	{r4, r7, pc}
 80066b0:	200001a0 	.word	0x200001a0
 80066b4:	20000190 	.word	0x20000190
 80066b8:	20000fc1 	.word	0x20000fc1
 80066bc:	20001025 	.word	0x20001025
 80066c0:	20000080 	.word	0x20000080
 80066c4:	20000fda 	.word	0x20000fda
 80066c8:	2000103e 	.word	0x2000103e
 80066cc:	2000101c 	.word	0x2000101c
 80066d0:	20000fb8 	.word	0x20000fb8

080066d4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_Keyboard_HandleTypeDef *hhid;

  hhid = &USBD_HID_KBD_Instace;
 80066e0:	4b24      	ldr	r3, [pc, #144]	@ (8006774 <USBD_HID_Init+0xa0>)
 80066e2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d105      	bne.n	80066f6 <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Keyboard = NULL;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
    return (uint8_t)USBD_EMEM;
 80066f2:	2302      	movs	r3, #2
 80066f4:	e03a      	b.n	800676c <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Keyboard = (void *)hhid;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	7c1b      	ldrb	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10d      	bne.n	8006722 <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_HS_BINTERVAL;
 8006706:	4b1c      	ldr	r3, [pc, #112]	@ (8006778 <USBD_HID_Init+0xa4>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	f003 020f 	and.w	r2, r3, #15
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	3326      	adds	r3, #38	@ 0x26
 800671c:	2207      	movs	r2, #7
 800671e:	801a      	strh	r2, [r3, #0]
 8006720:	e00c      	b.n	800673c <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_FS_BINTERVAL;
 8006722:	4b15      	ldr	r3, [pc, #84]	@ (8006778 <USBD_HID_Init+0xa4>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	f003 020f 	and.w	r2, r3, #15
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	3326      	adds	r3, #38	@ 0x26
 8006738:	220a      	movs	r2, #10
 800673a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_KEYBOARD_IN_EP, USBD_EP_TYPE_INTR, HID_KEYBOARD_EPIN_SIZE);
 800673c:	4b0e      	ldr	r3, [pc, #56]	@ (8006778 <USBD_HID_Init+0xa4>)
 800673e:	7819      	ldrb	r1, [r3, #0]
 8006740:	2308      	movs	r3, #8
 8006742:	2203      	movs	r2, #3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fd1a 	bl	800817e <USBD_LL_OpenEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 1U;
 800674a:	4b0b      	ldr	r3, [pc, #44]	@ (8006778 <USBD_HID_Init+0xa4>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	f003 020f 	and.w	r2, r3, #15
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	3324      	adds	r3, #36	@ 0x24
 8006760:	2201      	movs	r2, #1
 8006762:	801a      	strh	r2, [r3, #0]

  hhid->state = KEYBOARD_HID_IDLE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	200010c4 	.word	0x200010c4
 8006778:	2000019e 	.word	0x2000019e

0800677c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_KEYBOARD_IN_EP);
 8006788:	4b16      	ldr	r3, [pc, #88]	@ (80067e4 <USBD_HID_DeInit+0x68>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f001 fd1b 	bl	80081ca <USBD_LL_CloseEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 0U;
 8006794:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <USBD_HID_DeInit+0x68>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	f003 020f 	and.w	r2, r3, #15
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	3324      	adds	r3, #36	@ 0x24
 80067aa:	2200      	movs	r2, #0
 80067ac:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = 0U;
 80067ae:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <USBD_HID_DeInit+0x68>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	f003 020f 	and.w	r2, r3, #15
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	3326      	adds	r3, #38	@ 0x26
 80067c4:	2200      	movs	r2, #0
 80067c6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Keyboard != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Keyboard);
#endif
    pdev->pClassData_HID_Keyboard = NULL;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  }

  return (uint8_t)USBD_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	2000019e 	.word	0x2000019e

080067e8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067f8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	e0e8      	b.n	80069de <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006814:	2b00      	cmp	r3, #0
 8006816:	d046      	beq.n	80068a6 <USBD_HID_Setup+0xbe>
 8006818:	2b20      	cmp	r3, #32
 800681a:	f040 80d8 	bne.w	80069ce <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	3b02      	subs	r3, #2
 8006824:	2b09      	cmp	r3, #9
 8006826:	d836      	bhi.n	8006896 <USBD_HID_Setup+0xae>
 8006828:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <USBD_HID_Setup+0x48>)
 800682a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682e:	bf00      	nop
 8006830:	08006887 	.word	0x08006887
 8006834:	08006867 	.word	0x08006867
 8006838:	08006897 	.word	0x08006897
 800683c:	08006897 	.word	0x08006897
 8006840:	08006897 	.word	0x08006897
 8006844:	08006897 	.word	0x08006897
 8006848:	08006897 	.word	0x08006897
 800684c:	08006897 	.word	0x08006897
 8006850:	08006875 	.word	0x08006875
 8006854:	08006859 	.word	0x08006859
    {
    case HID_KEYBOARD_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	885b      	ldrh	r3, [r3, #2]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	601a      	str	r2, [r3, #0]
      break;
 8006864:	e01e      	b.n	80068a4 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 fa74 	bl	8007d5a <USBD_CtlSendData>
      break;
 8006872:	e017      	b.n	80068a4 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	885b      	ldrh	r3, [r3, #2]
 8006878:	0a1b      	lsrs	r3, r3, #8
 800687a:	b29b      	uxth	r3, r3
 800687c:	b2db      	uxtb	r3, r3
 800687e:	461a      	mov	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	605a      	str	r2, [r3, #4]
      break;
 8006884:	e00e      	b.n	80068a4 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3304      	adds	r3, #4
 800688a:	2201      	movs	r2, #1
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fa63 	bl	8007d5a <USBD_CtlSendData>
      break;
 8006894:	e006      	b.n	80068a4 <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f9ed 	bl	8007c78 <USBD_CtlError>
      ret = USBD_FAIL;
 800689e:	2303      	movs	r3, #3
 80068a0:	75fb      	strb	r3, [r7, #23]
      break;
 80068a2:	bf00      	nop
    }
    break;
 80068a4:	e09a      	b.n	80069dc <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	2b0b      	cmp	r3, #11
 80068ac:	f200 8086 	bhi.w	80069bc <USBD_HID_Setup+0x1d4>
 80068b0:	a201      	add	r2, pc, #4	@ (adr r2, 80068b8 <USBD_HID_Setup+0xd0>)
 80068b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b6:	bf00      	nop
 80068b8:	080068e9 	.word	0x080068e9
 80068bc:	080069cb 	.word	0x080069cb
 80068c0:	080069bd 	.word	0x080069bd
 80068c4:	080069bd 	.word	0x080069bd
 80068c8:	080069bd 	.word	0x080069bd
 80068cc:	080069bd 	.word	0x080069bd
 80068d0:	08006913 	.word	0x08006913
 80068d4:	080069bd 	.word	0x080069bd
 80068d8:	080069bd 	.word	0x080069bd
 80068dc:	080069bd 	.word	0x080069bd
 80068e0:	0800696b 	.word	0x0800696b
 80068e4:	08006995 	.word	0x08006995
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d107      	bne.n	8006904 <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068f4:	f107 030a 	add.w	r3, r7, #10
 80068f8:	2202      	movs	r2, #2
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 fa2c 	bl	8007d5a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006902:	e063      	b.n	80069cc <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 f9b6 	bl	8007c78 <USBD_CtlError>
        ret = USBD_FAIL;
 800690c:	2303      	movs	r3, #3
 800690e:	75fb      	strb	r3, [r7, #23]
      break;
 8006910:	e05c      	b.n	80069cc <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_KEYBOARD_REPORT_DESC)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	885b      	ldrh	r3, [r3, #2]
 8006916:	0a1b      	lsrs	r3, r3, #8
 8006918:	b29b      	uxth	r3, r3
 800691a:	2b22      	cmp	r3, #34	@ 0x22
 800691c:	d108      	bne.n	8006930 <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	88db      	ldrh	r3, [r3, #6]
 8006922:	2b3f      	cmp	r3, #63	@ 0x3f
 8006924:	bf28      	it	cs
 8006926:	233f      	movcs	r3, #63	@ 0x3f
 8006928:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_KEYBOARD_ReportDesc;
 800692a:	4b2f      	ldr	r3, [pc, #188]	@ (80069e8 <USBD_HID_Setup+0x200>)
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	e015      	b.n	800695c <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_KEYBOARD_DESCRIPTOR_TYPE)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	885b      	ldrh	r3, [r3, #2]
 8006934:	0a1b      	lsrs	r3, r3, #8
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b21      	cmp	r3, #33	@ 0x21
 800693a:	d108      	bne.n	800694e <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_KEYBOARD_Desc;
 800693c:	4b2b      	ldr	r3, [pc, #172]	@ (80069ec <USBD_HID_Setup+0x204>)
 800693e:	613b      	str	r3, [r7, #16]
        len = MIN(HID_KEYBOARD_DESC_SIZE, req->wLength);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	88db      	ldrh	r3, [r3, #6]
 8006944:	2b09      	cmp	r3, #9
 8006946:	bf28      	it	cs
 8006948:	2309      	movcs	r3, #9
 800694a:	82bb      	strh	r3, [r7, #20]
 800694c:	e006      	b.n	800695c <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f991 	bl	8007c78 <USBD_CtlError>
        ret = USBD_FAIL;
 8006956:	2303      	movs	r3, #3
 8006958:	75fb      	strb	r3, [r7, #23]
        break;
 800695a:	e037      	b.n	80069cc <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800695c:	8abb      	ldrh	r3, [r7, #20]
 800695e:	461a      	mov	r2, r3
 8006960:	6939      	ldr	r1, [r7, #16]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 f9f9 	bl	8007d5a <USBD_CtlSendData>
      break;
 8006968:	e030      	b.n	80069cc <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d107      	bne.n	8006986 <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3308      	adds	r3, #8
 800697a:	2201      	movs	r2, #1
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 f9eb 	bl	8007d5a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006984:	e022      	b.n	80069cc <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 f975 	bl	8007c78 <USBD_CtlError>
        ret = USBD_FAIL;
 800698e:	2303      	movs	r3, #3
 8006990:	75fb      	strb	r3, [r7, #23]
      break;
 8006992:	e01b      	b.n	80069cc <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b03      	cmp	r3, #3
 800699e:	d106      	bne.n	80069ae <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	885b      	ldrh	r3, [r3, #2]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	461a      	mov	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80069ac:	e00e      	b.n	80069cc <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 f961 	bl	8007c78 <USBD_CtlError>
        ret = USBD_FAIL;
 80069b6:	2303      	movs	r3, #3
 80069b8:	75fb      	strb	r3, [r7, #23]
      break;
 80069ba:	e007      	b.n	80069cc <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 f95a 	bl	8007c78 <USBD_CtlError>
      ret = USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	75fb      	strb	r3, [r7, #23]
      break;
 80069c8:	e000      	b.n	80069cc <USBD_HID_Setup+0x1e4>
      break;
 80069ca:	bf00      	nop
    }
    break;
 80069cc:	e006      	b.n	80069dc <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 f951 	bl	8007c78 <USBD_CtlError>
    ret = USBD_FAIL;
 80069d6:	2303      	movs	r3, #3
 80069d8:	75fb      	strb	r3, [r7, #23]
    break;
 80069da:	bf00      	nop
  }

  return (uint8_t)ret;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	2000023c 	.word	0x2000023c
 80069ec:	20000224 	.word	0x20000224

080069f0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2222      	movs	r2, #34	@ 0x22
 80069fc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 80069fe:	4b03      	ldr	r3, [pc, #12]	@ (8006a0c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	200001dc 	.word	0x200001dc

08006a10 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgHSDesc);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2222      	movs	r2, #34	@ 0x22
 8006a1c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgHSDesc;
 8006a1e:	4b03      	ldr	r3, [pc, #12]	@ (8006a2c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	20000200 	.word	0x20000200

08006a30 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2222      	movs	r2, #34	@ 0x22
 8006a3c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 8006a3e:	4b03      	ldr	r3, [pc, #12]	@ (8006a4c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	200001dc 	.word	0x200001dc

08006a50 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard)->state = KEYBOARD_HID_IDLE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a62:	2200      	movs	r2, #0
 8006a64:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	220a      	movs	r2, #10
 8006a80:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006a82:	4b03      	ldr	r3, [pc, #12]	@ (8006a90 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	20000230 	.word	0x20000230

08006a94 <USBD_HID_Keybaord_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_Keybaord_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006aa8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <USBD_HID_Keybaord_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e014      	b.n	8006ade <USBD_HID_Keybaord_SendReport+0x4a>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d10d      	bne.n	8006adc <USBD_HID_Keybaord_SendReport+0x48>
  {
    if (hhid->state == KEYBOARD_HID_IDLE)
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	7b1b      	ldrb	r3, [r3, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <USBD_HID_Keybaord_SendReport+0x48>
    {
      hhid->state = KEYBOARD_HID_BUSY;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	2201      	movs	r2, #1
 8006acc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_KEYBOARD_IN_EP, report, len);
 8006ace:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <USBD_HID_Keybaord_SendReport+0x54>)
 8006ad0:	7819      	ldrb	r1, [r3, #0]
 8006ad2:	88fb      	ldrh	r3, [r7, #6]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f001 fc1f 	bl	800831a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	2000019e 	.word	0x2000019e

08006aec <USBD_Update_HID_KBD_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_KBD_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	4608      	mov	r0, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	4603      	mov	r3, r0
 8006afc:	70fb      	strb	r3, [r7, #3]
 8006afe:	460b      	mov	r3, r1
 8006b00:	70bb      	strb	r3, [r7, #2]
 8006b02:	4613      	mov	r3, r2
 8006b04:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	330b      	adds	r3, #11
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3311      	adds	r3, #17
 8006b12:	787a      	ldrb	r2, [r7, #1]
 8006b14:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	331d      	adds	r3, #29
 8006b1a:	78ba      	ldrb	r2, [r7, #2]
 8006b1c:	701a      	strb	r2, [r3, #0]

  HID_KEYBOARD_IN_EP = in_ep;
 8006b1e:	4a07      	ldr	r2, [pc, #28]	@ (8006b3c <USBD_Update_HID_KBD_DESC+0x50>)
 8006b20:	78bb      	ldrb	r3, [r7, #2]
 8006b22:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_ITF_NBR = itf_no;
 8006b24:	4a06      	ldr	r2, [pc, #24]	@ (8006b40 <USBD_Update_HID_KBD_DESC+0x54>)
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_STR_DESC_IDX = str_idx;
 8006b2a:	4a06      	ldr	r2, [pc, #24]	@ (8006b44 <USBD_Update_HID_KBD_DESC+0x58>)
 8006b2c:	787b      	ldrb	r3, [r7, #1]
 8006b2e:	7013      	strb	r3, [r2, #0]
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	2000019e 	.word	0x2000019e
 8006b40:	200010c0 	.word	0x200010c0
 8006b44:	200010c1 	.word	0x200010c1

08006b48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e01b      	b.n	8006b98 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	79fa      	ldrb	r2, [r7, #7]
 8006b8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 fa7d 	bl	800808c <USBD_LL_Init>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e02d      	b.n	8006c14 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7c1b      	ldrb	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d112      	bne.n	8006bee <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01e      	beq.n	8006c12 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bdc:	f107 020e 	add.w	r2, r7, #14
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	4602      	mov	r2, r0
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 8006bec:	e011      	b.n	8006c12 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c02:	f107 020e 	add.w	r2, r7, #14
 8006c06:	4610      	mov	r0, r2
 8006c08:	4798      	blx	r3
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 fa8f 	bl	8008148 <USBD_LL_Start>
 8006c2a:	4603      	mov	r3, r0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c56:	2303      	movs	r3, #3
 8006c58:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d009      	beq.n	8006c78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	78fa      	ldrb	r2, [r7, #3]
 8006c6e:	4611      	mov	r1, r2
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	78fa      	ldrb	r2, [r7, #3]
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	4798      	blx	r3
  }

  return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 ff9d 	bl	8007c04 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006cd8:	461a      	mov	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d01a      	beq.n	8006d24 <USBD_LL_SetupStage+0x72>
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d822      	bhi.n	8006d38 <USBD_LL_SetupStage+0x86>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <USBD_LL_SetupStage+0x4a>
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d00a      	beq.n	8006d10 <USBD_LL_SetupStage+0x5e>
 8006cfa:	e01d      	b.n	8006d38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fa5d 	bl	80071c4 <USBD_StdDevReq>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d0e:	e020      	b.n	8006d52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fac1 	bl	80072a0 <USBD_StdItfReq>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]
      break;
 8006d22:	e016      	b.n	8006d52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fb00 	bl	8007332 <USBD_StdEPReq>
 8006d32:	4603      	mov	r3, r0
 8006d34:	73fb      	strb	r3, [r7, #15]
      break;
 8006d36:	e00c      	b.n	8006d52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d3e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fa5e 	bl	8008208 <USBD_LL_StallEP>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d50:	bf00      	nop
  }

  return ret;
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	460b      	mov	r3, r1
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d138      	bne.n	8006de2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006d76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d14a      	bne.n	8006e18 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d913      	bls.n	8006db6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	1ad2      	subs	r2, r2, r3
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	4293      	cmp	r3, r2
 8006da6:	bf28      	it	cs
 8006da8:	4613      	movcs	r3, r2
 8006daa:	461a      	mov	r2, r3
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f001 f81c 	bl	8007dec <USBD_CtlContinueRx>
 8006db4:	e030      	b.n	8006e18 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d10b      	bne.n	8006dda <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d005      	beq.n	8006dda <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f001 f817 	bl	8007e0e <USBD_CtlSendStatus>
 8006de0:	e01a      	b.n	8006e18 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d114      	bne.n	8006e18 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00e      	beq.n	8006e18 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	7afa      	ldrb	r2, [r7, #11]
 8006e04:	4611      	mov	r1, r2
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	4798      	blx	r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	e000      	b.n	8006e1a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d16b      	bne.n	8006f0e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3314      	adds	r3, #20
 8006e3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d156      	bne.n	8006ef4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d914      	bls.n	8006e7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	1ad2      	subs	r2, r2, r3
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 ff91 	bl	8007d90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2200      	movs	r2, #0
 8006e72:	2100      	movs	r1, #0
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f001 fa71 	bl	800835c <USBD_LL_PrepareReceive>
 8006e7a:	e03b      	b.n	8006ef4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d11c      	bne.n	8006ec2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d316      	bcc.n	8006ec2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d20f      	bcs.n	8006ec2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 ff72 	bl	8007d90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2100      	movs	r1, #0
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f001 fa4e 	bl	800835c <USBD_LL_PrepareReceive>
 8006ec0:	e018      	b.n	8006ef4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d10b      	bne.n	8006ee6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ee6:	2180      	movs	r1, #128	@ 0x80
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f001 f98d 	bl	8008208 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 ffa0 	bl	8007e34 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d122      	bne.n	8006f44 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7ff fe98 	bl	8006c34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006f0c:	e01a      	b.n	8006f44 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d114      	bne.n	8006f44 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00e      	beq.n	8006f44 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	7afa      	ldrb	r2, [r7, #11]
 8006f30:	4611      	mov	r1, r2
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	4798      	blx	r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	e000      	b.n	8006f46 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e02a      	b.n	8006fd8 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d009      	beq.n	8006fa2 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6852      	ldr	r2, [r2, #4]
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fa2:	2340      	movs	r3, #64	@ 0x40
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 f8e8 	bl	800817e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2240      	movs	r2, #64	@ 0x40
 8006fba:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fbe:	2340      	movs	r3, #64	@ 0x40
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2180      	movs	r1, #128	@ 0x80
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 f8da 	bl	800817e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2240      	movs	r2, #64	@ 0x40
 8006fd4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	78fa      	ldrb	r2, [r7, #3]
 8006ff0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800700e:	b2da      	uxtb	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2204      	movs	r2, #4
 800701a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b04      	cmp	r3, #4
 800703e:	d106      	bne.n	800704e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007046:	b2da      	uxtb	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800706e:	2303      	movs	r3, #3
 8007070:	e012      	b.n	8007098 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b03      	cmp	r3, #3
 800707c:	d10b      	bne.n	8007096 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e014      	b.n	80070e4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d10d      	bne.n	80070e2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	78fa      	ldrb	r2, [r7, #3]
 80070dc:	4611      	mov	r1, r2
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007102:	2303      	movs	r3, #3
 8007104:	e014      	b.n	8007130 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b03      	cmp	r3, #3
 8007110:	d10d      	bne.n	800712e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	4611      	mov	r1, r2
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007164:	2b00      	cmp	r3, #0
 8007166:	d009      	beq.n	800717c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6852      	ldr	r2, [r2, #4]
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	4611      	mov	r1, r2
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4798      	blx	r3
  }

  return USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007186:	b480      	push	{r7}
 8007188:	b087      	sub	sp, #28
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	3301      	adds	r3, #1
 800719c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071a4:	8a3b      	ldrh	r3, [r7, #16]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	b21a      	sxth	r2, r3
 80071aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	b21b      	sxth	r3, r3
 80071b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071b4:	89fb      	ldrh	r3, [r7, #14]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071da:	2b40      	cmp	r3, #64	@ 0x40
 80071dc:	d005      	beq.n	80071ea <USBD_StdDevReq+0x26>
 80071de:	2b40      	cmp	r3, #64	@ 0x40
 80071e0:	d853      	bhi.n	800728a <USBD_StdDevReq+0xc6>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <USBD_StdDevReq+0x3a>
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d14f      	bne.n	800728a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]
      break;
 80071fc:	e04a      	b.n	8007294 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	785b      	ldrb	r3, [r3, #1]
 8007202:	2b09      	cmp	r3, #9
 8007204:	d83b      	bhi.n	800727e <USBD_StdDevReq+0xba>
 8007206:	a201      	add	r2, pc, #4	@ (adr r2, 800720c <USBD_StdDevReq+0x48>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007261 	.word	0x08007261
 8007210:	08007275 	.word	0x08007275
 8007214:	0800727f 	.word	0x0800727f
 8007218:	0800726b 	.word	0x0800726b
 800721c:	0800727f 	.word	0x0800727f
 8007220:	0800723f 	.word	0x0800723f
 8007224:	08007235 	.word	0x08007235
 8007228:	0800727f 	.word	0x0800727f
 800722c:	08007257 	.word	0x08007257
 8007230:	08007249 	.word	0x08007249
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9de 	bl	80075f8 <USBD_GetDescriptor>
          break;
 800723c:	e024      	b.n	8007288 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fb55 	bl	80078f0 <USBD_SetAddress>
          break;
 8007246:	e01f      	b.n	8007288 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fb94 	bl	8007978 <USBD_SetConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]
          break;
 8007254:	e018      	b.n	8007288 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fc33 	bl	8007ac4 <USBD_GetConfig>
          break;
 800725e:	e013      	b.n	8007288 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fc64 	bl	8007b30 <USBD_GetStatus>
          break;
 8007268:	e00e      	b.n	8007288 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fc93 	bl	8007b98 <USBD_SetFeature>
          break;
 8007272:	e009      	b.n	8007288 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fca2 	bl	8007bc0 <USBD_ClrFeature>
          break;
 800727c:	e004      	b.n	8007288 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fcf9 	bl	8007c78 <USBD_CtlError>
          break;
 8007286:	bf00      	nop
      }
      break;
 8007288:	e004      	b.n	8007294 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fcf3 	bl	8007c78 <USBD_CtlError>
      break;
 8007292:	bf00      	nop
  }

  return ret;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop

080072a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072b6:	2b40      	cmp	r3, #64	@ 0x40
 80072b8:	d005      	beq.n	80072c6 <USBD_StdItfReq+0x26>
 80072ba:	2b40      	cmp	r3, #64	@ 0x40
 80072bc:	d82f      	bhi.n	800731e <USBD_StdItfReq+0x7e>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <USBD_StdItfReq+0x26>
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d12b      	bne.n	800731e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d81d      	bhi.n	8007310 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	889b      	ldrh	r3, [r3, #4]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b0f      	cmp	r3, #15
 80072dc:	d813      	bhi.n	8007306 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	4798      	blx	r3
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	88db      	ldrh	r3, [r3, #6]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d110      	bne.n	800731a <USBD_StdItfReq+0x7a>
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10d      	bne.n	800731a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fd85 	bl	8007e0e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007304:	e009      	b.n	800731a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fcb5 	bl	8007c78 <USBD_CtlError>
          break;
 800730e:	e004      	b.n	800731a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fcb0 	bl	8007c78 <USBD_CtlError>
          break;
 8007318:	e000      	b.n	800731c <USBD_StdItfReq+0x7c>
          break;
 800731a:	bf00      	nop
      }
      break;
 800731c:	e004      	b.n	8007328 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fca9 	bl	8007c78 <USBD_CtlError>
      break;
 8007326:	bf00      	nop
  }

  return ret;
 8007328:	7bfb      	ldrb	r3, [r7, #15]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	889b      	ldrh	r3, [r3, #4]
 8007344:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800734e:	2b40      	cmp	r3, #64	@ 0x40
 8007350:	d007      	beq.n	8007362 <USBD_StdEPReq+0x30>
 8007352:	2b40      	cmp	r3, #64	@ 0x40
 8007354:	f200 8145 	bhi.w	80075e2 <USBD_StdEPReq+0x2b0>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00c      	beq.n	8007376 <USBD_StdEPReq+0x44>
 800735c:	2b20      	cmp	r3, #32
 800735e:	f040 8140 	bne.w	80075e2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	4798      	blx	r3
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
      break;
 8007374:	e13a      	b.n	80075ec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2b03      	cmp	r3, #3
 800737c:	d007      	beq.n	800738e <USBD_StdEPReq+0x5c>
 800737e:	2b03      	cmp	r3, #3
 8007380:	f300 8129 	bgt.w	80075d6 <USBD_StdEPReq+0x2a4>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d07f      	beq.n	8007488 <USBD_StdEPReq+0x156>
 8007388:	2b01      	cmp	r3, #1
 800738a:	d03c      	beq.n	8007406 <USBD_StdEPReq+0xd4>
 800738c:	e123      	b.n	80075d6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d002      	beq.n	80073a0 <USBD_StdEPReq+0x6e>
 800739a:	2b03      	cmp	r3, #3
 800739c:	d016      	beq.n	80073cc <USBD_StdEPReq+0x9a>
 800739e:	e02c      	b.n	80073fa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00d      	beq.n	80073c2 <USBD_StdEPReq+0x90>
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b80      	cmp	r3, #128	@ 0x80
 80073aa:	d00a      	beq.n	80073c2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 ff29 	bl	8008208 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073b6:	2180      	movs	r1, #128	@ 0x80
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 ff25 	bl	8008208 <USBD_LL_StallEP>
 80073be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073c0:	e020      	b.n	8007404 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc57 	bl	8007c78 <USBD_CtlError>
              break;
 80073ca:	e01b      	b.n	8007404 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	885b      	ldrh	r3, [r3, #2]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10e      	bne.n	80073f2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <USBD_StdEPReq+0xc0>
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	2b80      	cmp	r3, #128	@ 0x80
 80073de:	d008      	beq.n	80073f2 <USBD_StdEPReq+0xc0>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	88db      	ldrh	r3, [r3, #6]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 ff0b 	bl	8008208 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fd0b 	bl	8007e0e <USBD_CtlSendStatus>

              break;
 80073f8:	e004      	b.n	8007404 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fc3b 	bl	8007c78 <USBD_CtlError>
              break;
 8007402:	bf00      	nop
          }
          break;
 8007404:	e0ec      	b.n	80075e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d002      	beq.n	8007418 <USBD_StdEPReq+0xe6>
 8007412:	2b03      	cmp	r3, #3
 8007414:	d016      	beq.n	8007444 <USBD_StdEPReq+0x112>
 8007416:	e030      	b.n	800747a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00d      	beq.n	800743a <USBD_StdEPReq+0x108>
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b80      	cmp	r3, #128	@ 0x80
 8007422:	d00a      	beq.n	800743a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 feed 	bl	8008208 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800742e:	2180      	movs	r1, #128	@ 0x80
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fee9 	bl	8008208 <USBD_LL_StallEP>
 8007436:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007438:	e025      	b.n	8007486 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fc1b 	bl	8007c78 <USBD_CtlError>
              break;
 8007442:	e020      	b.n	8007486 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	885b      	ldrh	r3, [r3, #2]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d11b      	bne.n	8007484 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fef3 	bl	8008246 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fcd4 	bl	8007e0e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4798      	blx	r3
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007478:	e004      	b.n	8007484 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fbfb 	bl	8007c78 <USBD_CtlError>
              break;
 8007482:	e000      	b.n	8007486 <USBD_StdEPReq+0x154>
              break;
 8007484:	bf00      	nop
          }
          break;
 8007486:	e0ab      	b.n	80075e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d002      	beq.n	800749a <USBD_StdEPReq+0x168>
 8007494:	2b03      	cmp	r3, #3
 8007496:	d032      	beq.n	80074fe <USBD_StdEPReq+0x1cc>
 8007498:	e097      	b.n	80075ca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d007      	beq.n	80074b0 <USBD_StdEPReq+0x17e>
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	2b80      	cmp	r3, #128	@ 0x80
 80074a4:	d004      	beq.n	80074b0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fbe5 	bl	8007c78 <USBD_CtlError>
                break;
 80074ae:	e091      	b.n	80075d4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	da0b      	bge.n	80074d0 <USBD_StdEPReq+0x19e>
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	3310      	adds	r3, #16
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	4413      	add	r3, r2
 80074cc:	3304      	adds	r3, #4
 80074ce:	e00b      	b.n	80074e8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4413      	add	r3, r2
 80074e6:	3304      	adds	r3, #4
 80074e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2200      	movs	r2, #0
 80074ee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2202      	movs	r2, #2
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fc2f 	bl	8007d5a <USBD_CtlSendData>
              break;
 80074fc:	e06a      	b.n	80075d4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007502:	2b00      	cmp	r3, #0
 8007504:	da11      	bge.n	800752a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007506:	7bbb      	ldrb	r3, [r7, #14]
 8007508:	f003 020f 	and.w	r2, r3, #15
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	440b      	add	r3, r1
 8007518:	3324      	adds	r3, #36	@ 0x24
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d117      	bne.n	8007550 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fba8 	bl	8007c78 <USBD_CtlError>
                  break;
 8007528:	e054      	b.n	80075d4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	f003 020f 	and.w	r2, r3, #15
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	4613      	mov	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fb95 	bl	8007c78 <USBD_CtlError>
                  break;
 800754e:	e041      	b.n	80075d4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007554:	2b00      	cmp	r3, #0
 8007556:	da0b      	bge.n	8007570 <USBD_StdEPReq+0x23e>
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	3310      	adds	r3, #16
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4413      	add	r3, r2
 800756c:	3304      	adds	r3, #4
 800756e:	e00b      	b.n	8007588 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	4413      	add	r3, r2
 8007586:	3304      	adds	r3, #4
 8007588:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <USBD_StdEPReq+0x264>
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2b80      	cmp	r3, #128	@ 0x80
 8007594:	d103      	bne.n	800759e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e00e      	b.n	80075bc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fe6e 	bl	8008284 <USBD_LL_IsStallEP>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2201      	movs	r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e002      	b.n	80075bc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2202      	movs	r2, #2
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fbc9 	bl	8007d5a <USBD_CtlSendData>
              break;
 80075c8:	e004      	b.n	80075d4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fb53 	bl	8007c78 <USBD_CtlError>
              break;
 80075d2:	bf00      	nop
          }
          break;
 80075d4:	e004      	b.n	80075e0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fb4d 	bl	8007c78 <USBD_CtlError>
          break;
 80075de:	bf00      	nop
      }
      break;
 80075e0:	e004      	b.n	80075ec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fb47 	bl	8007c78 <USBD_CtlError>
      break;
 80075ea:	bf00      	nop
  }

  return ret;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	885b      	ldrh	r3, [r3, #2]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	b29b      	uxth	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	2b06      	cmp	r3, #6
 800761a:	f200 813b 	bhi.w	8007894 <USBD_GetDescriptor+0x29c>
 800761e:	a201      	add	r2, pc, #4	@ (adr r2, 8007624 <USBD_GetDescriptor+0x2c>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	08007641 	.word	0x08007641
 8007628:	08007659 	.word	0x08007659
 800762c:	08007699 	.word	0x08007699
 8007630:	08007895 	.word	0x08007895
 8007634:	08007895 	.word	0x08007895
 8007638:	08007835 	.word	0x08007835
 800763c:	08007861 	.word	0x08007861
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	7c12      	ldrb	r2, [r2, #16]
 800764c:	f107 0108 	add.w	r1, r7, #8
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
 8007654:	60f8      	str	r0, [r7, #12]
      break;
 8007656:	e125      	b.n	80078a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	7c1b      	ldrb	r3, [r3, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10d      	bne.n	800767c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	f107 0208 	add.w	r2, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	2202      	movs	r2, #2
 8007678:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800767a:	e113      	b.n	80078a4 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007684:	f107 0208 	add.w	r2, r7, #8
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3301      	adds	r3, #1
 8007692:	2202      	movs	r2, #2
 8007694:	701a      	strb	r2, [r3, #0]
      break;
 8007696:	e105      	b.n	80078a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	885b      	ldrh	r3, [r3, #2]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b05      	cmp	r3, #5
 80076a0:	f200 80ac 	bhi.w	80077fc <USBD_GetDescriptor+0x204>
 80076a4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <USBD_GetDescriptor+0xb4>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076c5 	.word	0x080076c5
 80076b0:	080076f9 	.word	0x080076f9
 80076b4:	0800772d 	.word	0x0800772d
 80076b8:	08007761 	.word	0x08007761
 80076bc:	08007795 	.word	0x08007795
 80076c0:	080077c9 	.word	0x080077c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e6:	e0a4      	b.n	8007832 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fac4 	bl	8007c78 <USBD_CtlError>
            err++;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	3301      	adds	r3, #1
 80076f4:	72fb      	strb	r3, [r7, #11]
          break;
 80076f6:	e09c      	b.n	8007832 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	7c12      	ldrb	r2, [r2, #16]
 8007710:	f107 0108 	add.w	r1, r7, #8
 8007714:	4610      	mov	r0, r2
 8007716:	4798      	blx	r3
 8007718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800771a:	e08a      	b.n	8007832 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 faaa 	bl	8007c78 <USBD_CtlError>
            err++;
 8007724:	7afb      	ldrb	r3, [r7, #11]
 8007726:	3301      	adds	r3, #1
 8007728:	72fb      	strb	r3, [r7, #11]
          break;
 800772a:	e082      	b.n	8007832 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	7c12      	ldrb	r2, [r2, #16]
 8007744:	f107 0108 	add.w	r1, r7, #8
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
 800774c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800774e:	e070      	b.n	8007832 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa90 	bl	8007c78 <USBD_CtlError>
            err++;
 8007758:	7afb      	ldrb	r3, [r7, #11]
 800775a:	3301      	adds	r3, #1
 800775c:	72fb      	strb	r3, [r7, #11]
          break;
 800775e:	e068      	b.n	8007832 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	7c12      	ldrb	r2, [r2, #16]
 8007778:	f107 0108 	add.w	r1, r7, #8
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
 8007780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007782:	e056      	b.n	8007832 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fa76 	bl	8007c78 <USBD_CtlError>
            err++;
 800778c:	7afb      	ldrb	r3, [r7, #11]
 800778e:	3301      	adds	r3, #1
 8007790:	72fb      	strb	r3, [r7, #11]
          break;
 8007792:	e04e      	b.n	8007832 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	7c12      	ldrb	r2, [r2, #16]
 80077ac:	f107 0108 	add.w	r1, r7, #8
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3
 80077b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b6:	e03c      	b.n	8007832 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa5c 	bl	8007c78 <USBD_CtlError>
            err++;
 80077c0:	7afb      	ldrb	r3, [r7, #11]
 80077c2:	3301      	adds	r3, #1
 80077c4:	72fb      	strb	r3, [r7, #11]
          break;
 80077c6:	e034      	b.n	8007832 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	7c12      	ldrb	r2, [r2, #16]
 80077e0:	f107 0108 	add.w	r1, r7, #8
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
 80077e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ea:	e022      	b.n	8007832 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa42 	bl	8007c78 <USBD_CtlError>
            err++;
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	3301      	adds	r3, #1
 80077f8:	72fb      	strb	r3, [r7, #11]
          break;
 80077fa:	e01a      	b.n	8007832 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00c      	beq.n	8007822 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800780e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	8852      	ldrh	r2, [r2, #2]
 8007814:	b2d1      	uxtb	r1, r2
 8007816:	f107 0208 	add.w	r2, r7, #8
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
 800781e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8007820:	e006      	b.n	8007830 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fa27 	bl	8007c78 <USBD_CtlError>
            err++;
 800782a:	7afb      	ldrb	r3, [r7, #11]
 800782c:	3301      	adds	r3, #1
 800782e:	72fb      	strb	r3, [r7, #11]
          break;
 8007830:	bf00      	nop
      }
      break;
 8007832:	e037      	b.n	80078a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7c1b      	ldrb	r3, [r3, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d109      	bne.n	8007850 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007844:	f107 0208 	add.w	r2, r7, #8
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
 800784c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800784e:	e029      	b.n	80078a4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fa10 	bl	8007c78 <USBD_CtlError>
        err++;
 8007858:	7afb      	ldrb	r3, [r7, #11]
 800785a:	3301      	adds	r3, #1
 800785c:	72fb      	strb	r3, [r7, #11]
      break;
 800785e:	e021      	b.n	80078a4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7c1b      	ldrb	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10d      	bne.n	8007884 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800786e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007870:	f107 0208 	add.w	r2, r7, #8
 8007874:	4610      	mov	r0, r2
 8007876:	4798      	blx	r3
 8007878:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3301      	adds	r3, #1
 800787e:	2207      	movs	r2, #7
 8007880:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007882:	e00f      	b.n	80078a4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f9f6 	bl	8007c78 <USBD_CtlError>
        err++;
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	3301      	adds	r3, #1
 8007890:	72fb      	strb	r3, [r7, #11]
      break;
 8007892:	e007      	b.n	80078a4 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f9ee 	bl	8007c78 <USBD_CtlError>
      err++;
 800789c:	7afb      	ldrb	r3, [r7, #11]
 800789e:	3301      	adds	r3, #1
 80078a0:	72fb      	strb	r3, [r7, #11]
      break;
 80078a2:	bf00      	nop
  }

  if (err != 0U)
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d11e      	bne.n	80078e8 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	88db      	ldrh	r3, [r3, #6]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d016      	beq.n	80078e0 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 80078b2:	893b      	ldrh	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00e      	beq.n	80078d6 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	88da      	ldrh	r2, [r3, #6]
 80078bc:	893b      	ldrh	r3, [r7, #8]
 80078be:	4293      	cmp	r3, r2
 80078c0:	bf28      	it	cs
 80078c2:	4613      	movcs	r3, r2
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078c8:	893b      	ldrh	r3, [r7, #8]
 80078ca:	461a      	mov	r2, r3
 80078cc:	68f9      	ldr	r1, [r7, #12]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa43 	bl	8007d5a <USBD_CtlSendData>
 80078d4:	e009      	b.n	80078ea <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9cd 	bl	8007c78 <USBD_CtlError>
 80078de:	e004      	b.n	80078ea <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fa94 	bl	8007e0e <USBD_CtlSendStatus>
 80078e6:	e000      	b.n	80078ea <USBD_GetDescriptor+0x2f2>
    return;
 80078e8:	bf00      	nop
  }
}
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	889b      	ldrh	r3, [r3, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d131      	bne.n	8007966 <USBD_SetAddress+0x76>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	88db      	ldrh	r3, [r3, #6]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d12d      	bne.n	8007966 <USBD_SetAddress+0x76>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	885b      	ldrh	r3, [r3, #2]
 800790e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007910:	d829      	bhi.n	8007966 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	885b      	ldrh	r3, [r3, #2]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800791c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b03      	cmp	r3, #3
 8007928:	d104      	bne.n	8007934 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f9a3 	bl	8007c78 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007932:	e01d      	b.n	8007970 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7bfa      	ldrb	r2, [r7, #15]
 8007938:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fccb 	bl	80082dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fa61 	bl	8007e0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d004      	beq.n	800795c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2202      	movs	r2, #2
 8007956:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795a:	e009      	b.n	8007970 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007964:	e004      	b.n	8007970 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f985 	bl	8007c78 <USBD_CtlError>
  }
}
 800796e:	bf00      	nop
 8007970:	bf00      	nop
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	885b      	ldrh	r3, [r3, #2]
 800798a:	b2da      	uxtb	r2, r3
 800798c:	4b4c      	ldr	r3, [pc, #304]	@ (8007ac0 <USBD_SetConfig+0x148>)
 800798e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007990:	4b4b      	ldr	r3, [pc, #300]	@ (8007ac0 <USBD_SetConfig+0x148>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d905      	bls.n	80079a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f96c 	bl	8007c78 <USBD_CtlError>
    return USBD_FAIL;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e088      	b.n	8007ab6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d002      	beq.n	80079b6 <USBD_SetConfig+0x3e>
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d025      	beq.n	8007a00 <USBD_SetConfig+0x88>
 80079b4:	e071      	b.n	8007a9a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079b6:	4b42      	ldr	r3, [pc, #264]	@ (8007ac0 <USBD_SetConfig+0x148>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01c      	beq.n	80079f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80079be:	4b40      	ldr	r3, [pc, #256]	@ (8007ac0 <USBD_SetConfig+0x148>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079c8:	4b3d      	ldr	r3, [pc, #244]	@ (8007ac0 <USBD_SetConfig+0x148>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff f93b 	bl	8006c4a <USBD_SetClassConfig>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f949 	bl	8007c78 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079e6:	e065      	b.n	8007ab4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa10 	bl	8007e0e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2203      	movs	r2, #3
 80079f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079f6:	e05d      	b.n	8007ab4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fa08 	bl	8007e0e <USBD_CtlSendStatus>
      break;
 80079fe:	e059      	b.n	8007ab4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a00:	4b2f      	ldr	r3, [pc, #188]	@ (8007ac0 <USBD_SetConfig+0x148>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d112      	bne.n	8007a2e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007a10:	4b2b      	ldr	r3, [pc, #172]	@ (8007ac0 <USBD_SetConfig+0x148>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a1a:	4b29      	ldr	r3, [pc, #164]	@ (8007ac0 <USBD_SetConfig+0x148>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff f92e 	bl	8006c82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f9f1 	bl	8007e0e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a2c:	e042      	b.n	8007ab4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007a2e:	4b24      	ldr	r3, [pc, #144]	@ (8007ac0 <USBD_SetConfig+0x148>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d02a      	beq.n	8007a92 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff f91c 	bl	8006c82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac0 <USBD_SetConfig+0x148>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a54:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac0 <USBD_SetConfig+0x148>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff f8f5 	bl	8006c4a <USBD_SetClassConfig>
 8007a60:	4603      	mov	r3, r0
 8007a62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00f      	beq.n	8007a8a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f903 	bl	8007c78 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff f901 	bl	8006c82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a88:	e014      	b.n	8007ab4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f9bf 	bl	8007e0e <USBD_CtlSendStatus>
      break;
 8007a90:	e010      	b.n	8007ab4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9bb 	bl	8007e0e <USBD_CtlSendStatus>
      break;
 8007a98:	e00c      	b.n	8007ab4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f8eb 	bl	8007c78 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aa2:	4b07      	ldr	r3, [pc, #28]	@ (8007ac0 <USBD_SetConfig+0x148>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff f8ea 	bl	8006c82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab2:	bf00      	nop
  }

  return ret;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	200010d4 	.word	0x200010d4

08007ac4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	88db      	ldrh	r3, [r3, #6]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d004      	beq.n	8007ae0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f8cd 	bl	8007c78 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ade:	e023      	b.n	8007b28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	dc02      	bgt.n	8007af2 <USBD_GetConfig+0x2e>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dc03      	bgt.n	8007af8 <USBD_GetConfig+0x34>
 8007af0:	e015      	b.n	8007b1e <USBD_GetConfig+0x5a>
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d00b      	beq.n	8007b0e <USBD_GetConfig+0x4a>
 8007af6:	e012      	b.n	8007b1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3308      	adds	r3, #8
 8007b02:	2201      	movs	r2, #1
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f927 	bl	8007d5a <USBD_CtlSendData>
        break;
 8007b0c:	e00c      	b.n	8007b28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	3304      	adds	r3, #4
 8007b12:	2201      	movs	r2, #1
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f91f 	bl	8007d5a <USBD_CtlSendData>
        break;
 8007b1c:	e004      	b.n	8007b28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f8a9 	bl	8007c78 <USBD_CtlError>
        break;
 8007b26:	bf00      	nop
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d81e      	bhi.n	8007b86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	88db      	ldrh	r3, [r3, #6]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d004      	beq.n	8007b5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f890 	bl	8007c78 <USBD_CtlError>
        break;
 8007b58:	e01a      	b.n	8007b90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f043 0202 	orr.w	r2, r3, #2
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f8eb 	bl	8007d5a <USBD_CtlSendData>
      break;
 8007b84:	e004      	b.n	8007b90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f875 	bl	8007c78 <USBD_CtlError>
      break;
 8007b8e:	bf00      	nop
  }
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	885b      	ldrh	r3, [r3, #2]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d106      	bne.n	8007bb8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f92b 	bl	8007e0e <USBD_CtlSendStatus>
  }
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d80b      	bhi.n	8007bf0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	885b      	ldrh	r3, [r3, #2]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d10c      	bne.n	8007bfa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f910 	bl	8007e0e <USBD_CtlSendStatus>
      }
      break;
 8007bee:	e004      	b.n	8007bfa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f840 	bl	8007c78 <USBD_CtlError>
      break;
 8007bf8:	e000      	b.n	8007bfc <USBD_ClrFeature+0x3c>
      break;
 8007bfa:	bf00      	nop
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	781a      	ldrb	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	781a      	ldrb	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7ff faa9 	bl	8007186 <SWAPBYTE>
 8007c34:	4603      	mov	r3, r0
 8007c36:	461a      	mov	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff fa9c 	bl	8007186 <SWAPBYTE>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	461a      	mov	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff fa8f 	bl	8007186 <SWAPBYTE>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	80da      	strh	r2, [r3, #6]
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c82:	2180      	movs	r1, #128	@ 0x80
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fabf 	bl	8008208 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fabb 	bl	8008208 <USBD_LL_StallEP>
}
 8007c92:	bf00      	nop
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b086      	sub	sp, #24
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d036      	beq.n	8007d1e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007cb4:	6938      	ldr	r0, [r7, #16]
 8007cb6:	f000 f836 	bl	8007d26 <USBD_GetLen>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	4413      	add	r3, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	7812      	ldrb	r2, [r2, #0]
 8007cd2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	4413      	add	r3, r2
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007cea:	e013      	b.n	8007d14 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	7812      	ldrb	r2, [r2, #0]
 8007cf6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	613b      	str	r3, [r7, #16]
    idx++;
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	3301      	adds	r3, #1
 8007d02:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	4413      	add	r3, r2
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	3301      	adds	r3, #1
 8007d12:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e7      	bne.n	8007cec <USBD_GetString+0x52>
 8007d1c:	e000      	b.n	8007d20 <USBD_GetString+0x86>
    return;
 8007d1e:	bf00      	nop
  }
}
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d36:	e005      	b.n	8007d44 <USBD_GetLen+0x1e>
  {
    len++;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	3301      	adds	r3, #1
 8007d42:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f5      	bne.n	8007d38 <USBD_GetLen+0x12>
  }

  return len;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	2100      	movs	r1, #0
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 faca 	bl	800831a <USBD_LL_Transmit>

  return USBD_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	2100      	movs	r1, #0
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 fab9 	bl	800831a <USBD_LL_Transmit>

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	2100      	movs	r1, #0
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fabd 	bl	800835c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 faac 	bl	800835c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2204      	movs	r2, #4
 8007e1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2200      	movs	r2, #0
 8007e22:	2100      	movs	r1, #0
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fa78 	bl	800831a <USBD_LL_Transmit>

  return USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2205      	movs	r2, #5
 8007e40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e44:	2300      	movs	r3, #0
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa86 	bl	800835c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	70fb      	strb	r3, [r7, #3]
 8007e66:	4613      	mov	r3, r2
 8007e68:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 8007e6a:	883b      	ldrh	r3, [r7, #0]
 8007e6c:	089b      	lsrs	r3, r3, #2
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7fb fa19 	bl	80032ac <HAL_PCDEx_SetTxFiFo>
 8007e7a:	4603      	mov	r3, r0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 8007e90:	887b      	ldrh	r3, [r7, #2]
 8007e92:	089b      	lsrs	r3, r3, #2
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7fb fa4e 	bl	800333a <HAL_PCDEx_SetRxFiFo>
 8007e9e:	4603      	mov	r3, r0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	f7fe fef7 	bl	8006cb2 <USBD_LL_SetupStage>
}
 8007ec4:	bf00      	nop
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007ede:	78fa      	ldrb	r2, [r7, #3]
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	440b      	add	r3, r1
 8007eec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	78fb      	ldrb	r3, [r7, #3]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	f7fe ff31 	bl	8006d5c <USBD_LL_DataOutStage>
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007f14:	78fa      	ldrb	r2, [r7, #3]
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	440b      	add	r3, r1
 8007f22:	3320      	adds	r3, #32
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	f7fe ff7a 	bl	8006e22 <USBD_LL_DataInStage>
}
 8007f2e:	bf00      	nop
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff f889 	bl	800705c <USBD_LL_SOF>
}
 8007f4a:	bf00      	nop
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	79db      	ldrb	r3, [r3, #7]
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d102      	bne.n	8007f6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 8007f66:	2301      	movs	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]
 8007f6a:	e008      	b.n	8007f7e <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	79db      	ldrb	r3, [r3, #7]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
 8007f78:	e001      	b.n	8007f7e <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 8007f7a:	f7f9 faef 	bl	800155c <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f84:	7bfa      	ldrb	r2, [r7, #15]
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7ff f829 	bl	8006fe0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fe ffda 	bl	8006f4e <USBD_LL_Reset>
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff f824 	bl	8007000 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007fca:	f043 0301 	orr.w	r3, r3, #1
 8007fce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7adb      	ldrb	r3, [r3, #11]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fd8:	4b04      	ldr	r3, [pc, #16]	@ (8007fec <HAL_PCD_SuspendCallback+0x48>)
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	4a03      	ldr	r2, [pc, #12]	@ (8007fec <HAL_PCD_SuspendCallback+0x48>)
 8007fde:	f043 0306 	orr.w	r3, r3, #6
 8007fe2:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	e000ed00 	.word	0xe000ed00

08007ff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff f814 	bl	800702c <USBD_LL_Resume>
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	4611      	mov	r1, r2
 8008022:	4618      	mov	r0, r3
 8008024:	f7ff f862 	bl	80070ec <USBD_LL_IsoOUTIncomplete>
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008042:	78fa      	ldrb	r2, [r7, #3]
 8008044:	4611      	mov	r1, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff f82a 	bl	80070a0 <USBD_LL_IsoINIncomplete>
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008062:	4618      	mov	r0, r3
 8008064:	f7ff f868 	bl	8007138 <USBD_LL_DevConnected>
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff f865 	bl	800714e <USBD_LL_DevDisconnected>
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8008094:	4b27      	ldr	r3, [pc, #156]	@ (8008134 <USBD_LL_Init+0xa8>)
 8008096:	4a28      	ldr	r2, [pc, #160]	@ (8008138 <USBD_LL_Init+0xac>)
 8008098:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d143      	bne.n	800812a <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 80080a2:	4b24      	ldr	r3, [pc, #144]	@ (8008134 <USBD_LL_Init+0xa8>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 80080ac:	4b21      	ldr	r3, [pc, #132]	@ (8008134 <USBD_LL_Init+0xa8>)
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 80080b6:	4b1f      	ldr	r3, [pc, #124]	@ (8008134 <USBD_LL_Init+0xa8>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff fee0 	bl	8007e84 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 80080c4:	4b1b      	ldr	r3, [pc, #108]	@ (8008134 <USBD_LL_Init+0xa8>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2240      	movs	r2, #64	@ 0x40
 80080ca:	2100      	movs	r1, #0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fec4 	bl	8007e5a <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_MOUSE == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_MOUSE_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
 80080d2:	4b18      	ldr	r3, [pc, #96]	@ (8008134 <USBD_LL_Init+0xa8>)
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	4b19      	ldr	r3, [pc, #100]	@ (800813c <USBD_LL_Init+0xb0>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2240      	movs	r2, #64	@ 0x40
 80080e2:	4619      	mov	r1, r3
 80080e4:	f7ff feb9 	bl	8007e5a <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80080e8:	2300      	movs	r3, #0
 80080ea:	73fb      	strb	r3, [r7, #15]
 80080ec:	e01a      	b.n	8008124 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 80080ee:	4b11      	ldr	r3, [pc, #68]	@ (8008134 <USBD_LL_Init+0xa8>)
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	4a12      	ldr	r2, [pc, #72]	@ (8008140 <USBD_LL_Init+0xb4>)
 80080f6:	5cd3      	ldrb	r3, [r2, r3]
 80080f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2280      	movs	r2, #128	@ 0x80
 8008100:	4619      	mov	r1, r3
 8008102:	f7ff feaa 	bl	8007e5a <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 8008106:	4b0b      	ldr	r3, [pc, #44]	@ (8008134 <USBD_LL_Init+0xa8>)
 8008108:	6818      	ldr	r0, [r3, #0]
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	4a0d      	ldr	r2, [pc, #52]	@ (8008144 <USBD_LL_Init+0xb8>)
 800810e:	5cd3      	ldrb	r3, [r2, r3]
 8008110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2240      	movs	r2, #64	@ 0x40
 8008118:	4619      	mov	r1, r3
 800811a:	f7ff fe9e 	bl	8007e5a <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	3301      	adds	r3, #1
 8008122:	73fb      	strb	r3, [r7, #15]
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0e1      	beq.n	80080ee <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	200010d8 	.word	0x200010d8
 8008138:	200002f8 	.word	0x200002f8
 800813c:	2000019e 	.word	0x2000019e
 8008140:	20000d84 	.word	0x20000d84
 8008144:	20000d8c 	.word	0x20000d8c

08008148 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800815e:	4618      	mov	r0, r3
 8008160:	f7f9 ffc4 	bl	80020ec <HAL_PCD_Start>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f92a 	bl	80083c4 <USBD_Get_USB_Status>
 8008170:	4603      	mov	r3, r0
 8008172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008174:	7bbb      	ldrb	r3, [r7, #14]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	4608      	mov	r0, r1
 8008188:	4611      	mov	r1, r2
 800818a:	461a      	mov	r2, r3
 800818c:	4603      	mov	r3, r0
 800818e:	70fb      	strb	r3, [r7, #3]
 8008190:	460b      	mov	r3, r1
 8008192:	70bb      	strb	r3, [r7, #2]
 8008194:	4613      	mov	r3, r2
 8008196:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 80081a6:	78bb      	ldrb	r3, [r7, #2]
 80081a8:	883a      	ldrh	r2, [r7, #0]
 80081aa:	78f9      	ldrb	r1, [r7, #3]
 80081ac:	f7fa fc98 	bl	8002ae0 <HAL_PCD_EP_Open>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f904 	bl	80083c4 <USBD_Get_USB_Status>
 80081bc:	4603      	mov	r3, r0
 80081be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	4611      	mov	r1, r2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fa fce3 	bl	8002bb4 <HAL_PCD_EP_Close>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f8e5 	bl	80083c4 <USBD_Get_USB_Status>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	4611      	mov	r1, r2
 8008226:	4618      	mov	r0, r3
 8008228:	f7fa fd9b 	bl	8002d62 <HAL_PCD_EP_SetStall>
 800822c:	4603      	mov	r3, r0
 800822e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	4618      	mov	r0, r3
 8008234:	f000 f8c6 	bl	80083c4 <USBD_Get_USB_Status>
 8008238:	4603      	mov	r3, r0
 800823a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800823c:	7bbb      	ldrb	r3, [r7, #14]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8008260:	78fa      	ldrb	r2, [r7, #3]
 8008262:	4611      	mov	r1, r2
 8008264:	4618      	mov	r0, r3
 8008266:	f7fa fddf 	bl	8002e28 <HAL_PCD_EP_ClrStall>
 800826a:	4603      	mov	r3, r0
 800826c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	4618      	mov	r0, r3
 8008272:	f000 f8a7 	bl	80083c4 <USBD_Get_USB_Status>
 8008276:	4603      	mov	r3, r0
 8008278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800827a:	7bbb      	ldrb	r3, [r7, #14]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8008296:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8008298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800829c:	2b00      	cmp	r3, #0
 800829e:	da0b      	bge.n	80082b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082a6:	68f9      	ldr	r1, [r7, #12]
 80082a8:	4613      	mov	r3, r2
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	440b      	add	r3, r1
 80082b2:	3316      	adds	r3, #22
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	e00b      	b.n	80082d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082be:	68f9      	ldr	r1, [r7, #12]
 80082c0:	4613      	mov	r3, r2
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	440b      	add	r3, r1
 80082ca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80082ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80082f6:	78fa      	ldrb	r2, [r7, #3]
 80082f8:	4611      	mov	r1, r2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fa fbcc 	bl	8002a98 <HAL_PCD_SetAddress>
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	4618      	mov	r0, r3
 8008308:	f000 f85c 	bl	80083c4 <USBD_Get_USB_Status>
 800830c:	4603      	mov	r3, r0
 800830e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008310:	7bbb      	ldrb	r3, [r7, #14]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b086      	sub	sp, #24
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
 8008326:	460b      	mov	r3, r1
 8008328:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 8008338:	7af9      	ldrb	r1, [r7, #11]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	f7fa fcd6 	bl	8002cee <HAL_PCD_EP_Transmit>
 8008342:	4603      	mov	r3, r0
 8008344:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 f83b 	bl	80083c4 <USBD_Get_USB_Status>
 800834e:	4603      	mov	r3, r0
 8008350:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008352:	7dbb      	ldrb	r3, [r7, #22]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	607a      	str	r2, [r7, #4]
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	460b      	mov	r3, r1
 800836a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800837a:	7af9      	ldrb	r1, [r7, #11]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	f7fa fc62 	bl	8002c48 <HAL_PCD_EP_Receive>
 8008384:	4603      	mov	r3, r0
 8008386:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f81a 	bl	80083c4 <USBD_Get_USB_Status>
 8008390:	4603      	mov	r3, r0
 8008392:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008394:	7dbb      	ldrb	r3, [r7, #22]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80083b0:	78fa      	ldrb	r2, [r7, #3]
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fa fc82 	bl	8002cbe <HAL_PCD_EP_GetRxCount>
 80083ba:	4603      	mov	r3, r0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d817      	bhi.n	8008408 <USBD_Get_USB_Status+0x44>
 80083d8:	a201      	add	r2, pc, #4	@ (adr r2, 80083e0 <USBD_Get_USB_Status+0x1c>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	080083f1 	.word	0x080083f1
 80083e4:	080083f7 	.word	0x080083f7
 80083e8:	080083fd 	.word	0x080083fd
 80083ec:	08008403 	.word	0x08008403
  {
  case HAL_OK:
    usb_status = USBD_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
    break;
 80083f4:	e00b      	b.n	800840e <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 80083f6:	2303      	movs	r3, #3
 80083f8:	73fb      	strb	r3, [r7, #15]
    break;
 80083fa:	e008      	b.n	800840e <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 80083fc:	2301      	movs	r3, #1
 80083fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008400:	e005      	b.n	800840e <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 8008402:	2303      	movs	r3, #3
 8008404:	73fb      	strb	r3, [r7, #15]
    break;
 8008406:	e002      	b.n	800840e <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	73fb      	strb	r3, [r7, #15]
    break;
 800840c:	bf00      	nop
  }
  return usb_status;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <sniprintf>:
 800841c:	b40c      	push	{r2, r3}
 800841e:	b530      	push	{r4, r5, lr}
 8008420:	4b17      	ldr	r3, [pc, #92]	@ (8008480 <sniprintf+0x64>)
 8008422:	1e0c      	subs	r4, r1, #0
 8008424:	681d      	ldr	r5, [r3, #0]
 8008426:	b09d      	sub	sp, #116	@ 0x74
 8008428:	da08      	bge.n	800843c <sniprintf+0x20>
 800842a:	238b      	movs	r3, #139	@ 0x8b
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	f04f 30ff 	mov.w	r0, #4294967295
 8008432:	b01d      	add	sp, #116	@ 0x74
 8008434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008438:	b002      	add	sp, #8
 800843a:	4770      	bx	lr
 800843c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008440:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008444:	bf14      	ite	ne
 8008446:	f104 33ff 	addne.w	r3, r4, #4294967295
 800844a:	4623      	moveq	r3, r4
 800844c:	9304      	str	r3, [sp, #16]
 800844e:	9307      	str	r3, [sp, #28]
 8008450:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008454:	9002      	str	r0, [sp, #8]
 8008456:	9006      	str	r0, [sp, #24]
 8008458:	f8ad 3016 	strh.w	r3, [sp, #22]
 800845c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800845e:	ab21      	add	r3, sp, #132	@ 0x84
 8008460:	a902      	add	r1, sp, #8
 8008462:	4628      	mov	r0, r5
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	f000 f9d3 	bl	8008810 <_svfiprintf_r>
 800846a:	1c43      	adds	r3, r0, #1
 800846c:	bfbc      	itt	lt
 800846e:	238b      	movlt	r3, #139	@ 0x8b
 8008470:	602b      	strlt	r3, [r5, #0]
 8008472:	2c00      	cmp	r4, #0
 8008474:	d0dd      	beq.n	8008432 <sniprintf+0x16>
 8008476:	9b02      	ldr	r3, [sp, #8]
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
 800847c:	e7d9      	b.n	8008432 <sniprintf+0x16>
 800847e:	bf00      	nop
 8008480:	2000027c 	.word	0x2000027c

08008484 <memset>:
 8008484:	4402      	add	r2, r0
 8008486:	4603      	mov	r3, r0
 8008488:	4293      	cmp	r3, r2
 800848a:	d100      	bne.n	800848e <memset+0xa>
 800848c:	4770      	bx	lr
 800848e:	f803 1b01 	strb.w	r1, [r3], #1
 8008492:	e7f9      	b.n	8008488 <memset+0x4>

08008494 <wcslen>:
 8008494:	4602      	mov	r2, r0
 8008496:	4613      	mov	r3, r2
 8008498:	3204      	adds	r2, #4
 800849a:	6819      	ldr	r1, [r3, #0]
 800849c:	2900      	cmp	r1, #0
 800849e:	d1fa      	bne.n	8008496 <wcslen+0x2>
 80084a0:	1a18      	subs	r0, r3, r0
 80084a2:	1080      	asrs	r0, r0, #2
 80084a4:	4770      	bx	lr
	...

080084a8 <_setlocale_r>:
 80084a8:	b510      	push	{r4, lr}
 80084aa:	4614      	mov	r4, r2
 80084ac:	b122      	cbz	r2, 80084b8 <_setlocale_r+0x10>
 80084ae:	490a      	ldr	r1, [pc, #40]	@ (80084d8 <_setlocale_r+0x30>)
 80084b0:	4610      	mov	r0, r2
 80084b2:	f7f7 fe95 	bl	80001e0 <strcmp>
 80084b6:	b908      	cbnz	r0, 80084bc <_setlocale_r+0x14>
 80084b8:	4808      	ldr	r0, [pc, #32]	@ (80084dc <_setlocale_r+0x34>)
 80084ba:	bd10      	pop	{r4, pc}
 80084bc:	4907      	ldr	r1, [pc, #28]	@ (80084dc <_setlocale_r+0x34>)
 80084be:	4620      	mov	r0, r4
 80084c0:	f7f7 fe8e 	bl	80001e0 <strcmp>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d0f7      	beq.n	80084b8 <_setlocale_r+0x10>
 80084c8:	4905      	ldr	r1, [pc, #20]	@ (80084e0 <_setlocale_r+0x38>)
 80084ca:	4620      	mov	r0, r4
 80084cc:	f7f7 fe88 	bl	80001e0 <strcmp>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d0f1      	beq.n	80084b8 <_setlocale_r+0x10>
 80084d4:	2000      	movs	r0, #0
 80084d6:	e7f0      	b.n	80084ba <_setlocale_r+0x12>
 80084d8:	080090b2 	.word	0x080090b2
 80084dc:	080090b0 	.word	0x080090b0
 80084e0:	080090bd 	.word	0x080090bd

080084e4 <setlocale>:
 80084e4:	4b02      	ldr	r3, [pc, #8]	@ (80084f0 <setlocale+0xc>)
 80084e6:	460a      	mov	r2, r1
 80084e8:	4601      	mov	r1, r0
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	f7ff bfdc 	b.w	80084a8 <_setlocale_r>
 80084f0:	2000027c 	.word	0x2000027c

080084f4 <__errno>:
 80084f4:	4b01      	ldr	r3, [pc, #4]	@ (80084fc <__errno+0x8>)
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	2000027c 	.word	0x2000027c

08008500 <__libc_init_array>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	4d0d      	ldr	r5, [pc, #52]	@ (8008538 <__libc_init_array+0x38>)
 8008504:	4c0d      	ldr	r4, [pc, #52]	@ (800853c <__libc_init_array+0x3c>)
 8008506:	1b64      	subs	r4, r4, r5
 8008508:	10a4      	asrs	r4, r4, #2
 800850a:	2600      	movs	r6, #0
 800850c:	42a6      	cmp	r6, r4
 800850e:	d109      	bne.n	8008524 <__libc_init_array+0x24>
 8008510:	4d0b      	ldr	r5, [pc, #44]	@ (8008540 <__libc_init_array+0x40>)
 8008512:	4c0c      	ldr	r4, [pc, #48]	@ (8008544 <__libc_init_array+0x44>)
 8008514:	f000 fc66 	bl	8008de4 <_init>
 8008518:	1b64      	subs	r4, r4, r5
 800851a:	10a4      	asrs	r4, r4, #2
 800851c:	2600      	movs	r6, #0
 800851e:	42a6      	cmp	r6, r4
 8008520:	d105      	bne.n	800852e <__libc_init_array+0x2e>
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	f855 3b04 	ldr.w	r3, [r5], #4
 8008528:	4798      	blx	r3
 800852a:	3601      	adds	r6, #1
 800852c:	e7ee      	b.n	800850c <__libc_init_array+0xc>
 800852e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008532:	4798      	blx	r3
 8008534:	3601      	adds	r6, #1
 8008536:	e7f2      	b.n	800851e <__libc_init_array+0x1e>
 8008538:	080090f4 	.word	0x080090f4
 800853c:	080090f4 	.word	0x080090f4
 8008540:	080090f4 	.word	0x080090f4
 8008544:	080090f8 	.word	0x080090f8

08008548 <__retarget_lock_acquire_recursive>:
 8008548:	4770      	bx	lr

0800854a <__retarget_lock_release_recursive>:
 800854a:	4770      	bx	lr

0800854c <memcpy>:
 800854c:	440a      	add	r2, r1
 800854e:	4291      	cmp	r1, r2
 8008550:	f100 33ff 	add.w	r3, r0, #4294967295
 8008554:	d100      	bne.n	8008558 <memcpy+0xc>
 8008556:	4770      	bx	lr
 8008558:	b510      	push	{r4, lr}
 800855a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800855e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008562:	4291      	cmp	r1, r2
 8008564:	d1f9      	bne.n	800855a <memcpy+0xe>
 8008566:	bd10      	pop	{r4, pc}

08008568 <_free_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4605      	mov	r5, r0
 800856c:	2900      	cmp	r1, #0
 800856e:	d041      	beq.n	80085f4 <_free_r+0x8c>
 8008570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008574:	1f0c      	subs	r4, r1, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	bfb8      	it	lt
 800857a:	18e4      	addlt	r4, r4, r3
 800857c:	f000 f8e0 	bl	8008740 <__malloc_lock>
 8008580:	4a1d      	ldr	r2, [pc, #116]	@ (80085f8 <_free_r+0x90>)
 8008582:	6813      	ldr	r3, [r2, #0]
 8008584:	b933      	cbnz	r3, 8008594 <_free_r+0x2c>
 8008586:	6063      	str	r3, [r4, #4]
 8008588:	6014      	str	r4, [r2, #0]
 800858a:	4628      	mov	r0, r5
 800858c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008590:	f000 b8dc 	b.w	800874c <__malloc_unlock>
 8008594:	42a3      	cmp	r3, r4
 8008596:	d908      	bls.n	80085aa <_free_r+0x42>
 8008598:	6820      	ldr	r0, [r4, #0]
 800859a:	1821      	adds	r1, r4, r0
 800859c:	428b      	cmp	r3, r1
 800859e:	bf01      	itttt	eq
 80085a0:	6819      	ldreq	r1, [r3, #0]
 80085a2:	685b      	ldreq	r3, [r3, #4]
 80085a4:	1809      	addeq	r1, r1, r0
 80085a6:	6021      	streq	r1, [r4, #0]
 80085a8:	e7ed      	b.n	8008586 <_free_r+0x1e>
 80085aa:	461a      	mov	r2, r3
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	b10b      	cbz	r3, 80085b4 <_free_r+0x4c>
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	d9fa      	bls.n	80085aa <_free_r+0x42>
 80085b4:	6811      	ldr	r1, [r2, #0]
 80085b6:	1850      	adds	r0, r2, r1
 80085b8:	42a0      	cmp	r0, r4
 80085ba:	d10b      	bne.n	80085d4 <_free_r+0x6c>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	4401      	add	r1, r0
 80085c0:	1850      	adds	r0, r2, r1
 80085c2:	4283      	cmp	r3, r0
 80085c4:	6011      	str	r1, [r2, #0]
 80085c6:	d1e0      	bne.n	800858a <_free_r+0x22>
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	6053      	str	r3, [r2, #4]
 80085ce:	4408      	add	r0, r1
 80085d0:	6010      	str	r0, [r2, #0]
 80085d2:	e7da      	b.n	800858a <_free_r+0x22>
 80085d4:	d902      	bls.n	80085dc <_free_r+0x74>
 80085d6:	230c      	movs	r3, #12
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	e7d6      	b.n	800858a <_free_r+0x22>
 80085dc:	6820      	ldr	r0, [r4, #0]
 80085de:	1821      	adds	r1, r4, r0
 80085e0:	428b      	cmp	r3, r1
 80085e2:	bf04      	itt	eq
 80085e4:	6819      	ldreq	r1, [r3, #0]
 80085e6:	685b      	ldreq	r3, [r3, #4]
 80085e8:	6063      	str	r3, [r4, #4]
 80085ea:	bf04      	itt	eq
 80085ec:	1809      	addeq	r1, r1, r0
 80085ee:	6021      	streq	r1, [r4, #0]
 80085f0:	6054      	str	r4, [r2, #4]
 80085f2:	e7ca      	b.n	800858a <_free_r+0x22>
 80085f4:	bd38      	pop	{r3, r4, r5, pc}
 80085f6:	bf00      	nop
 80085f8:	20001220 	.word	0x20001220

080085fc <sbrk_aligned>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	4e0f      	ldr	r6, [pc, #60]	@ (800863c <sbrk_aligned+0x40>)
 8008600:	460c      	mov	r4, r1
 8008602:	6831      	ldr	r1, [r6, #0]
 8008604:	4605      	mov	r5, r0
 8008606:	b911      	cbnz	r1, 800860e <sbrk_aligned+0x12>
 8008608:	f000 fba6 	bl	8008d58 <_sbrk_r>
 800860c:	6030      	str	r0, [r6, #0]
 800860e:	4621      	mov	r1, r4
 8008610:	4628      	mov	r0, r5
 8008612:	f000 fba1 	bl	8008d58 <_sbrk_r>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d103      	bne.n	8008622 <sbrk_aligned+0x26>
 800861a:	f04f 34ff 	mov.w	r4, #4294967295
 800861e:	4620      	mov	r0, r4
 8008620:	bd70      	pop	{r4, r5, r6, pc}
 8008622:	1cc4      	adds	r4, r0, #3
 8008624:	f024 0403 	bic.w	r4, r4, #3
 8008628:	42a0      	cmp	r0, r4
 800862a:	d0f8      	beq.n	800861e <sbrk_aligned+0x22>
 800862c:	1a21      	subs	r1, r4, r0
 800862e:	4628      	mov	r0, r5
 8008630:	f000 fb92 	bl	8008d58 <_sbrk_r>
 8008634:	3001      	adds	r0, #1
 8008636:	d1f2      	bne.n	800861e <sbrk_aligned+0x22>
 8008638:	e7ef      	b.n	800861a <sbrk_aligned+0x1e>
 800863a:	bf00      	nop
 800863c:	2000121c 	.word	0x2000121c

08008640 <_malloc_r>:
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	1ccd      	adds	r5, r1, #3
 8008646:	f025 0503 	bic.w	r5, r5, #3
 800864a:	3508      	adds	r5, #8
 800864c:	2d0c      	cmp	r5, #12
 800864e:	bf38      	it	cc
 8008650:	250c      	movcc	r5, #12
 8008652:	2d00      	cmp	r5, #0
 8008654:	4606      	mov	r6, r0
 8008656:	db01      	blt.n	800865c <_malloc_r+0x1c>
 8008658:	42a9      	cmp	r1, r5
 800865a:	d904      	bls.n	8008666 <_malloc_r+0x26>
 800865c:	230c      	movs	r3, #12
 800865e:	6033      	str	r3, [r6, #0]
 8008660:	2000      	movs	r0, #0
 8008662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800873c <_malloc_r+0xfc>
 800866a:	f000 f869 	bl	8008740 <__malloc_lock>
 800866e:	f8d8 3000 	ldr.w	r3, [r8]
 8008672:	461c      	mov	r4, r3
 8008674:	bb44      	cbnz	r4, 80086c8 <_malloc_r+0x88>
 8008676:	4629      	mov	r1, r5
 8008678:	4630      	mov	r0, r6
 800867a:	f7ff ffbf 	bl	80085fc <sbrk_aligned>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	4604      	mov	r4, r0
 8008682:	d158      	bne.n	8008736 <_malloc_r+0xf6>
 8008684:	f8d8 4000 	ldr.w	r4, [r8]
 8008688:	4627      	mov	r7, r4
 800868a:	2f00      	cmp	r7, #0
 800868c:	d143      	bne.n	8008716 <_malloc_r+0xd6>
 800868e:	2c00      	cmp	r4, #0
 8008690:	d04b      	beq.n	800872a <_malloc_r+0xea>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	4639      	mov	r1, r7
 8008696:	4630      	mov	r0, r6
 8008698:	eb04 0903 	add.w	r9, r4, r3
 800869c:	f000 fb5c 	bl	8008d58 <_sbrk_r>
 80086a0:	4581      	cmp	r9, r0
 80086a2:	d142      	bne.n	800872a <_malloc_r+0xea>
 80086a4:	6821      	ldr	r1, [r4, #0]
 80086a6:	1a6d      	subs	r5, r5, r1
 80086a8:	4629      	mov	r1, r5
 80086aa:	4630      	mov	r0, r6
 80086ac:	f7ff ffa6 	bl	80085fc <sbrk_aligned>
 80086b0:	3001      	adds	r0, #1
 80086b2:	d03a      	beq.n	800872a <_malloc_r+0xea>
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	442b      	add	r3, r5
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	f8d8 3000 	ldr.w	r3, [r8]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	bb62      	cbnz	r2, 800871c <_malloc_r+0xdc>
 80086c2:	f8c8 7000 	str.w	r7, [r8]
 80086c6:	e00f      	b.n	80086e8 <_malloc_r+0xa8>
 80086c8:	6822      	ldr	r2, [r4, #0]
 80086ca:	1b52      	subs	r2, r2, r5
 80086cc:	d420      	bmi.n	8008710 <_malloc_r+0xd0>
 80086ce:	2a0b      	cmp	r2, #11
 80086d0:	d917      	bls.n	8008702 <_malloc_r+0xc2>
 80086d2:	1961      	adds	r1, r4, r5
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	6025      	str	r5, [r4, #0]
 80086d8:	bf18      	it	ne
 80086da:	6059      	strne	r1, [r3, #4]
 80086dc:	6863      	ldr	r3, [r4, #4]
 80086de:	bf08      	it	eq
 80086e0:	f8c8 1000 	streq.w	r1, [r8]
 80086e4:	5162      	str	r2, [r4, r5]
 80086e6:	604b      	str	r3, [r1, #4]
 80086e8:	4630      	mov	r0, r6
 80086ea:	f000 f82f 	bl	800874c <__malloc_unlock>
 80086ee:	f104 000b 	add.w	r0, r4, #11
 80086f2:	1d23      	adds	r3, r4, #4
 80086f4:	f020 0007 	bic.w	r0, r0, #7
 80086f8:	1ac2      	subs	r2, r0, r3
 80086fa:	bf1c      	itt	ne
 80086fc:	1a1b      	subne	r3, r3, r0
 80086fe:	50a3      	strne	r3, [r4, r2]
 8008700:	e7af      	b.n	8008662 <_malloc_r+0x22>
 8008702:	6862      	ldr	r2, [r4, #4]
 8008704:	42a3      	cmp	r3, r4
 8008706:	bf0c      	ite	eq
 8008708:	f8c8 2000 	streq.w	r2, [r8]
 800870c:	605a      	strne	r2, [r3, #4]
 800870e:	e7eb      	b.n	80086e8 <_malloc_r+0xa8>
 8008710:	4623      	mov	r3, r4
 8008712:	6864      	ldr	r4, [r4, #4]
 8008714:	e7ae      	b.n	8008674 <_malloc_r+0x34>
 8008716:	463c      	mov	r4, r7
 8008718:	687f      	ldr	r7, [r7, #4]
 800871a:	e7b6      	b.n	800868a <_malloc_r+0x4a>
 800871c:	461a      	mov	r2, r3
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	42a3      	cmp	r3, r4
 8008722:	d1fb      	bne.n	800871c <_malloc_r+0xdc>
 8008724:	2300      	movs	r3, #0
 8008726:	6053      	str	r3, [r2, #4]
 8008728:	e7de      	b.n	80086e8 <_malloc_r+0xa8>
 800872a:	230c      	movs	r3, #12
 800872c:	6033      	str	r3, [r6, #0]
 800872e:	4630      	mov	r0, r6
 8008730:	f000 f80c 	bl	800874c <__malloc_unlock>
 8008734:	e794      	b.n	8008660 <_malloc_r+0x20>
 8008736:	6005      	str	r5, [r0, #0]
 8008738:	e7d6      	b.n	80086e8 <_malloc_r+0xa8>
 800873a:	bf00      	nop
 800873c:	20001220 	.word	0x20001220

08008740 <__malloc_lock>:
 8008740:	4801      	ldr	r0, [pc, #4]	@ (8008748 <__malloc_lock+0x8>)
 8008742:	f7ff bf01 	b.w	8008548 <__retarget_lock_acquire_recursive>
 8008746:	bf00      	nop
 8008748:	20001218 	.word	0x20001218

0800874c <__malloc_unlock>:
 800874c:	4801      	ldr	r0, [pc, #4]	@ (8008754 <__malloc_unlock+0x8>)
 800874e:	f7ff befc 	b.w	800854a <__retarget_lock_release_recursive>
 8008752:	bf00      	nop
 8008754:	20001218 	.word	0x20001218

08008758 <__ssputs_r>:
 8008758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875c:	688e      	ldr	r6, [r1, #8]
 800875e:	461f      	mov	r7, r3
 8008760:	42be      	cmp	r6, r7
 8008762:	680b      	ldr	r3, [r1, #0]
 8008764:	4682      	mov	sl, r0
 8008766:	460c      	mov	r4, r1
 8008768:	4690      	mov	r8, r2
 800876a:	d82d      	bhi.n	80087c8 <__ssputs_r+0x70>
 800876c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008770:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008774:	d026      	beq.n	80087c4 <__ssputs_r+0x6c>
 8008776:	6965      	ldr	r5, [r4, #20]
 8008778:	6909      	ldr	r1, [r1, #16]
 800877a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800877e:	eba3 0901 	sub.w	r9, r3, r1
 8008782:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008786:	1c7b      	adds	r3, r7, #1
 8008788:	444b      	add	r3, r9
 800878a:	106d      	asrs	r5, r5, #1
 800878c:	429d      	cmp	r5, r3
 800878e:	bf38      	it	cc
 8008790:	461d      	movcc	r5, r3
 8008792:	0553      	lsls	r3, r2, #21
 8008794:	d527      	bpl.n	80087e6 <__ssputs_r+0x8e>
 8008796:	4629      	mov	r1, r5
 8008798:	f7ff ff52 	bl	8008640 <_malloc_r>
 800879c:	4606      	mov	r6, r0
 800879e:	b360      	cbz	r0, 80087fa <__ssputs_r+0xa2>
 80087a0:	6921      	ldr	r1, [r4, #16]
 80087a2:	464a      	mov	r2, r9
 80087a4:	f7ff fed2 	bl	800854c <memcpy>
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	6126      	str	r6, [r4, #16]
 80087b6:	6165      	str	r5, [r4, #20]
 80087b8:	444e      	add	r6, r9
 80087ba:	eba5 0509 	sub.w	r5, r5, r9
 80087be:	6026      	str	r6, [r4, #0]
 80087c0:	60a5      	str	r5, [r4, #8]
 80087c2:	463e      	mov	r6, r7
 80087c4:	42be      	cmp	r6, r7
 80087c6:	d900      	bls.n	80087ca <__ssputs_r+0x72>
 80087c8:	463e      	mov	r6, r7
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	4632      	mov	r2, r6
 80087ce:	4641      	mov	r1, r8
 80087d0:	f000 faa8 	bl	8008d24 <memmove>
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	1b9b      	subs	r3, r3, r6
 80087d8:	60a3      	str	r3, [r4, #8]
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	4433      	add	r3, r6
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	2000      	movs	r0, #0
 80087e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e6:	462a      	mov	r2, r5
 80087e8:	f000 fac6 	bl	8008d78 <_realloc_r>
 80087ec:	4606      	mov	r6, r0
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d1e0      	bne.n	80087b4 <__ssputs_r+0x5c>
 80087f2:	6921      	ldr	r1, [r4, #16]
 80087f4:	4650      	mov	r0, sl
 80087f6:	f7ff feb7 	bl	8008568 <_free_r>
 80087fa:	230c      	movs	r3, #12
 80087fc:	f8ca 3000 	str.w	r3, [sl]
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	e7e9      	b.n	80087e2 <__ssputs_r+0x8a>
	...

08008810 <_svfiprintf_r>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	4698      	mov	r8, r3
 8008816:	898b      	ldrh	r3, [r1, #12]
 8008818:	061b      	lsls	r3, r3, #24
 800881a:	b09d      	sub	sp, #116	@ 0x74
 800881c:	4607      	mov	r7, r0
 800881e:	460d      	mov	r5, r1
 8008820:	4614      	mov	r4, r2
 8008822:	d510      	bpl.n	8008846 <_svfiprintf_r+0x36>
 8008824:	690b      	ldr	r3, [r1, #16]
 8008826:	b973      	cbnz	r3, 8008846 <_svfiprintf_r+0x36>
 8008828:	2140      	movs	r1, #64	@ 0x40
 800882a:	f7ff ff09 	bl	8008640 <_malloc_r>
 800882e:	6028      	str	r0, [r5, #0]
 8008830:	6128      	str	r0, [r5, #16]
 8008832:	b930      	cbnz	r0, 8008842 <_svfiprintf_r+0x32>
 8008834:	230c      	movs	r3, #12
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	f04f 30ff 	mov.w	r0, #4294967295
 800883c:	b01d      	add	sp, #116	@ 0x74
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	2340      	movs	r3, #64	@ 0x40
 8008844:	616b      	str	r3, [r5, #20]
 8008846:	2300      	movs	r3, #0
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
 800884a:	2320      	movs	r3, #32
 800884c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008850:	f8cd 800c 	str.w	r8, [sp, #12]
 8008854:	2330      	movs	r3, #48	@ 0x30
 8008856:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089f4 <_svfiprintf_r+0x1e4>
 800885a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800885e:	f04f 0901 	mov.w	r9, #1
 8008862:	4623      	mov	r3, r4
 8008864:	469a      	mov	sl, r3
 8008866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886a:	b10a      	cbz	r2, 8008870 <_svfiprintf_r+0x60>
 800886c:	2a25      	cmp	r2, #37	@ 0x25
 800886e:	d1f9      	bne.n	8008864 <_svfiprintf_r+0x54>
 8008870:	ebba 0b04 	subs.w	fp, sl, r4
 8008874:	d00b      	beq.n	800888e <_svfiprintf_r+0x7e>
 8008876:	465b      	mov	r3, fp
 8008878:	4622      	mov	r2, r4
 800887a:	4629      	mov	r1, r5
 800887c:	4638      	mov	r0, r7
 800887e:	f7ff ff6b 	bl	8008758 <__ssputs_r>
 8008882:	3001      	adds	r0, #1
 8008884:	f000 80a7 	beq.w	80089d6 <_svfiprintf_r+0x1c6>
 8008888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800888a:	445a      	add	r2, fp
 800888c:	9209      	str	r2, [sp, #36]	@ 0x24
 800888e:	f89a 3000 	ldrb.w	r3, [sl]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 809f 	beq.w	80089d6 <_svfiprintf_r+0x1c6>
 8008898:	2300      	movs	r3, #0
 800889a:	f04f 32ff 	mov.w	r2, #4294967295
 800889e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a2:	f10a 0a01 	add.w	sl, sl, #1
 80088a6:	9304      	str	r3, [sp, #16]
 80088a8:	9307      	str	r3, [sp, #28]
 80088aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80088b0:	4654      	mov	r4, sl
 80088b2:	2205      	movs	r2, #5
 80088b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b8:	484e      	ldr	r0, [pc, #312]	@ (80089f4 <_svfiprintf_r+0x1e4>)
 80088ba:	f7f7 fca1 	bl	8000200 <memchr>
 80088be:	9a04      	ldr	r2, [sp, #16]
 80088c0:	b9d8      	cbnz	r0, 80088fa <_svfiprintf_r+0xea>
 80088c2:	06d0      	lsls	r0, r2, #27
 80088c4:	bf44      	itt	mi
 80088c6:	2320      	movmi	r3, #32
 80088c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088cc:	0711      	lsls	r1, r2, #28
 80088ce:	bf44      	itt	mi
 80088d0:	232b      	movmi	r3, #43	@ 0x2b
 80088d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088d6:	f89a 3000 	ldrb.w	r3, [sl]
 80088da:	2b2a      	cmp	r3, #42	@ 0x2a
 80088dc:	d015      	beq.n	800890a <_svfiprintf_r+0xfa>
 80088de:	9a07      	ldr	r2, [sp, #28]
 80088e0:	4654      	mov	r4, sl
 80088e2:	2000      	movs	r0, #0
 80088e4:	f04f 0c0a 	mov.w	ip, #10
 80088e8:	4621      	mov	r1, r4
 80088ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ee:	3b30      	subs	r3, #48	@ 0x30
 80088f0:	2b09      	cmp	r3, #9
 80088f2:	d94b      	bls.n	800898c <_svfiprintf_r+0x17c>
 80088f4:	b1b0      	cbz	r0, 8008924 <_svfiprintf_r+0x114>
 80088f6:	9207      	str	r2, [sp, #28]
 80088f8:	e014      	b.n	8008924 <_svfiprintf_r+0x114>
 80088fa:	eba0 0308 	sub.w	r3, r0, r8
 80088fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008902:	4313      	orrs	r3, r2
 8008904:	9304      	str	r3, [sp, #16]
 8008906:	46a2      	mov	sl, r4
 8008908:	e7d2      	b.n	80088b0 <_svfiprintf_r+0xa0>
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	1d19      	adds	r1, r3, #4
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	9103      	str	r1, [sp, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	bfbb      	ittet	lt
 8008916:	425b      	neglt	r3, r3
 8008918:	f042 0202 	orrlt.w	r2, r2, #2
 800891c:	9307      	strge	r3, [sp, #28]
 800891e:	9307      	strlt	r3, [sp, #28]
 8008920:	bfb8      	it	lt
 8008922:	9204      	strlt	r2, [sp, #16]
 8008924:	7823      	ldrb	r3, [r4, #0]
 8008926:	2b2e      	cmp	r3, #46	@ 0x2e
 8008928:	d10a      	bne.n	8008940 <_svfiprintf_r+0x130>
 800892a:	7863      	ldrb	r3, [r4, #1]
 800892c:	2b2a      	cmp	r3, #42	@ 0x2a
 800892e:	d132      	bne.n	8008996 <_svfiprintf_r+0x186>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	1d1a      	adds	r2, r3, #4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	9203      	str	r2, [sp, #12]
 8008938:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800893c:	3402      	adds	r4, #2
 800893e:	9305      	str	r3, [sp, #20]
 8008940:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a04 <_svfiprintf_r+0x1f4>
 8008944:	7821      	ldrb	r1, [r4, #0]
 8008946:	2203      	movs	r2, #3
 8008948:	4650      	mov	r0, sl
 800894a:	f7f7 fc59 	bl	8000200 <memchr>
 800894e:	b138      	cbz	r0, 8008960 <_svfiprintf_r+0x150>
 8008950:	9b04      	ldr	r3, [sp, #16]
 8008952:	eba0 000a 	sub.w	r0, r0, sl
 8008956:	2240      	movs	r2, #64	@ 0x40
 8008958:	4082      	lsls	r2, r0
 800895a:	4313      	orrs	r3, r2
 800895c:	3401      	adds	r4, #1
 800895e:	9304      	str	r3, [sp, #16]
 8008960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008964:	4824      	ldr	r0, [pc, #144]	@ (80089f8 <_svfiprintf_r+0x1e8>)
 8008966:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800896a:	2206      	movs	r2, #6
 800896c:	f7f7 fc48 	bl	8000200 <memchr>
 8008970:	2800      	cmp	r0, #0
 8008972:	d036      	beq.n	80089e2 <_svfiprintf_r+0x1d2>
 8008974:	4b21      	ldr	r3, [pc, #132]	@ (80089fc <_svfiprintf_r+0x1ec>)
 8008976:	bb1b      	cbnz	r3, 80089c0 <_svfiprintf_r+0x1b0>
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	3307      	adds	r3, #7
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	3308      	adds	r3, #8
 8008982:	9303      	str	r3, [sp, #12]
 8008984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008986:	4433      	add	r3, r6
 8008988:	9309      	str	r3, [sp, #36]	@ 0x24
 800898a:	e76a      	b.n	8008862 <_svfiprintf_r+0x52>
 800898c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008990:	460c      	mov	r4, r1
 8008992:	2001      	movs	r0, #1
 8008994:	e7a8      	b.n	80088e8 <_svfiprintf_r+0xd8>
 8008996:	2300      	movs	r3, #0
 8008998:	3401      	adds	r4, #1
 800899a:	9305      	str	r3, [sp, #20]
 800899c:	4619      	mov	r1, r3
 800899e:	f04f 0c0a 	mov.w	ip, #10
 80089a2:	4620      	mov	r0, r4
 80089a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a8:	3a30      	subs	r2, #48	@ 0x30
 80089aa:	2a09      	cmp	r2, #9
 80089ac:	d903      	bls.n	80089b6 <_svfiprintf_r+0x1a6>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0c6      	beq.n	8008940 <_svfiprintf_r+0x130>
 80089b2:	9105      	str	r1, [sp, #20]
 80089b4:	e7c4      	b.n	8008940 <_svfiprintf_r+0x130>
 80089b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ba:	4604      	mov	r4, r0
 80089bc:	2301      	movs	r3, #1
 80089be:	e7f0      	b.n	80089a2 <_svfiprintf_r+0x192>
 80089c0:	ab03      	add	r3, sp, #12
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	462a      	mov	r2, r5
 80089c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008a00 <_svfiprintf_r+0x1f0>)
 80089c8:	a904      	add	r1, sp, #16
 80089ca:	4638      	mov	r0, r7
 80089cc:	f3af 8000 	nop.w
 80089d0:	1c42      	adds	r2, r0, #1
 80089d2:	4606      	mov	r6, r0
 80089d4:	d1d6      	bne.n	8008984 <_svfiprintf_r+0x174>
 80089d6:	89ab      	ldrh	r3, [r5, #12]
 80089d8:	065b      	lsls	r3, r3, #25
 80089da:	f53f af2d 	bmi.w	8008838 <_svfiprintf_r+0x28>
 80089de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089e0:	e72c      	b.n	800883c <_svfiprintf_r+0x2c>
 80089e2:	ab03      	add	r3, sp, #12
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	462a      	mov	r2, r5
 80089e8:	4b05      	ldr	r3, [pc, #20]	@ (8008a00 <_svfiprintf_r+0x1f0>)
 80089ea:	a904      	add	r1, sp, #16
 80089ec:	4638      	mov	r0, r7
 80089ee:	f000 f879 	bl	8008ae4 <_printf_i>
 80089f2:	e7ed      	b.n	80089d0 <_svfiprintf_r+0x1c0>
 80089f4:	080090b8 	.word	0x080090b8
 80089f8:	080090c2 	.word	0x080090c2
 80089fc:	00000000 	.word	0x00000000
 8008a00:	08008759 	.word	0x08008759
 8008a04:	080090be 	.word	0x080090be

08008a08 <_printf_common>:
 8008a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a0c:	4616      	mov	r6, r2
 8008a0e:	4698      	mov	r8, r3
 8008a10:	688a      	ldr	r2, [r1, #8]
 8008a12:	690b      	ldr	r3, [r1, #16]
 8008a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	bfb8      	it	lt
 8008a1c:	4613      	movlt	r3, r2
 8008a1e:	6033      	str	r3, [r6, #0]
 8008a20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a24:	4607      	mov	r7, r0
 8008a26:	460c      	mov	r4, r1
 8008a28:	b10a      	cbz	r2, 8008a2e <_printf_common+0x26>
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	6033      	str	r3, [r6, #0]
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	0699      	lsls	r1, r3, #26
 8008a32:	bf42      	ittt	mi
 8008a34:	6833      	ldrmi	r3, [r6, #0]
 8008a36:	3302      	addmi	r3, #2
 8008a38:	6033      	strmi	r3, [r6, #0]
 8008a3a:	6825      	ldr	r5, [r4, #0]
 8008a3c:	f015 0506 	ands.w	r5, r5, #6
 8008a40:	d106      	bne.n	8008a50 <_printf_common+0x48>
 8008a42:	f104 0a19 	add.w	sl, r4, #25
 8008a46:	68e3      	ldr	r3, [r4, #12]
 8008a48:	6832      	ldr	r2, [r6, #0]
 8008a4a:	1a9b      	subs	r3, r3, r2
 8008a4c:	42ab      	cmp	r3, r5
 8008a4e:	dc26      	bgt.n	8008a9e <_printf_common+0x96>
 8008a50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a54:	6822      	ldr	r2, [r4, #0]
 8008a56:	3b00      	subs	r3, #0
 8008a58:	bf18      	it	ne
 8008a5a:	2301      	movne	r3, #1
 8008a5c:	0692      	lsls	r2, r2, #26
 8008a5e:	d42b      	bmi.n	8008ab8 <_printf_common+0xb0>
 8008a60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a64:	4641      	mov	r1, r8
 8008a66:	4638      	mov	r0, r7
 8008a68:	47c8      	blx	r9
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d01e      	beq.n	8008aac <_printf_common+0xa4>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	6922      	ldr	r2, [r4, #16]
 8008a72:	f003 0306 	and.w	r3, r3, #6
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	bf02      	ittt	eq
 8008a7a:	68e5      	ldreq	r5, [r4, #12]
 8008a7c:	6833      	ldreq	r3, [r6, #0]
 8008a7e:	1aed      	subeq	r5, r5, r3
 8008a80:	68a3      	ldr	r3, [r4, #8]
 8008a82:	bf0c      	ite	eq
 8008a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a88:	2500      	movne	r5, #0
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	bfc4      	itt	gt
 8008a8e:	1a9b      	subgt	r3, r3, r2
 8008a90:	18ed      	addgt	r5, r5, r3
 8008a92:	2600      	movs	r6, #0
 8008a94:	341a      	adds	r4, #26
 8008a96:	42b5      	cmp	r5, r6
 8008a98:	d11a      	bne.n	8008ad0 <_printf_common+0xc8>
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	e008      	b.n	8008ab0 <_printf_common+0xa8>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4652      	mov	r2, sl
 8008aa2:	4641      	mov	r1, r8
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	47c8      	blx	r9
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d103      	bne.n	8008ab4 <_printf_common+0xac>
 8008aac:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab4:	3501      	adds	r5, #1
 8008ab6:	e7c6      	b.n	8008a46 <_printf_common+0x3e>
 8008ab8:	18e1      	adds	r1, r4, r3
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	2030      	movs	r0, #48	@ 0x30
 8008abe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ac2:	4422      	add	r2, r4
 8008ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008acc:	3302      	adds	r3, #2
 8008ace:	e7c7      	b.n	8008a60 <_printf_common+0x58>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	4641      	mov	r1, r8
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	47c8      	blx	r9
 8008ada:	3001      	adds	r0, #1
 8008adc:	d0e6      	beq.n	8008aac <_printf_common+0xa4>
 8008ade:	3601      	adds	r6, #1
 8008ae0:	e7d9      	b.n	8008a96 <_printf_common+0x8e>
	...

08008ae4 <_printf_i>:
 8008ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae8:	7e0f      	ldrb	r7, [r1, #24]
 8008aea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008aec:	2f78      	cmp	r7, #120	@ 0x78
 8008aee:	4691      	mov	r9, r2
 8008af0:	4680      	mov	r8, r0
 8008af2:	460c      	mov	r4, r1
 8008af4:	469a      	mov	sl, r3
 8008af6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008afa:	d807      	bhi.n	8008b0c <_printf_i+0x28>
 8008afc:	2f62      	cmp	r7, #98	@ 0x62
 8008afe:	d80a      	bhi.n	8008b16 <_printf_i+0x32>
 8008b00:	2f00      	cmp	r7, #0
 8008b02:	f000 80d2 	beq.w	8008caa <_printf_i+0x1c6>
 8008b06:	2f58      	cmp	r7, #88	@ 0x58
 8008b08:	f000 80b9 	beq.w	8008c7e <_printf_i+0x19a>
 8008b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b14:	e03a      	b.n	8008b8c <_printf_i+0xa8>
 8008b16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b1a:	2b15      	cmp	r3, #21
 8008b1c:	d8f6      	bhi.n	8008b0c <_printf_i+0x28>
 8008b1e:	a101      	add	r1, pc, #4	@ (adr r1, 8008b24 <_printf_i+0x40>)
 8008b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b24:	08008b7d 	.word	0x08008b7d
 8008b28:	08008b91 	.word	0x08008b91
 8008b2c:	08008b0d 	.word	0x08008b0d
 8008b30:	08008b0d 	.word	0x08008b0d
 8008b34:	08008b0d 	.word	0x08008b0d
 8008b38:	08008b0d 	.word	0x08008b0d
 8008b3c:	08008b91 	.word	0x08008b91
 8008b40:	08008b0d 	.word	0x08008b0d
 8008b44:	08008b0d 	.word	0x08008b0d
 8008b48:	08008b0d 	.word	0x08008b0d
 8008b4c:	08008b0d 	.word	0x08008b0d
 8008b50:	08008c91 	.word	0x08008c91
 8008b54:	08008bbb 	.word	0x08008bbb
 8008b58:	08008c4b 	.word	0x08008c4b
 8008b5c:	08008b0d 	.word	0x08008b0d
 8008b60:	08008b0d 	.word	0x08008b0d
 8008b64:	08008cb3 	.word	0x08008cb3
 8008b68:	08008b0d 	.word	0x08008b0d
 8008b6c:	08008bbb 	.word	0x08008bbb
 8008b70:	08008b0d 	.word	0x08008b0d
 8008b74:	08008b0d 	.word	0x08008b0d
 8008b78:	08008c53 	.word	0x08008c53
 8008b7c:	6833      	ldr	r3, [r6, #0]
 8008b7e:	1d1a      	adds	r2, r3, #4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6032      	str	r2, [r6, #0]
 8008b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e09d      	b.n	8008ccc <_printf_i+0x1e8>
 8008b90:	6833      	ldr	r3, [r6, #0]
 8008b92:	6820      	ldr	r0, [r4, #0]
 8008b94:	1d19      	adds	r1, r3, #4
 8008b96:	6031      	str	r1, [r6, #0]
 8008b98:	0606      	lsls	r6, r0, #24
 8008b9a:	d501      	bpl.n	8008ba0 <_printf_i+0xbc>
 8008b9c:	681d      	ldr	r5, [r3, #0]
 8008b9e:	e003      	b.n	8008ba8 <_printf_i+0xc4>
 8008ba0:	0645      	lsls	r5, r0, #25
 8008ba2:	d5fb      	bpl.n	8008b9c <_printf_i+0xb8>
 8008ba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	da03      	bge.n	8008bb4 <_printf_i+0xd0>
 8008bac:	232d      	movs	r3, #45	@ 0x2d
 8008bae:	426d      	negs	r5, r5
 8008bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bb4:	4859      	ldr	r0, [pc, #356]	@ (8008d1c <_printf_i+0x238>)
 8008bb6:	230a      	movs	r3, #10
 8008bb8:	e011      	b.n	8008bde <_printf_i+0xfa>
 8008bba:	6821      	ldr	r1, [r4, #0]
 8008bbc:	6833      	ldr	r3, [r6, #0]
 8008bbe:	0608      	lsls	r0, r1, #24
 8008bc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bc4:	d402      	bmi.n	8008bcc <_printf_i+0xe8>
 8008bc6:	0649      	lsls	r1, r1, #25
 8008bc8:	bf48      	it	mi
 8008bca:	b2ad      	uxthmi	r5, r5
 8008bcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bce:	4853      	ldr	r0, [pc, #332]	@ (8008d1c <_printf_i+0x238>)
 8008bd0:	6033      	str	r3, [r6, #0]
 8008bd2:	bf14      	ite	ne
 8008bd4:	230a      	movne	r3, #10
 8008bd6:	2308      	moveq	r3, #8
 8008bd8:	2100      	movs	r1, #0
 8008bda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bde:	6866      	ldr	r6, [r4, #4]
 8008be0:	60a6      	str	r6, [r4, #8]
 8008be2:	2e00      	cmp	r6, #0
 8008be4:	bfa2      	ittt	ge
 8008be6:	6821      	ldrge	r1, [r4, #0]
 8008be8:	f021 0104 	bicge.w	r1, r1, #4
 8008bec:	6021      	strge	r1, [r4, #0]
 8008bee:	b90d      	cbnz	r5, 8008bf4 <_printf_i+0x110>
 8008bf0:	2e00      	cmp	r6, #0
 8008bf2:	d04b      	beq.n	8008c8c <_printf_i+0x1a8>
 8008bf4:	4616      	mov	r6, r2
 8008bf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bfa:	fb03 5711 	mls	r7, r3, r1, r5
 8008bfe:	5dc7      	ldrb	r7, [r0, r7]
 8008c00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c04:	462f      	mov	r7, r5
 8008c06:	42bb      	cmp	r3, r7
 8008c08:	460d      	mov	r5, r1
 8008c0a:	d9f4      	bls.n	8008bf6 <_printf_i+0x112>
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d10b      	bne.n	8008c28 <_printf_i+0x144>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	07df      	lsls	r7, r3, #31
 8008c14:	d508      	bpl.n	8008c28 <_printf_i+0x144>
 8008c16:	6923      	ldr	r3, [r4, #16]
 8008c18:	6861      	ldr	r1, [r4, #4]
 8008c1a:	4299      	cmp	r1, r3
 8008c1c:	bfde      	ittt	le
 8008c1e:	2330      	movle	r3, #48	@ 0x30
 8008c20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c28:	1b92      	subs	r2, r2, r6
 8008c2a:	6122      	str	r2, [r4, #16]
 8008c2c:	f8cd a000 	str.w	sl, [sp]
 8008c30:	464b      	mov	r3, r9
 8008c32:	aa03      	add	r2, sp, #12
 8008c34:	4621      	mov	r1, r4
 8008c36:	4640      	mov	r0, r8
 8008c38:	f7ff fee6 	bl	8008a08 <_printf_common>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d14a      	bne.n	8008cd6 <_printf_i+0x1f2>
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295
 8008c44:	b004      	add	sp, #16
 8008c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	f043 0320 	orr.w	r3, r3, #32
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	4833      	ldr	r0, [pc, #204]	@ (8008d20 <_printf_i+0x23c>)
 8008c54:	2778      	movs	r7, #120	@ 0x78
 8008c56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	6831      	ldr	r1, [r6, #0]
 8008c5e:	061f      	lsls	r7, r3, #24
 8008c60:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c64:	d402      	bmi.n	8008c6c <_printf_i+0x188>
 8008c66:	065f      	lsls	r7, r3, #25
 8008c68:	bf48      	it	mi
 8008c6a:	b2ad      	uxthmi	r5, r5
 8008c6c:	6031      	str	r1, [r6, #0]
 8008c6e:	07d9      	lsls	r1, r3, #31
 8008c70:	bf44      	itt	mi
 8008c72:	f043 0320 	orrmi.w	r3, r3, #32
 8008c76:	6023      	strmi	r3, [r4, #0]
 8008c78:	b11d      	cbz	r5, 8008c82 <_printf_i+0x19e>
 8008c7a:	2310      	movs	r3, #16
 8008c7c:	e7ac      	b.n	8008bd8 <_printf_i+0xf4>
 8008c7e:	4827      	ldr	r0, [pc, #156]	@ (8008d1c <_printf_i+0x238>)
 8008c80:	e7e9      	b.n	8008c56 <_printf_i+0x172>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	f023 0320 	bic.w	r3, r3, #32
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	e7f6      	b.n	8008c7a <_printf_i+0x196>
 8008c8c:	4616      	mov	r6, r2
 8008c8e:	e7bd      	b.n	8008c0c <_printf_i+0x128>
 8008c90:	6833      	ldr	r3, [r6, #0]
 8008c92:	6825      	ldr	r5, [r4, #0]
 8008c94:	6961      	ldr	r1, [r4, #20]
 8008c96:	1d18      	adds	r0, r3, #4
 8008c98:	6030      	str	r0, [r6, #0]
 8008c9a:	062e      	lsls	r6, r5, #24
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	d501      	bpl.n	8008ca4 <_printf_i+0x1c0>
 8008ca0:	6019      	str	r1, [r3, #0]
 8008ca2:	e002      	b.n	8008caa <_printf_i+0x1c6>
 8008ca4:	0668      	lsls	r0, r5, #25
 8008ca6:	d5fb      	bpl.n	8008ca0 <_printf_i+0x1bc>
 8008ca8:	8019      	strh	r1, [r3, #0]
 8008caa:	2300      	movs	r3, #0
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	4616      	mov	r6, r2
 8008cb0:	e7bc      	b.n	8008c2c <_printf_i+0x148>
 8008cb2:	6833      	ldr	r3, [r6, #0]
 8008cb4:	1d1a      	adds	r2, r3, #4
 8008cb6:	6032      	str	r2, [r6, #0]
 8008cb8:	681e      	ldr	r6, [r3, #0]
 8008cba:	6862      	ldr	r2, [r4, #4]
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7f7 fa9e 	bl	8000200 <memchr>
 8008cc4:	b108      	cbz	r0, 8008cca <_printf_i+0x1e6>
 8008cc6:	1b80      	subs	r0, r0, r6
 8008cc8:	6060      	str	r0, [r4, #4]
 8008cca:	6863      	ldr	r3, [r4, #4]
 8008ccc:	6123      	str	r3, [r4, #16]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cd4:	e7aa      	b.n	8008c2c <_printf_i+0x148>
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	4632      	mov	r2, r6
 8008cda:	4649      	mov	r1, r9
 8008cdc:	4640      	mov	r0, r8
 8008cde:	47d0      	blx	sl
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d0ad      	beq.n	8008c40 <_printf_i+0x15c>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	079b      	lsls	r3, r3, #30
 8008ce8:	d413      	bmi.n	8008d12 <_printf_i+0x22e>
 8008cea:	68e0      	ldr	r0, [r4, #12]
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	4298      	cmp	r0, r3
 8008cf0:	bfb8      	it	lt
 8008cf2:	4618      	movlt	r0, r3
 8008cf4:	e7a6      	b.n	8008c44 <_printf_i+0x160>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	47d0      	blx	sl
 8008d00:	3001      	adds	r0, #1
 8008d02:	d09d      	beq.n	8008c40 <_printf_i+0x15c>
 8008d04:	3501      	adds	r5, #1
 8008d06:	68e3      	ldr	r3, [r4, #12]
 8008d08:	9903      	ldr	r1, [sp, #12]
 8008d0a:	1a5b      	subs	r3, r3, r1
 8008d0c:	42ab      	cmp	r3, r5
 8008d0e:	dcf2      	bgt.n	8008cf6 <_printf_i+0x212>
 8008d10:	e7eb      	b.n	8008cea <_printf_i+0x206>
 8008d12:	2500      	movs	r5, #0
 8008d14:	f104 0619 	add.w	r6, r4, #25
 8008d18:	e7f5      	b.n	8008d06 <_printf_i+0x222>
 8008d1a:	bf00      	nop
 8008d1c:	080090c9 	.word	0x080090c9
 8008d20:	080090da 	.word	0x080090da

08008d24 <memmove>:
 8008d24:	4288      	cmp	r0, r1
 8008d26:	b510      	push	{r4, lr}
 8008d28:	eb01 0402 	add.w	r4, r1, r2
 8008d2c:	d902      	bls.n	8008d34 <memmove+0x10>
 8008d2e:	4284      	cmp	r4, r0
 8008d30:	4623      	mov	r3, r4
 8008d32:	d807      	bhi.n	8008d44 <memmove+0x20>
 8008d34:	1e43      	subs	r3, r0, #1
 8008d36:	42a1      	cmp	r1, r4
 8008d38:	d008      	beq.n	8008d4c <memmove+0x28>
 8008d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d42:	e7f8      	b.n	8008d36 <memmove+0x12>
 8008d44:	4402      	add	r2, r0
 8008d46:	4601      	mov	r1, r0
 8008d48:	428a      	cmp	r2, r1
 8008d4a:	d100      	bne.n	8008d4e <memmove+0x2a>
 8008d4c:	bd10      	pop	{r4, pc}
 8008d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d56:	e7f7      	b.n	8008d48 <memmove+0x24>

08008d58 <_sbrk_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d06      	ldr	r5, [pc, #24]	@ (8008d74 <_sbrk_r+0x1c>)
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4604      	mov	r4, r0
 8008d60:	4608      	mov	r0, r1
 8008d62:	602b      	str	r3, [r5, #0]
 8008d64:	f7f8 fc62 	bl	800162c <_sbrk>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d102      	bne.n	8008d72 <_sbrk_r+0x1a>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	b103      	cbz	r3, 8008d72 <_sbrk_r+0x1a>
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	bd38      	pop	{r3, r4, r5, pc}
 8008d74:	20001214 	.word	0x20001214

08008d78 <_realloc_r>:
 8008d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	4615      	mov	r5, r2
 8008d80:	460c      	mov	r4, r1
 8008d82:	b921      	cbnz	r1, 8008d8e <_realloc_r+0x16>
 8008d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d88:	4611      	mov	r1, r2
 8008d8a:	f7ff bc59 	b.w	8008640 <_malloc_r>
 8008d8e:	b92a      	cbnz	r2, 8008d9c <_realloc_r+0x24>
 8008d90:	f7ff fbea 	bl	8008568 <_free_r>
 8008d94:	2400      	movs	r4, #0
 8008d96:	4620      	mov	r0, r4
 8008d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d9c:	f000 f81a 	bl	8008dd4 <_malloc_usable_size_r>
 8008da0:	4285      	cmp	r5, r0
 8008da2:	4606      	mov	r6, r0
 8008da4:	d802      	bhi.n	8008dac <_realloc_r+0x34>
 8008da6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008daa:	d8f4      	bhi.n	8008d96 <_realloc_r+0x1e>
 8008dac:	4629      	mov	r1, r5
 8008dae:	4640      	mov	r0, r8
 8008db0:	f7ff fc46 	bl	8008640 <_malloc_r>
 8008db4:	4607      	mov	r7, r0
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d0ec      	beq.n	8008d94 <_realloc_r+0x1c>
 8008dba:	42b5      	cmp	r5, r6
 8008dbc:	462a      	mov	r2, r5
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	bf28      	it	cs
 8008dc2:	4632      	movcs	r2, r6
 8008dc4:	f7ff fbc2 	bl	800854c <memcpy>
 8008dc8:	4621      	mov	r1, r4
 8008dca:	4640      	mov	r0, r8
 8008dcc:	f7ff fbcc 	bl	8008568 <_free_r>
 8008dd0:	463c      	mov	r4, r7
 8008dd2:	e7e0      	b.n	8008d96 <_realloc_r+0x1e>

08008dd4 <_malloc_usable_size_r>:
 8008dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd8:	1f18      	subs	r0, r3, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfbc      	itt	lt
 8008dde:	580b      	ldrlt	r3, [r1, r0]
 8008de0:	18c0      	addlt	r0, r0, r3
 8008de2:	4770      	bx	lr

08008de4 <_init>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	bf00      	nop
 8008de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dea:	bc08      	pop	{r3}
 8008dec:	469e      	mov	lr, r3
 8008dee:	4770      	bx	lr

08008df0 <_fini>:
 8008df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df2:	bf00      	nop
 8008df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df6:	bc08      	pop	{r3}
 8008df8:	469e      	mov	lr, r3
 8008dfa:	4770      	bx	lr
