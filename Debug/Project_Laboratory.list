
Project_Laboratory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009334  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  080094d4  080094d4  0000a4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009978  08009978  0000b2cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009978  08009978  0000a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009980  08009980  0000b2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009980  08009980  0000a980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009984  08009984  0000a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  08009988  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f58  200002cc  08009c54  0000b2cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001224  08009c54  0000c224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010544  00000000  00000000  0000b2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034bc  00000000  00000000  0001b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0001ed00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095c  00000000  00000000  0001f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ced  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001351b  00000000  00000000  00039009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087992  00000000  00000000  0004c524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3eb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037dc  00000000  00000000  000d3efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d76d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094bc 	.word	0x080094bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	080094bc 	.word	0x080094bc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	4b26      	ldr	r3, [pc, #152]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a25      	ldr	r2, [pc, #148]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a17      	ldr	r2, [pc, #92]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_GPIO_Init+0xb4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000600:	4811      	ldr	r0, [pc, #68]	@ (8000648 <MX_GPIO_Init+0xb8>)
 8000602:	f001 ffab 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	480a      	ldr	r0, [pc, #40]	@ (8000648 <MX_GPIO_Init+0xb8>)
 8000620:	f001 fe00 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 8000624:	2301      	movs	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	4619      	mov	r1, r3
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_GPIO_Init+0xbc>)
 8000638:	f001 fdf4 	bl	8002224 <HAL_GPIO_Init>

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40020800 	.word	0x40020800
 800064c:	40020000 	.word	0x40020000

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f001 fc3d 	bl	8001ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f8ab 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f7ff ff97 	bl	8000590 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000662:	f001 fb8b 	bl	8001d7c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000666:	f005 f95d 	bl	8005924 <MX_USB_DEVICE_Init>
  setlocale(LC_CTYPE, "");
 800066a:	4946      	ldr	r1, [pc, #280]	@ (8000784 <main+0x134>)
 800066c:	2002      	movs	r0, #2
 800066e:	f008 faa5 	bl	8008bbc <setlocale>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000678:	4843      	ldr	r0, [pc, #268]	@ (8000788 <main+0x138>)
 800067a:	f001 ff6f 	bl	800255c <HAL_GPIO_WritePin>
  GPIO_PinState button;
  bool started=false;
 800067e:	2300      	movs	r3, #0
 8000680:	77fb      	strb	r3, [r7, #31]
  wchar_t* message_hun = L"ABCDEFGHIJKLMNOPQRSTUVWXYZ \nabcdefghijklmnopqrstuvwxyz \n0123456789 \nárvíztűrő tükörfúrógép \nÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP \n, . - / * + ? ! : \t @\n";
 8000682:	4b42      	ldr	r3, [pc, #264]	@ (800078c <main+0x13c>)
 8000684:	617b      	str	r3, [r7, #20]
  wchar_t* message_eng = L"ABCDEFGHIJKLMNOPQRSTUVWXYZ \nabcdefghijklmnopqrstuvwxyz \n0123456789 \n, . - / * + ? ! : \t @\n";
 8000686:	4b42      	ldr	r3, [pc, #264]	@ (8000790 <main+0x140>)
 8000688:	613b      	str	r3, [r7, #16]
  int num = 0x50;
 800068a:	2350      	movs	r3, #80	@ 0x50
 800068c:	61bb      	str	r3, [r7, #24]
  wchar_t del_str[2];
  del_str[0] = 127;
 800068e:	237f      	movs	r3, #127	@ 0x7f
 8000690:	607b      	str	r3, [r7, #4]
  del_str[1] = L'\0';
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]

  bool test = false;
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]

  HAL_Delay(3000);
 800069a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800069e:	f001 fc8b 	bl	8001fb8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 80006a2:	2101      	movs	r1, #1
 80006a4:	483b      	ldr	r0, [pc, #236]	@ (8000794 <main+0x144>)
 80006a6:	f001 ff41 	bl	800252c <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	73bb      	strb	r3, [r7, #14]

	  if (!test)
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d00d      	beq.n	80006d6 <main+0x86>
	  {
		  if(button == is_pushed)
 80006ba:	4b37      	ldr	r3, [pc, #220]	@ (8000798 <main+0x148>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	7bba      	ldrb	r2, [r7, #14]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d1ee      	bne.n	80006a2 <main+0x52>
		  {
			  /*send_message(message_hun,HUN);
			  send_message(del_str,HUN);
			  USBD_Delay(500);*/

			  send_message(message_eng,ENG);
 80006c4:	4935      	ldr	r1, [pc, #212]	@ (800079c <main+0x14c>)
 80006c6:	6938      	ldr	r0, [r7, #16]
 80006c8:	f000 f8e0 	bl	800088c <send_message>
			  USBD_Delay(500);
 80006cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d0:	f001 fc72 	bl	8001fb8 <HAL_Delay>
 80006d4:	e7e5      	b.n	80006a2 <main+0x52>
		  }
	  }
	  else
	  {
		  if (button == is_pushed && test)
 80006d6:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <main+0x148>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	7bba      	ldrb	r2, [r7, #14]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d110      	bne.n	8000702 <main+0xb2>
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00d      	beq.n	8000702 <main+0xb2>
		  	  {
		  		  started = !started;
 80006e6:	7ffb      	ldrb	r3, [r7, #31]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf14      	ite	ne
 80006ec:	2301      	movne	r3, #1
 80006ee:	2300      	moveq	r3, #0
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f083 0301 	eor.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	77fb      	strb	r3, [r7, #31]
 80006fa:	7ffb      	ldrb	r3, [r7, #31]
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	77fb      	strb	r3, [r7, #31]
		  	  }

		  	  if(started)
 8000702:	7ffb      	ldrb	r3, [r7, #31]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0cc      	beq.n	80006a2 <main+0x52>
		  	  {
		  		  report[2]=num;
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <main+0x150>)
 800070e:	709a      	strb	r2, [r3, #2]
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_set);
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <main+0x154>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071a:	481b      	ldr	r0, [pc, #108]	@ (8000788 <main+0x138>)
 800071c:	f001 ff1e 	bl	800255c <HAL_GPIO_WritePin>

		  		  USBD_HID_Keybaord_SendReport(&hUsbDevice, report, len);
 8000720:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <main+0x158>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	491e      	ldr	r1, [pc, #120]	@ (80007a0 <main+0x150>)
 8000728:	4820      	ldr	r0, [pc, #128]	@ (80007ac <main+0x15c>)
 800072a:	f006 fd13 	bl	8007154 <USBD_HID_Keybaord_SendReport>
		  		  USBD_Delay(100);
 800072e:	2064      	movs	r0, #100	@ 0x64
 8000730:	f001 fc42 	bl	8001fb8 <HAL_Delay>
		  		  num++;
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	3301      	adds	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]

		  		  report[2]= 0x00;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <main+0x150>)
 800073c:	2200      	movs	r2, #0
 800073e:	709a      	strb	r2, [r3, #2]
		  		  USBD_HID_Keybaord_SendReport(&hUsbDevice, report, len);
 8000740:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <main+0x158>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4916      	ldr	r1, [pc, #88]	@ (80007a0 <main+0x150>)
 8000748:	4818      	ldr	r0, [pc, #96]	@ (80007ac <main+0x15c>)
 800074a:	f006 fd03 	bl	8007154 <USBD_HID_Keybaord_SendReport>
		  		  USBD_Delay(100);
 800074e:	2064      	movs	r0, #100	@ 0x64
 8000750:	f001 fc32 	bl	8001fb8 <HAL_Delay>

		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_reset);
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <main+0x160>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075e:	480a      	ldr	r0, [pc, #40]	@ (8000788 <main+0x138>)
 8000760:	f001 fefc 	bl	800255c <HAL_GPIO_WritePin>
		  		  started = !started;
 8000764:	7ffb      	ldrb	r3, [r7, #31]
 8000766:	2b00      	cmp	r3, #0
 8000768:	bf14      	ite	ne
 800076a:	2301      	movne	r3, #1
 800076c:	2300      	moveq	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f083 0301 	eor.w	r3, r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	77fb      	strb	r3, [r7, #31]
 8000778:	7ffb      	ldrb	r3, [r7, #31]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	77fb      	strb	r3, [r7, #31]
	  button = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 8000780:	e78f      	b.n	80006a2 <main+0x52>
 8000782:	bf00      	nop
 8000784:	080094d4 	.word	0x080094d4
 8000788:	40020800 	.word	0x40020800
 800078c:	080094d8 	.word	0x080094d8
 8000790:	08009704 	.word	0x08009704
 8000794:	40020000 	.word	0x40020000
 8000798:	200002e9 	.word	0x200002e9
 800079c:	08009870 	.word	0x08009870
 80007a0:	200002ec 	.word	0x200002ec
 80007a4:	200002e8 	.word	0x200002e8
 80007a8:	20000002 	.word	0x20000002
 80007ac:	200007e0 	.word	0x200007e0
 80007b0:	20000000 	.word	0x20000000

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	@ 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	@ 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f008 f9be 	bl	8008b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <SystemClock_Config+0xd0>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	4a28      	ldr	r2, [pc, #160]	@ (8000884 <SystemClock_Config+0xd0>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e8:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <SystemClock_Config+0xd0>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <SystemClock_Config+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000800:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <SystemClock_Config+0xd4>)
 8000802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <SystemClock_Config+0xd4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000814:	2301      	movs	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000828:	2319      	movs	r3, #25
 800082a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800082c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000830:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000832:	2304      	movs	r3, #4
 8000834:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000836:	2307      	movs	r3, #7
 8000838:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4618      	mov	r0, r3
 8000840:	f003 f8f8 	bl	8003a34 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800084a:	f001 f9e7 	bl	8001c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2302      	movs	r3, #2
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f003 fb5a 	bl	8003f24 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000876:	f001 f9d1 	bl	8001c1c <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3750      	adds	r7, #80	@ 0x50
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <send_message>:

/* USER CODE BEGIN 4 */
void send_message(wchar_t* message, wchar_t* lang)
{
 800088c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000890:	b08b      	sub	sp, #44	@ 0x2c
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	466b      	mov	r3, sp
 800089a:	461e      	mov	r6, r3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_set);
 800089c:	4b5e      	ldr	r3, [pc, #376]	@ (8000a18 <send_message+0x18c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a6:	485d      	ldr	r0, [pc, #372]	@ (8000a1c <send_message+0x190>)
 80008a8:	f001 fe58 	bl	800255c <HAL_GPIO_WritePin>

	int length = wcslen(message);
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f008 f95d 	bl	8008b6c <wcslen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	623b      	str	r3, [r7, #32]
	int t[length+1];
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	1c59      	adds	r1, r3, #1
 80008ba:	1e4b      	subs	r3, r1, #1
 80008bc:	61fb      	str	r3, [r7, #28]
 80008be:	460a      	mov	r2, r1
 80008c0:	2300      	movs	r3, #0
 80008c2:	603a      	str	r2, [r7, #0]
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	f04f 0200 	mov.w	r2, #0
 80008ca:	f04f 0300 	mov.w	r3, #0
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	0143      	lsls	r3, r0, #5
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80008d8:	6838      	ldr	r0, [r7, #0]
 80008da:	0142      	lsls	r2, r0, #5
 80008dc:	460a      	mov	r2, r1
 80008de:	2300      	movs	r3, #0
 80008e0:	4692      	mov	sl, r2
 80008e2:	469b      	mov	fp, r3
 80008e4:	f04f 0200 	mov.w	r2, #0
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80008f0:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80008f4:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80008f8:	460b      	mov	r3, r1
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	3307      	adds	r3, #7
 80008fe:	08db      	lsrs	r3, r3, #3
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	ebad 0d03 	sub.w	sp, sp, r3
 8000906:	466b      	mov	r3, sp
 8000908:	3303      	adds	r3, #3
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	61bb      	str	r3, [r7, #24]
	int is_special[length+1];
 8000910:	6a3b      	ldr	r3, [r7, #32]
 8000912:	1c59      	adds	r1, r3, #1
 8000914:	1e4b      	subs	r3, r1, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	460a      	mov	r2, r1
 800091a:	2300      	movs	r3, #0
 800091c:	4690      	mov	r8, r2
 800091e:	4699      	mov	r9, r3
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	f04f 0300 	mov.w	r3, #0
 8000928:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800092c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000930:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000934:	460a      	mov	r2, r1
 8000936:	2300      	movs	r3, #0
 8000938:	4614      	mov	r4, r2
 800093a:	461d      	mov	r5, r3
 800093c:	f04f 0200 	mov.w	r2, #0
 8000940:	f04f 0300 	mov.w	r3, #0
 8000944:	016b      	lsls	r3, r5, #5
 8000946:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800094a:	0162      	lsls	r2, r4, #5
 800094c:	460b      	mov	r3, r1
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	3307      	adds	r3, #7
 8000952:	08db      	lsrs	r3, r3, #3
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	ebad 0d03 	sub.w	sp, sp, r3
 800095a:	466b      	mov	r3, sp
 800095c:	3303      	adds	r3, #3
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	613b      	str	r3, [r7, #16]
	if(wcscmp(lang,HUN)==1)
 8000964:	492e      	ldr	r1, [pc, #184]	@ (8000a20 <send_message+0x194>)
 8000966:	68b8      	ldr	r0, [r7, #8]
 8000968:	f008 f8f4 	bl	8008b54 <wcscmp>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d105      	bne.n	800097e <send_message+0xf2>
		convert_message_hun(message, t, is_special);
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	69b9      	ldr	r1, [r7, #24]
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f000 f85c 	bl	8000a34 <convert_message_hun>
 800097c:	e004      	b.n	8000988 <send_message+0xfc>
	else
		convert_message_eng(message, t, is_special);
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	69b9      	ldr	r1, [r7, #24]
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f000 fdfe 	bl	8001584 <convert_message_eng>
	for(int i=0; i<length+1;++i)
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
 800098c:	e027      	b.n	80009de <send_message+0x152>
	{
		if(i!=0 && t[i-1]=='\n')
 800098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000990:	2b00      	cmp	r3, #0
 8000992:	d009      	beq.n	80009a8 <send_message+0x11c>
 8000994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800099e:	2b0a      	cmp	r3, #10
 80009a0:	d102      	bne.n	80009a8 <send_message+0x11c>
			USBD_Delay(50);
 80009a2:	2032      	movs	r0, #50	@ 0x32
 80009a4:	f001 fb08 	bl	8001fb8 <HAL_Delay>

		report[2] = t[i];
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <send_message+0x198>)
 80009b4:	709a      	strb	r2, [r3, #2]
		report[0] = is_special[i];
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <send_message+0x198>)
 80009c2:	701a      	strb	r2, [r3, #0]

		USBD_HID_Keybaord_SendReport(&hUsbDevice, report, len);
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <send_message+0x19c>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4916      	ldr	r1, [pc, #88]	@ (8000a24 <send_message+0x198>)
 80009cc:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <send_message+0x1a0>)
 80009ce:	f006 fbc1 	bl	8007154 <USBD_HID_Keybaord_SendReport>
		USBD_Delay(150);
 80009d2:	2096      	movs	r0, #150	@ 0x96
 80009d4:	f001 faf0 	bl	8001fb8 <HAL_Delay>
	for(int i=0; i<length+1;++i)
 80009d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009da:	3301      	adds	r3, #1
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80009de:	6a3a      	ldr	r2, [r7, #32]
 80009e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e2:	429a      	cmp	r2, r3
 80009e4:	dad3      	bge.n	800098e <send_message+0x102>
	}

	report[0] = 0x00;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <send_message+0x198>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	USBD_HID_Keybaord_SendReport(&hUsbDevice, report, len);
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <send_message+0x19c>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	490c      	ldr	r1, [pc, #48]	@ (8000a24 <send_message+0x198>)
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <send_message+0x1a0>)
 80009f6:	f006 fbad 	bl	8007154 <USBD_HID_Keybaord_SendReport>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_reset);
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <send_message+0x1a4>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <send_message+0x190>)
 8000a06:	f001 fda9 	bl	800255c <HAL_GPIO_WritePin>
 8000a0a:	46b5      	mov	sp, r6
}
 8000a0c:	bf00      	nop
 8000a0e:	372c      	adds	r7, #44	@ 0x2c
 8000a10:	46bd      	mov	sp, r7
 8000a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a16:	bf00      	nop
 8000a18:	200002e8 	.word	0x200002e8
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	08009890 	.word	0x08009890
 8000a24:	200002ec 	.word	0x200002ec
 8000a28:	20000002 	.word	0x20000002
 8000a2c:	200007e0 	.word	0x200007e0
 8000a30:	20000000 	.word	0x20000000

08000a34 <convert_message_hun>:

int* convert_message_hun(wchar_t* message, int *t, int* is_special)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	int length = wcslen(message);
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f008 f893 	bl	8008b6c <wcslen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	613b      	str	r3, [r7, #16]

	for(int i=0; i<length; ++i)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	f000 bd82 	b.w	8001556 <convert_message_hun+0xb22>
	{
		is_special[i] = 0x00;
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
		switch (message[i])
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4413      	add	r3, r2
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3b09      	subs	r3, #9
 8000a6a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000a6e:	f200 8568 	bhi.w	8001542 <convert_message_hun+0xb0e>
 8000a72:	a201      	add	r2, pc, #4	@ (adr r2, 8000a78 <convert_message_hun+0x44>)
 8000a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a78:	08001469 	.word	0x08001469
 8000a7c:	080013ab 	.word	0x080013ab
 8000a80:	08001543 	.word	0x08001543
 8000a84:	08001543 	.word	0x08001543
 8000a88:	08001543 	.word	0x08001543
 8000a8c:	08001543 	.word	0x08001543
 8000a90:	08001543 	.word	0x08001543
 8000a94:	08001543 	.word	0x08001543
 8000a98:	08001543 	.word	0x08001543
 8000a9c:	08001543 	.word	0x08001543
 8000aa0:	08001543 	.word	0x08001543
 8000aa4:	08001543 	.word	0x08001543
 8000aa8:	08001543 	.word	0x08001543
 8000aac:	08001543 	.word	0x08001543
 8000ab0:	08001543 	.word	0x08001543
 8000ab4:	08001543 	.word	0x08001543
 8000ab8:	08001543 	.word	0x08001543
 8000abc:	08001543 	.word	0x08001543
 8000ac0:	08001543 	.word	0x08001543
 8000ac4:	08001543 	.word	0x08001543
 8000ac8:	08001543 	.word	0x08001543
 8000acc:	08001543 	.word	0x08001543
 8000ad0:	08001543 	.word	0x08001543
 8000ad4:	080013b9 	.word	0x080013b9
 8000ad8:	08001435 	.word	0x08001435
 8000adc:	08001543 	.word	0x08001543
 8000ae0:	08001543 	.word	0x08001543
 8000ae4:	08001543 	.word	0x08001543
 8000ae8:	08001543 	.word	0x08001543
 8000aec:	08001543 	.word	0x08001543
 8000af0:	08001543 	.word	0x08001543
 8000af4:	08001543 	.word	0x08001543
 8000af8:	08001543 	.word	0x08001543
 8000afc:	080013ff 	.word	0x080013ff
 8000b00:	0800140d 	.word	0x0800140d
 8000b04:	080013c7 	.word	0x080013c7
 8000b08:	080013e3 	.word	0x080013e3
 8000b0c:	080013d5 	.word	0x080013d5
 8000b10:	080013f1 	.word	0x080013f1
 8000b14:	080014b7 	.word	0x080014b7
 8000b18:	080014c5 	.word	0x080014c5
 8000b1c:	080014d3 	.word	0x080014d3
 8000b20:	080014e1 	.word	0x080014e1
 8000b24:	080014ef 	.word	0x080014ef
 8000b28:	080014fd 	.word	0x080014fd
 8000b2c:	0800150b 	.word	0x0800150b
 8000b30:	08001519 	.word	0x08001519
 8000b34:	08001527 	.word	0x08001527
 8000b38:	08001535 	.word	0x08001535
 8000b3c:	0800144f 	.word	0x0800144f
 8000b40:	08001543 	.word	0x08001543
 8000b44:	08001543 	.word	0x08001543
 8000b48:	08001543 	.word	0x08001543
 8000b4c:	08001543 	.word	0x08001543
 8000b50:	0800141b 	.word	0x0800141b
 8000b54:	0800149d 	.word	0x0800149d
 8000b58:	0800101d 	.word	0x0800101d
 8000b5c:	08001037 	.word	0x08001037
 8000b60:	08001051 	.word	0x08001051
 8000b64:	0800106b 	.word	0x0800106b
 8000b68:	08001085 	.word	0x08001085
 8000b6c:	0800109f 	.word	0x0800109f
 8000b70:	080010b9 	.word	0x080010b9
 8000b74:	080010d3 	.word	0x080010d3
 8000b78:	080010ed 	.word	0x080010ed
 8000b7c:	08001107 	.word	0x08001107
 8000b80:	08001121 	.word	0x08001121
 8000b84:	0800113b 	.word	0x0800113b
 8000b88:	08001155 	.word	0x08001155
 8000b8c:	0800116f 	.word	0x0800116f
 8000b90:	08001189 	.word	0x08001189
 8000b94:	080011a3 	.word	0x080011a3
 8000b98:	080011bd 	.word	0x080011bd
 8000b9c:	080011d7 	.word	0x080011d7
 8000ba0:	080011f1 	.word	0x080011f1
 8000ba4:	0800120b 	.word	0x0800120b
 8000ba8:	08001225 	.word	0x08001225
 8000bac:	0800123f 	.word	0x0800123f
 8000bb0:	08001259 	.word	0x08001259
 8000bb4:	08001273 	.word	0x08001273
 8000bb8:	0800128d 	.word	0x0800128d
 8000bbc:	080012a7 	.word	0x080012a7
 8000bc0:	08001543 	.word	0x08001543
 8000bc4:	08001543 	.word	0x08001543
 8000bc8:	08001543 	.word	0x08001543
 8000bcc:	08001543 	.word	0x08001543
 8000bd0:	08001543 	.word	0x08001543
 8000bd4:	08001543 	.word	0x08001543
 8000bd8:	08001029 	.word	0x08001029
 8000bdc:	08001043 	.word	0x08001043
 8000be0:	0800105d 	.word	0x0800105d
 8000be4:	08001077 	.word	0x08001077
 8000be8:	08001091 	.word	0x08001091
 8000bec:	080010ab 	.word	0x080010ab
 8000bf0:	080010c5 	.word	0x080010c5
 8000bf4:	080010df 	.word	0x080010df
 8000bf8:	080010f9 	.word	0x080010f9
 8000bfc:	08001113 	.word	0x08001113
 8000c00:	0800112d 	.word	0x0800112d
 8000c04:	08001147 	.word	0x08001147
 8000c08:	08001161 	.word	0x08001161
 8000c0c:	0800117b 	.word	0x0800117b
 8000c10:	08001195 	.word	0x08001195
 8000c14:	080011af 	.word	0x080011af
 8000c18:	080011c9 	.word	0x080011c9
 8000c1c:	080011e3 	.word	0x080011e3
 8000c20:	080011fd 	.word	0x080011fd
 8000c24:	08001217 	.word	0x08001217
 8000c28:	08001231 	.word	0x08001231
 8000c2c:	0800124b 	.word	0x0800124b
 8000c30:	08001265 	.word	0x08001265
 8000c34:	0800127f 	.word	0x0800127f
 8000c38:	08001299 	.word	0x08001299
 8000c3c:	080012b3 	.word	0x080012b3
 8000c40:	08001543 	.word	0x08001543
 8000c44:	08001543 	.word	0x08001543
 8000c48:	08001543 	.word	0x08001543
 8000c4c:	08001543 	.word	0x08001543
 8000c50:	08001483 	.word	0x08001483
 8000c54:	08001543 	.word	0x08001543
 8000c58:	08001543 	.word	0x08001543
 8000c5c:	08001543 	.word	0x08001543
 8000c60:	08001543 	.word	0x08001543
 8000c64:	08001543 	.word	0x08001543
 8000c68:	08001543 	.word	0x08001543
 8000c6c:	08001543 	.word	0x08001543
 8000c70:	08001543 	.word	0x08001543
 8000c74:	08001543 	.word	0x08001543
 8000c78:	08001543 	.word	0x08001543
 8000c7c:	08001543 	.word	0x08001543
 8000c80:	08001543 	.word	0x08001543
 8000c84:	08001543 	.word	0x08001543
 8000c88:	08001543 	.word	0x08001543
 8000c8c:	08001543 	.word	0x08001543
 8000c90:	08001543 	.word	0x08001543
 8000c94:	08001543 	.word	0x08001543
 8000c98:	08001543 	.word	0x08001543
 8000c9c:	08001543 	.word	0x08001543
 8000ca0:	08001543 	.word	0x08001543
 8000ca4:	08001543 	.word	0x08001543
 8000ca8:	08001543 	.word	0x08001543
 8000cac:	08001543 	.word	0x08001543
 8000cb0:	08001543 	.word	0x08001543
 8000cb4:	08001543 	.word	0x08001543
 8000cb8:	08001543 	.word	0x08001543
 8000cbc:	08001543 	.word	0x08001543
 8000cc0:	08001543 	.word	0x08001543
 8000cc4:	08001543 	.word	0x08001543
 8000cc8:	08001543 	.word	0x08001543
 8000ccc:	08001543 	.word	0x08001543
 8000cd0:	08001543 	.word	0x08001543
 8000cd4:	08001543 	.word	0x08001543
 8000cd8:	08001543 	.word	0x08001543
 8000cdc:	08001543 	.word	0x08001543
 8000ce0:	08001543 	.word	0x08001543
 8000ce4:	08001543 	.word	0x08001543
 8000ce8:	08001543 	.word	0x08001543
 8000cec:	08001543 	.word	0x08001543
 8000cf0:	08001543 	.word	0x08001543
 8000cf4:	08001543 	.word	0x08001543
 8000cf8:	08001543 	.word	0x08001543
 8000cfc:	08001543 	.word	0x08001543
 8000d00:	08001543 	.word	0x08001543
 8000d04:	08001543 	.word	0x08001543
 8000d08:	08001543 	.word	0x08001543
 8000d0c:	08001543 	.word	0x08001543
 8000d10:	08001543 	.word	0x08001543
 8000d14:	08001543 	.word	0x08001543
 8000d18:	08001543 	.word	0x08001543
 8000d1c:	08001543 	.word	0x08001543
 8000d20:	08001543 	.word	0x08001543
 8000d24:	08001543 	.word	0x08001543
 8000d28:	08001543 	.word	0x08001543
 8000d2c:	08001543 	.word	0x08001543
 8000d30:	08001543 	.word	0x08001543
 8000d34:	08001543 	.word	0x08001543
 8000d38:	08001543 	.word	0x08001543
 8000d3c:	08001543 	.word	0x08001543
 8000d40:	08001543 	.word	0x08001543
 8000d44:	08001543 	.word	0x08001543
 8000d48:	08001543 	.word	0x08001543
 8000d4c:	08001543 	.word	0x08001543
 8000d50:	08001543 	.word	0x08001543
 8000d54:	08001543 	.word	0x08001543
 8000d58:	0800135d 	.word	0x0800135d
 8000d5c:	08001543 	.word	0x08001543
 8000d60:	08001543 	.word	0x08001543
 8000d64:	08001543 	.word	0x08001543
 8000d68:	08001543 	.word	0x08001543
 8000d6c:	08001543 	.word	0x08001543
 8000d70:	08001543 	.word	0x08001543
 8000d74:	08001543 	.word	0x08001543
 8000d78:	08001343 	.word	0x08001343
 8000d7c:	08001543 	.word	0x08001543
 8000d80:	08001543 	.word	0x08001543
 8000d84:	08001543 	.word	0x08001543
 8000d88:	08001391 	.word	0x08001391
 8000d8c:	08001543 	.word	0x08001543
 8000d90:	08001543 	.word	0x08001543
 8000d94:	08001543 	.word	0x08001543
 8000d98:	08001543 	.word	0x08001543
 8000d9c:	08001543 	.word	0x08001543
 8000da0:	080012f5 	.word	0x080012f5
 8000da4:	08001543 	.word	0x08001543
 8000da8:	08001543 	.word	0x08001543
 8000dac:	080012c1 	.word	0x080012c1
 8000db0:	08001543 	.word	0x08001543
 8000db4:	08001543 	.word	0x08001543
 8000db8:	08001543 	.word	0x08001543
 8000dbc:	08001329 	.word	0x08001329
 8000dc0:	08001543 	.word	0x08001543
 8000dc4:	080012db 	.word	0x080012db
 8000dc8:	08001543 	.word	0x08001543
 8000dcc:	08001543 	.word	0x08001543
 8000dd0:	08001543 	.word	0x08001543
 8000dd4:	08001543 	.word	0x08001543
 8000dd8:	08001369 	.word	0x08001369
 8000ddc:	08001543 	.word	0x08001543
 8000de0:	08001543 	.word	0x08001543
 8000de4:	08001543 	.word	0x08001543
 8000de8:	08001543 	.word	0x08001543
 8000dec:	08001543 	.word	0x08001543
 8000df0:	08001543 	.word	0x08001543
 8000df4:	08001543 	.word	0x08001543
 8000df8:	0800134f 	.word	0x0800134f
 8000dfc:	08001543 	.word	0x08001543
 8000e00:	08001543 	.word	0x08001543
 8000e04:	08001543 	.word	0x08001543
 8000e08:	0800139d 	.word	0x0800139d
 8000e0c:	08001543 	.word	0x08001543
 8000e10:	08001543 	.word	0x08001543
 8000e14:	08001543 	.word	0x08001543
 8000e18:	08001543 	.word	0x08001543
 8000e1c:	08001543 	.word	0x08001543
 8000e20:	08001301 	.word	0x08001301
 8000e24:	08001543 	.word	0x08001543
 8000e28:	08001543 	.word	0x08001543
 8000e2c:	080012cd 	.word	0x080012cd
 8000e30:	08001543 	.word	0x08001543
 8000e34:	08001543 	.word	0x08001543
 8000e38:	08001543 	.word	0x08001543
 8000e3c:	08001335 	.word	0x08001335
 8000e40:	08001543 	.word	0x08001543
 8000e44:	080012e7 	.word	0x080012e7
 8000e48:	08001543 	.word	0x08001543
 8000e4c:	08001543 	.word	0x08001543
 8000e50:	08001543 	.word	0x08001543
 8000e54:	08001543 	.word	0x08001543
 8000e58:	08001543 	.word	0x08001543
 8000e5c:	08001543 	.word	0x08001543
 8000e60:	08001543 	.word	0x08001543
 8000e64:	08001543 	.word	0x08001543
 8000e68:	08001543 	.word	0x08001543
 8000e6c:	08001543 	.word	0x08001543
 8000e70:	08001543 	.word	0x08001543
 8000e74:	08001543 	.word	0x08001543
 8000e78:	08001543 	.word	0x08001543
 8000e7c:	08001543 	.word	0x08001543
 8000e80:	08001543 	.word	0x08001543
 8000e84:	08001543 	.word	0x08001543
 8000e88:	08001543 	.word	0x08001543
 8000e8c:	08001543 	.word	0x08001543
 8000e90:	08001543 	.word	0x08001543
 8000e94:	08001543 	.word	0x08001543
 8000e98:	08001543 	.word	0x08001543
 8000e9c:	08001543 	.word	0x08001543
 8000ea0:	08001543 	.word	0x08001543
 8000ea4:	08001543 	.word	0x08001543
 8000ea8:	08001543 	.word	0x08001543
 8000eac:	08001543 	.word	0x08001543
 8000eb0:	08001543 	.word	0x08001543
 8000eb4:	08001543 	.word	0x08001543
 8000eb8:	08001543 	.word	0x08001543
 8000ebc:	08001543 	.word	0x08001543
 8000ec0:	08001543 	.word	0x08001543
 8000ec4:	08001543 	.word	0x08001543
 8000ec8:	08001543 	.word	0x08001543
 8000ecc:	08001543 	.word	0x08001543
 8000ed0:	08001543 	.word	0x08001543
 8000ed4:	08001543 	.word	0x08001543
 8000ed8:	08001543 	.word	0x08001543
 8000edc:	08001543 	.word	0x08001543
 8000ee0:	08001543 	.word	0x08001543
 8000ee4:	08001543 	.word	0x08001543
 8000ee8:	08001543 	.word	0x08001543
 8000eec:	08001543 	.word	0x08001543
 8000ef0:	08001543 	.word	0x08001543
 8000ef4:	08001543 	.word	0x08001543
 8000ef8:	08001543 	.word	0x08001543
 8000efc:	08001543 	.word	0x08001543
 8000f00:	08001543 	.word	0x08001543
 8000f04:	08001543 	.word	0x08001543
 8000f08:	08001543 	.word	0x08001543
 8000f0c:	08001543 	.word	0x08001543
 8000f10:	08001543 	.word	0x08001543
 8000f14:	08001543 	.word	0x08001543
 8000f18:	08001543 	.word	0x08001543
 8000f1c:	08001543 	.word	0x08001543
 8000f20:	08001543 	.word	0x08001543
 8000f24:	08001543 	.word	0x08001543
 8000f28:	08001543 	.word	0x08001543
 8000f2c:	08001543 	.word	0x08001543
 8000f30:	08001543 	.word	0x08001543
 8000f34:	08001543 	.word	0x08001543
 8000f38:	08001543 	.word	0x08001543
 8000f3c:	08001543 	.word	0x08001543
 8000f40:	08001543 	.word	0x08001543
 8000f44:	08001543 	.word	0x08001543
 8000f48:	08001543 	.word	0x08001543
 8000f4c:	08001543 	.word	0x08001543
 8000f50:	08001543 	.word	0x08001543
 8000f54:	08001543 	.word	0x08001543
 8000f58:	08001543 	.word	0x08001543
 8000f5c:	08001543 	.word	0x08001543
 8000f60:	08001543 	.word	0x08001543
 8000f64:	08001543 	.word	0x08001543
 8000f68:	08001543 	.word	0x08001543
 8000f6c:	08001543 	.word	0x08001543
 8000f70:	08001543 	.word	0x08001543
 8000f74:	08001543 	.word	0x08001543
 8000f78:	08001543 	.word	0x08001543
 8000f7c:	08001543 	.word	0x08001543
 8000f80:	08001543 	.word	0x08001543
 8000f84:	08001543 	.word	0x08001543
 8000f88:	08001543 	.word	0x08001543
 8000f8c:	08001543 	.word	0x08001543
 8000f90:	08001543 	.word	0x08001543
 8000f94:	0800130f 	.word	0x0800130f
 8000f98:	0800131b 	.word	0x0800131b
 8000f9c:	08001543 	.word	0x08001543
 8000fa0:	08001543 	.word	0x08001543
 8000fa4:	08001543 	.word	0x08001543
 8000fa8:	08001543 	.word	0x08001543
 8000fac:	08001543 	.word	0x08001543
 8000fb0:	08001543 	.word	0x08001543
 8000fb4:	08001543 	.word	0x08001543
 8000fb8:	08001543 	.word	0x08001543
 8000fbc:	08001543 	.word	0x08001543
 8000fc0:	08001543 	.word	0x08001543
 8000fc4:	08001543 	.word	0x08001543
 8000fc8:	08001543 	.word	0x08001543
 8000fcc:	08001543 	.word	0x08001543
 8000fd0:	08001543 	.word	0x08001543
 8000fd4:	08001543 	.word	0x08001543
 8000fd8:	08001543 	.word	0x08001543
 8000fdc:	08001543 	.word	0x08001543
 8000fe0:	08001543 	.word	0x08001543
 8000fe4:	08001543 	.word	0x08001543
 8000fe8:	08001543 	.word	0x08001543
 8000fec:	08001543 	.word	0x08001543
 8000ff0:	08001543 	.word	0x08001543
 8000ff4:	08001543 	.word	0x08001543
 8000ff8:	08001543 	.word	0x08001543
 8000ffc:	08001543 	.word	0x08001543
 8001000:	08001543 	.word	0x08001543
 8001004:	08001543 	.word	0x08001543
 8001008:	08001543 	.word	0x08001543
 800100c:	08001543 	.word	0x08001543
 8001010:	08001543 	.word	0x08001543
 8001014:	08001377 	.word	0x08001377
 8001018:	08001383 	.word	0x08001383
		{
		    case 'A': is_special[i] = 0x02;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	2202      	movs	r2, #2
 8001026:	601a      	str	r2, [r3, #0]
		    case 'a': t[i] = 0x04; break;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	2204      	movs	r2, #4
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e28c      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'B': is_special[i] = 0x02;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	2202      	movs	r2, #2
 8001040:	601a      	str	r2, [r3, #0]
		    case 'b': t[i] = 0x05; break;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	4413      	add	r3, r2
 800104a:	2205      	movs	r2, #5
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e27f      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'C': is_special[i] = 0x02;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	2202      	movs	r2, #2
 800105a:	601a      	str	r2, [r3, #0]
		    case 'c': t[i] = 0x06; break;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	4413      	add	r3, r2
 8001064:	2206      	movs	r2, #6
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	e272      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'D': is_special[i] = 0x02;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	2202      	movs	r2, #2
 8001074:	601a      	str	r2, [r3, #0]
		    case 'd': t[i] = 0x07; break;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	4413      	add	r3, r2
 800107e:	2207      	movs	r2, #7
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e265      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'E': is_special[i] = 0x02;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	2202      	movs	r2, #2
 800108e:	601a      	str	r2, [r3, #0]
		    case 'e': t[i] = 0x08; break;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	4413      	add	r3, r2
 8001098:	2208      	movs	r2, #8
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e258      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'F': is_special[i] = 0x02;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	2202      	movs	r2, #2
 80010a8:	601a      	str	r2, [r3, #0]
		    case 'f': t[i] = 0x09; break;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	2209      	movs	r2, #9
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e24b      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'G': is_special[i] = 0x02;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	2202      	movs	r2, #2
 80010c2:	601a      	str	r2, [r3, #0]
		    case 'g': t[i] = 0x0a; break;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	4413      	add	r3, r2
 80010cc:	220a      	movs	r2, #10
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e23e      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'H': is_special[i] = 0x02;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	2202      	movs	r2, #2
 80010dc:	601a      	str	r2, [r3, #0]
		    case 'h': t[i] = 0x0b; break;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	4413      	add	r3, r2
 80010e6:	220b      	movs	r2, #11
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e231      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'I': is_special[i] = 0x02;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	2202      	movs	r2, #2
 80010f6:	601a      	str	r2, [r3, #0]
		    case 'i': t[i] = 0x0c; break;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	4413      	add	r3, r2
 8001100:	220c      	movs	r2, #12
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e224      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'J': is_special[i] = 0x02;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	2202      	movs	r2, #2
 8001110:	601a      	str	r2, [r3, #0]
		    case 'j': t[i] = 0x0d; break;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	4413      	add	r3, r2
 800111a:	220d      	movs	r2, #13
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e217      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'K': is_special[i] = 0x02;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	2202      	movs	r2, #2
 800112a:	601a      	str	r2, [r3, #0]
		    case 'k': t[i] = 0x0e; break;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	220e      	movs	r2, #14
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e20a      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'L': is_special[i] = 0x02;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	2202      	movs	r2, #2
 8001144:	601a      	str	r2, [r3, #0]
		    case 'l': t[i] = 0x0f; break;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	4413      	add	r3, r2
 800114e:	220f      	movs	r2, #15
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e1fd      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'M': is_special[i] = 0x02;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	2202      	movs	r2, #2
 800115e:	601a      	str	r2, [r3, #0]
		    case 'm': t[i] = 0x10; break;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	4413      	add	r3, r2
 8001168:	2210      	movs	r2, #16
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e1f0      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'N': is_special[i] = 0x02;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	2202      	movs	r2, #2
 8001178:	601a      	str	r2, [r3, #0]
		    case 'n': t[i] = 0x11; break;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	4413      	add	r3, r2
 8001182:	2211      	movs	r2, #17
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	e1e3      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'O': is_special[i] = 0x02;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	2202      	movs	r2, #2
 8001192:	601a      	str	r2, [r3, #0]
		    case 'o': t[i] = 0x12; break;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	4413      	add	r3, r2
 800119c:	2212      	movs	r2, #18
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e1d6      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'P': is_special[i] = 0x02;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	2202      	movs	r2, #2
 80011ac:	601a      	str	r2, [r3, #0]
		    case 'p': t[i] = 0x13; break;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	4413      	add	r3, r2
 80011b6:	2213      	movs	r2, #19
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e1c9      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'Q': is_special[i] = 0x02;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	2202      	movs	r2, #2
 80011c6:	601a      	str	r2, [r3, #0]
		    case 'q': t[i] = 0x14; break;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	4413      	add	r3, r2
 80011d0:	2214      	movs	r2, #20
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e1bc      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'R': is_special[i] = 0x02;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	2202      	movs	r2, #2
 80011e0:	601a      	str	r2, [r3, #0]
		    case 'r': t[i] = 0x15; break;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	2215      	movs	r2, #21
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e1af      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'S': is_special[i] = 0x02;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	2202      	movs	r2, #2
 80011fa:	601a      	str	r2, [r3, #0]
		    case 's': t[i] = 0x16; break;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	2216      	movs	r2, #22
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e1a2      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'T': is_special[i] = 0x02;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	2202      	movs	r2, #2
 8001214:	601a      	str	r2, [r3, #0]
		    case 't': t[i] = 0x17; break;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	4413      	add	r3, r2
 800121e:	2217      	movs	r2, #23
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e195      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'U': is_special[i] = 0x02;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	4413      	add	r3, r2
 800122c:	2202      	movs	r2, #2
 800122e:	601a      	str	r2, [r3, #0]
		    case 'u': t[i] = 0x18; break;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	4413      	add	r3, r2
 8001238:	2218      	movs	r2, #24
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e188      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'V': is_special[i] = 0x02;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	2202      	movs	r2, #2
 8001248:	601a      	str	r2, [r3, #0]
		    case 'v': t[i] = 0x19; break;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	2219      	movs	r2, #25
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e17b      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'W': is_special[i] = 0x02;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	2202      	movs	r2, #2
 8001262:	601a      	str	r2, [r3, #0]
		    case 'w': t[i] = 0x1a; break;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	221a      	movs	r2, #26
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	e16e      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'X': is_special[i] = 0x02;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	2202      	movs	r2, #2
 800127c:	601a      	str	r2, [r3, #0]
		    case 'x': t[i] = 0x1b; break;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	4413      	add	r3, r2
 8001286:	221b      	movs	r2, #27
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e161      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'Y': is_special[i] = 0x02;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	2202      	movs	r2, #2
 8001296:	601a      	str	r2, [r3, #0]
		    case 'y': t[i] = 0x1d; break;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	4413      	add	r3, r2
 80012a0:	221d      	movs	r2, #29
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e154      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 'Z': is_special[i] = 0x02;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	2202      	movs	r2, #2
 80012b0:	601a      	str	r2, [r3, #0]
		    case 'z': t[i] = 0x1c; break;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	4413      	add	r3, r2
 80012ba:	221c      	movs	r2, #28
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e147      	b.n	8001550 <convert_message_hun+0xb1c>

		    case L'Ö': is_special[i] = 0x20;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	2220      	movs	r2, #32
 80012ca:	601a      	str	r2, [r3, #0]
		    case L'ö': t[i] = 0x27; break;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	4413      	add	r3, r2
 80012d4:	2227      	movs	r2, #39	@ 0x27
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e13a      	b.n	8001550 <convert_message_hun+0xb1c>
			case L'Ü': is_special[i] = 0x20;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	2220      	movs	r2, #32
 80012e4:	601a      	str	r2, [r3, #0]
			case L'ü': t[i] = 0x2d; break;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	222d      	movs	r2, #45	@ 0x2d
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e12d      	b.n	8001550 <convert_message_hun+0xb1c>
			case L'Ó': is_special[i] = 0x20;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	2220      	movs	r2, #32
 80012fe:	601a      	str	r2, [r3, #0]
			case L'ó': t[i] = 0x2e; break;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	4413      	add	r3, r2
 8001308:	222e      	movs	r2, #46	@ 0x2e
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e120      	b.n	8001550 <convert_message_hun+0xb1c>
			case L'Ő': is_special[i] = 0x20;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	2220      	movs	r2, #32
 8001318:	601a      	str	r2, [r3, #0]
			case L'ő': t[i] = 0x2f; break;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	4413      	add	r3, r2
 8001322:	222f      	movs	r2, #47	@ 0x2f
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e113      	b.n	8001550 <convert_message_hun+0xb1c>
			case L'Ú': is_special[i] = 0x20;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	2220      	movs	r2, #32
 8001332:	601a      	str	r2, [r3, #0]
			case L'ú': t[i] = 0x30; break;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	4413      	add	r3, r2
 800133c:	2230      	movs	r2, #48	@ 0x30
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e106      	b.n	8001550 <convert_message_hun+0xb1c>
			case L'É': is_special[i] = 0x20;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	2220      	movs	r2, #32
 800134c:	601a      	str	r2, [r3, #0]
			case L'é': t[i] = 0x33; break;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	4413      	add	r3, r2
 8001356:	2233      	movs	r2, #51	@ 0x33
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e0f9      	b.n	8001550 <convert_message_hun+0xb1c>
			case L'Á': is_special[i] = 0x20;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	2220      	movs	r2, #32
 8001366:	601a      	str	r2, [r3, #0]
			case L'á': t[i] = 0x34; break;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	2234      	movs	r2, #52	@ 0x34
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e0ec      	b.n	8001550 <convert_message_hun+0xb1c>
			case L'Ű': is_special[i] = 0x20;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	2220      	movs	r2, #32
 8001380:	601a      	str	r2, [r3, #0]
			case L'ű': t[i] = 0x31; break;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	2231      	movs	r2, #49	@ 0x31
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e0df      	b.n	8001550 <convert_message_hun+0xb1c>
			case L'Í': is_special[i] = 0x20;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	2220      	movs	r2, #32
 800139a:	601a      	str	r2, [r3, #0]
			case L'í': t[i] = 0x64; break;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	4413      	add	r3, r2
 80013a4:	2264      	movs	r2, #100	@ 0x64
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e0d2      	b.n	8001550 <convert_message_hun+0xb1c>

		    case '\n': t[i] = 0x28; break;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	4413      	add	r3, r2
 80013b2:	2228      	movs	r2, #40	@ 0x28
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e0cb      	b.n	8001550 <convert_message_hun+0xb1c>
		    case ' ': t[i] = 0x2c; break;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	4413      	add	r3, r2
 80013c0:	222c      	movs	r2, #44	@ 0x2c
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e0c4      	b.n	8001550 <convert_message_hun+0xb1c>
		    case ',': t[i] = 0x36; break;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	4413      	add	r3, r2
 80013ce:	2236      	movs	r2, #54	@ 0x36
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e0bd      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '.': t[i] = 0x37; break;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	2237      	movs	r2, #55	@ 0x37
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e0b6      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '-': t[i] = 0x38; break;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	4413      	add	r3, r2
 80013ea:	2238      	movs	r2, #56	@ 0x38
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e0af      	b.n	8001550 <convert_message_hun+0xb1c>

		    case '/': t[i] = 0x54; break;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	4413      	add	r3, r2
 80013f8:	2254      	movs	r2, #84	@ 0x54
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e0a8      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '*': t[i] = 0x55; break;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	4413      	add	r3, r2
 8001406:	2255      	movs	r2, #85	@ 0x55
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e0a1      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '+': t[i] = 0x57; break;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	4413      	add	r3, r2
 8001414:	2257      	movs	r2, #87	@ 0x57
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e09a      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '?': is_special[i] = 0x20; t[i] = 0x36; break;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	2220      	movs	r2, #32
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	4413      	add	r3, r2
 800142e:	2236      	movs	r2, #54	@ 0x36
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e08d      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '!': is_special[i] = 0x20; t[i] = 0x21; break;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	2220      	movs	r2, #32
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	4413      	add	r3, r2
 8001448:	2221      	movs	r2, #33	@ 0x21
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e080      	b.n	8001550 <convert_message_hun+0xb1c>
		    case ':': is_special[i] = 0x20; t[i] = 0x37; break;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	2220      	movs	r2, #32
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	4413      	add	r3, r2
 8001462:	2237      	movs	r2, #55	@ 0x37
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e073      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '\t': is_special[i] = 0x00; t[i] = 0x2b; break;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	4413      	add	r3, r2
 800147c:	222b      	movs	r2, #43	@ 0x2b
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e066      	b.n	8001550 <convert_message_hun+0xb1c>
		    case 127: is_special[i] = 0x00; t[i] = 0x2a; break; // delete
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	222a      	movs	r2, #42	@ 0x2a
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e059      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '@': is_special[i] = 0x40; t[i] = 0x19; break;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	2240      	movs	r2, #64	@ 0x40
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	4413      	add	r3, r2
 80014b0:	2219      	movs	r2, #25
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e04c      	b.n	8001550 <convert_message_hun+0xb1c>

		    case '0': t[i] = 0x35; break;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	4413      	add	r3, r2
 80014be:	2235      	movs	r2, #53	@ 0x35
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e045      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '1': t[i] = 0x1e; break;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	4413      	add	r3, r2
 80014cc:	221e      	movs	r2, #30
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e03e      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '2': t[i] = 0x1f; break;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	4413      	add	r3, r2
 80014da:	221f      	movs	r2, #31
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e037      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '3': t[i] = 0x20; break;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	4413      	add	r3, r2
 80014e8:	2220      	movs	r2, #32
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e030      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '4': t[i] = 0x21; break;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	4413      	add	r3, r2
 80014f6:	2221      	movs	r2, #33	@ 0x21
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e029      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '5': t[i] = 0x22; break;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	4413      	add	r3, r2
 8001504:	2222      	movs	r2, #34	@ 0x22
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e022      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '6': t[i] = 0x23; break;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	4413      	add	r3, r2
 8001512:	2223      	movs	r2, #35	@ 0x23
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e01b      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '7': t[i] = 0x24; break;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	4413      	add	r3, r2
 8001520:	2224      	movs	r2, #36	@ 0x24
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e014      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '8': t[i] = 0x25; break;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	4413      	add	r3, r2
 800152e:	2225      	movs	r2, #37	@ 0x25
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e00d      	b.n	8001550 <convert_message_hun+0xb1c>
		    case '9': t[i] = 0x26; break;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	4413      	add	r3, r2
 800153c:	2226      	movs	r2, #38	@ 0x26
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e006      	b.n	8001550 <convert_message_hun+0xb1c>

		    default: t[i] = 0x00; break;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	4413      	add	r3, r2
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	bf00      	nop
	for(int i=0; i<length; ++i)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	429a      	cmp	r2, r3
 800155c:	f6ff aa79 	blt.w	8000a52 <convert_message_hun+0x1e>
		}
	}

	t[length] = 0x00;
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	4413      	add	r3, r2
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
	is_special[length]= 0x00;
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

	return t;
 8001578:	68bb      	ldr	r3, [r7, #8]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop

08001584 <convert_message_eng>:

int* convert_message_eng(wchar_t* message, int *t, int* is_special)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
	int length = wcslen(message);
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f007 faeb 	bl	8008b6c <wcslen>
 8001596:	4603      	mov	r3, r0
 8001598:	613b      	str	r3, [r7, #16]

	for(int i=0; i<length; ++i)
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e327      	b.n	8001bf0 <convert_message_eng+0x66c>
	{
		is_special[i] = 0x00;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
		switch (message[i])
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3b09      	subs	r3, #9
 80015b8:	2b76      	cmp	r3, #118	@ 0x76
 80015ba:	f200 830f 	bhi.w	8001bdc <convert_message_eng+0x658>
 80015be:	a201      	add	r2, pc, #4	@ (adr r2, 80015c4 <convert_message_eng+0x40>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	08001b03 	.word	0x08001b03
 80015c8:	08001a45 	.word	0x08001a45
 80015cc:	08001bdd 	.word	0x08001bdd
 80015d0:	08001bdd 	.word	0x08001bdd
 80015d4:	08001bdd 	.word	0x08001bdd
 80015d8:	08001bdd 	.word	0x08001bdd
 80015dc:	08001bdd 	.word	0x08001bdd
 80015e0:	08001bdd 	.word	0x08001bdd
 80015e4:	08001bdd 	.word	0x08001bdd
 80015e8:	08001bdd 	.word	0x08001bdd
 80015ec:	08001bdd 	.word	0x08001bdd
 80015f0:	08001bdd 	.word	0x08001bdd
 80015f4:	08001bdd 	.word	0x08001bdd
 80015f8:	08001bdd 	.word	0x08001bdd
 80015fc:	08001bdd 	.word	0x08001bdd
 8001600:	08001bdd 	.word	0x08001bdd
 8001604:	08001bdd 	.word	0x08001bdd
 8001608:	08001bdd 	.word	0x08001bdd
 800160c:	08001bdd 	.word	0x08001bdd
 8001610:	08001bdd 	.word	0x08001bdd
 8001614:	08001bdd 	.word	0x08001bdd
 8001618:	08001bdd 	.word	0x08001bdd
 800161c:	08001bdd 	.word	0x08001bdd
 8001620:	08001a53 	.word	0x08001a53
 8001624:	08001acf 	.word	0x08001acf
 8001628:	08001bdd 	.word	0x08001bdd
 800162c:	08001bdd 	.word	0x08001bdd
 8001630:	08001bdd 	.word	0x08001bdd
 8001634:	08001bdd 	.word	0x08001bdd
 8001638:	08001bdd 	.word	0x08001bdd
 800163c:	08001bdd 	.word	0x08001bdd
 8001640:	08001bdd 	.word	0x08001bdd
 8001644:	08001bdd 	.word	0x08001bdd
 8001648:	08001a99 	.word	0x08001a99
 800164c:	08001aa7 	.word	0x08001aa7
 8001650:	08001a61 	.word	0x08001a61
 8001654:	08001a7d 	.word	0x08001a7d
 8001658:	08001a6f 	.word	0x08001a6f
 800165c:	08001a8b 	.word	0x08001a8b
 8001660:	08001b51 	.word	0x08001b51
 8001664:	08001b5f 	.word	0x08001b5f
 8001668:	08001b6d 	.word	0x08001b6d
 800166c:	08001b7b 	.word	0x08001b7b
 8001670:	08001b89 	.word	0x08001b89
 8001674:	08001b97 	.word	0x08001b97
 8001678:	08001ba5 	.word	0x08001ba5
 800167c:	08001bb3 	.word	0x08001bb3
 8001680:	08001bc1 	.word	0x08001bc1
 8001684:	08001bcf 	.word	0x08001bcf
 8001688:	08001ae9 	.word	0x08001ae9
 800168c:	08001bdd 	.word	0x08001bdd
 8001690:	08001bdd 	.word	0x08001bdd
 8001694:	08001bdd 	.word	0x08001bdd
 8001698:	08001bdd 	.word	0x08001bdd
 800169c:	08001ab5 	.word	0x08001ab5
 80016a0:	08001b37 	.word	0x08001b37
 80016a4:	080017a1 	.word	0x080017a1
 80016a8:	080017bb 	.word	0x080017bb
 80016ac:	080017d5 	.word	0x080017d5
 80016b0:	080017ef 	.word	0x080017ef
 80016b4:	08001809 	.word	0x08001809
 80016b8:	08001823 	.word	0x08001823
 80016bc:	0800183d 	.word	0x0800183d
 80016c0:	08001857 	.word	0x08001857
 80016c4:	08001871 	.word	0x08001871
 80016c8:	0800188b 	.word	0x0800188b
 80016cc:	080018a5 	.word	0x080018a5
 80016d0:	080018bf 	.word	0x080018bf
 80016d4:	080018d9 	.word	0x080018d9
 80016d8:	080018f3 	.word	0x080018f3
 80016dc:	0800190d 	.word	0x0800190d
 80016e0:	08001927 	.word	0x08001927
 80016e4:	08001941 	.word	0x08001941
 80016e8:	0800195b 	.word	0x0800195b
 80016ec:	08001975 	.word	0x08001975
 80016f0:	0800198f 	.word	0x0800198f
 80016f4:	080019a9 	.word	0x080019a9
 80016f8:	080019c3 	.word	0x080019c3
 80016fc:	080019dd 	.word	0x080019dd
 8001700:	080019f7 	.word	0x080019f7
 8001704:	08001a11 	.word	0x08001a11
 8001708:	08001a2b 	.word	0x08001a2b
 800170c:	08001bdd 	.word	0x08001bdd
 8001710:	08001bdd 	.word	0x08001bdd
 8001714:	08001bdd 	.word	0x08001bdd
 8001718:	08001bdd 	.word	0x08001bdd
 800171c:	08001bdd 	.word	0x08001bdd
 8001720:	08001bdd 	.word	0x08001bdd
 8001724:	080017ad 	.word	0x080017ad
 8001728:	080017c7 	.word	0x080017c7
 800172c:	080017e1 	.word	0x080017e1
 8001730:	080017fb 	.word	0x080017fb
 8001734:	08001815 	.word	0x08001815
 8001738:	0800182f 	.word	0x0800182f
 800173c:	08001849 	.word	0x08001849
 8001740:	08001863 	.word	0x08001863
 8001744:	0800187d 	.word	0x0800187d
 8001748:	08001897 	.word	0x08001897
 800174c:	080018b1 	.word	0x080018b1
 8001750:	080018cb 	.word	0x080018cb
 8001754:	080018e5 	.word	0x080018e5
 8001758:	080018ff 	.word	0x080018ff
 800175c:	08001919 	.word	0x08001919
 8001760:	08001933 	.word	0x08001933
 8001764:	0800194d 	.word	0x0800194d
 8001768:	08001967 	.word	0x08001967
 800176c:	08001981 	.word	0x08001981
 8001770:	0800199b 	.word	0x0800199b
 8001774:	080019b5 	.word	0x080019b5
 8001778:	080019cf 	.word	0x080019cf
 800177c:	080019e9 	.word	0x080019e9
 8001780:	08001a03 	.word	0x08001a03
 8001784:	08001a1d 	.word	0x08001a1d
 8001788:	08001a37 	.word	0x08001a37
 800178c:	08001bdd 	.word	0x08001bdd
 8001790:	08001bdd 	.word	0x08001bdd
 8001794:	08001bdd 	.word	0x08001bdd
 8001798:	08001bdd 	.word	0x08001bdd
 800179c:	08001b1d 	.word	0x08001b1d
		{
		    case 'A': is_special[i] = 0x02;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	2202      	movs	r2, #2
 80017aa:	601a      	str	r2, [r3, #0]
		    case 'a': t[i] = 0x04; break;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	2204      	movs	r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e217      	b.n	8001bea <convert_message_eng+0x666>
		    case 'B': is_special[i] = 0x02;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	2202      	movs	r2, #2
 80017c4:	601a      	str	r2, [r3, #0]
		    case 'b': t[i] = 0x05; break;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4413      	add	r3, r2
 80017ce:	2205      	movs	r2, #5
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e20a      	b.n	8001bea <convert_message_eng+0x666>
		    case 'C': is_special[i] = 0x02;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	2202      	movs	r2, #2
 80017de:	601a      	str	r2, [r3, #0]
		    case 'c': t[i] = 0x06; break;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	2206      	movs	r2, #6
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e1fd      	b.n	8001bea <convert_message_eng+0x666>
		    case 'D': is_special[i] = 0x02;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	2202      	movs	r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
		    case 'd': t[i] = 0x07; break;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	4413      	add	r3, r2
 8001802:	2207      	movs	r2, #7
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e1f0      	b.n	8001bea <convert_message_eng+0x666>
		    case 'E': is_special[i] = 0x02;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	2202      	movs	r2, #2
 8001812:	601a      	str	r2, [r3, #0]
		    case 'e': t[i] = 0x08; break;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	4413      	add	r3, r2
 800181c:	2208      	movs	r2, #8
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e1e3      	b.n	8001bea <convert_message_eng+0x666>
		    case 'F': is_special[i] = 0x02;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	2202      	movs	r2, #2
 800182c:	601a      	str	r2, [r3, #0]
		    case 'f': t[i] = 0x09; break;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	4413      	add	r3, r2
 8001836:	2209      	movs	r2, #9
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e1d6      	b.n	8001bea <convert_message_eng+0x666>
		    case 'G': is_special[i] = 0x02;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	2202      	movs	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
		    case 'g': t[i] = 0x0a; break;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	4413      	add	r3, r2
 8001850:	220a      	movs	r2, #10
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e1c9      	b.n	8001bea <convert_message_eng+0x666>
		    case 'H': is_special[i] = 0x02;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
		    case 'h': t[i] = 0x0b; break;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	4413      	add	r3, r2
 800186a:	220b      	movs	r2, #11
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e1bc      	b.n	8001bea <convert_message_eng+0x666>
		    case 'I': is_special[i] = 0x02;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	2202      	movs	r2, #2
 800187a:	601a      	str	r2, [r3, #0]
		    case 'i': t[i] = 0x0c; break;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	4413      	add	r3, r2
 8001884:	220c      	movs	r2, #12
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e1af      	b.n	8001bea <convert_message_eng+0x666>
		    case 'J': is_special[i] = 0x02;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
		    case 'j': t[i] = 0x0d; break;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	4413      	add	r3, r2
 800189e:	220d      	movs	r2, #13
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e1a2      	b.n	8001bea <convert_message_eng+0x666>
		    case 'K': is_special[i] = 0x02;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	2202      	movs	r2, #2
 80018ae:	601a      	str	r2, [r3, #0]
		    case 'k': t[i] = 0x0e; break;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	4413      	add	r3, r2
 80018b8:	220e      	movs	r2, #14
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e195      	b.n	8001bea <convert_message_eng+0x666>
		    case 'L': is_special[i] = 0x02;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	2202      	movs	r2, #2
 80018c8:	601a      	str	r2, [r3, #0]
		    case 'l': t[i] = 0x0f; break;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	4413      	add	r3, r2
 80018d2:	220f      	movs	r2, #15
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e188      	b.n	8001bea <convert_message_eng+0x666>
		    case 'M': is_special[i] = 0x02;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	2202      	movs	r2, #2
 80018e2:	601a      	str	r2, [r3, #0]
		    case 'm': t[i] = 0x10; break;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	4413      	add	r3, r2
 80018ec:	2210      	movs	r2, #16
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e17b      	b.n	8001bea <convert_message_eng+0x666>
		    case 'N': is_special[i] = 0x02;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	2202      	movs	r2, #2
 80018fc:	601a      	str	r2, [r3, #0]
		    case 'n': t[i] = 0x11; break;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	4413      	add	r3, r2
 8001906:	2211      	movs	r2, #17
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e16e      	b.n	8001bea <convert_message_eng+0x666>
		    case 'O': is_special[i] = 0x02;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	2202      	movs	r2, #2
 8001916:	601a      	str	r2, [r3, #0]
		    case 'o': t[i] = 0x12; break;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	4413      	add	r3, r2
 8001920:	2212      	movs	r2, #18
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e161      	b.n	8001bea <convert_message_eng+0x666>
		    case 'P': is_special[i] = 0x02;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	2202      	movs	r2, #2
 8001930:	601a      	str	r2, [r3, #0]
		    case 'p': t[i] = 0x13; break;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4413      	add	r3, r2
 800193a:	2213      	movs	r2, #19
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e154      	b.n	8001bea <convert_message_eng+0x666>
		    case 'Q': is_special[i] = 0x02;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	2202      	movs	r2, #2
 800194a:	601a      	str	r2, [r3, #0]
		    case 'q': t[i] = 0x14; break;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	4413      	add	r3, r2
 8001954:	2214      	movs	r2, #20
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e147      	b.n	8001bea <convert_message_eng+0x666>
		    case 'R': is_special[i] = 0x02;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
		    case 'r': t[i] = 0x15; break;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	4413      	add	r3, r2
 800196e:	2215      	movs	r2, #21
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e13a      	b.n	8001bea <convert_message_eng+0x666>
		    case 'S': is_special[i] = 0x02;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	2202      	movs	r2, #2
 800197e:	601a      	str	r2, [r3, #0]
		    case 's': t[i] = 0x16; break;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	4413      	add	r3, r2
 8001988:	2216      	movs	r2, #22
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e12d      	b.n	8001bea <convert_message_eng+0x666>
		    case 'T': is_special[i] = 0x02;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	2202      	movs	r2, #2
 8001998:	601a      	str	r2, [r3, #0]
		    case 't': t[i] = 0x17; break;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	4413      	add	r3, r2
 80019a2:	2217      	movs	r2, #23
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e120      	b.n	8001bea <convert_message_eng+0x666>
		    case 'U': is_special[i] = 0x02;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
		    case 'u': t[i] = 0x18; break;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	4413      	add	r3, r2
 80019bc:	2218      	movs	r2, #24
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e113      	b.n	8001bea <convert_message_eng+0x666>
		    case 'V': is_special[i] = 0x02;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	2202      	movs	r2, #2
 80019cc:	601a      	str	r2, [r3, #0]
		    case 'v': t[i] = 0x19; break;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	4413      	add	r3, r2
 80019d6:	2219      	movs	r2, #25
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e106      	b.n	8001bea <convert_message_eng+0x666>
		    case 'W': is_special[i] = 0x02;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	2202      	movs	r2, #2
 80019e6:	601a      	str	r2, [r3, #0]
		    case 'w': t[i] = 0x1a; break;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	4413      	add	r3, r2
 80019f0:	221a      	movs	r2, #26
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e0f9      	b.n	8001bea <convert_message_eng+0x666>
		    case 'X': is_special[i] = 0x02;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	2202      	movs	r2, #2
 8001a00:	601a      	str	r2, [r3, #0]
		    case 'x': t[i] = 0x1b; break;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	4413      	add	r3, r2
 8001a0a:	221b      	movs	r2, #27
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e0ec      	b.n	8001bea <convert_message_eng+0x666>
		    case 'Y': is_special[i] = 0x02;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	2202      	movs	r2, #2
 8001a1a:	601a      	str	r2, [r3, #0]
		    case 'y': t[i] = 0x1c; break;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	4413      	add	r3, r2
 8001a24:	221c      	movs	r2, #28
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e0df      	b.n	8001bea <convert_message_eng+0x666>
		    case 'Z': is_special[i] = 0x02;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	2202      	movs	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
		    case 'z': t[i] = 0x1d; break;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	221d      	movs	r2, #29
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e0d2      	b.n	8001bea <convert_message_eng+0x666>

		    case '\n': t[i] = 0x28; break;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	2228      	movs	r2, #40	@ 0x28
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e0cb      	b.n	8001bea <convert_message_eng+0x666>
		    case ' ': t[i] = 0x2c; break;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	4413      	add	r3, r2
 8001a5a:	222c      	movs	r2, #44	@ 0x2c
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e0c4      	b.n	8001bea <convert_message_eng+0x666>
		    case ',': t[i] = 0x36; break;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	4413      	add	r3, r2
 8001a68:	2236      	movs	r2, #54	@ 0x36
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e0bd      	b.n	8001bea <convert_message_eng+0x666>
		    case '.': t[i] = 0x37; break;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	4413      	add	r3, r2
 8001a76:	2237      	movs	r2, #55	@ 0x37
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e0b6      	b.n	8001bea <convert_message_eng+0x666>
		    case '-': t[i] = 0x2d; break;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	4413      	add	r3, r2
 8001a84:	222d      	movs	r2, #45	@ 0x2d
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e0af      	b.n	8001bea <convert_message_eng+0x666>
		    case '/': t[i] = 0x38; break;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	4413      	add	r3, r2
 8001a92:	2238      	movs	r2, #56	@ 0x38
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e0a8      	b.n	8001bea <convert_message_eng+0x666>
		    case '*': t[i] = 0x55; break;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	2255      	movs	r2, #85	@ 0x55
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e0a1      	b.n	8001bea <convert_message_eng+0x666>
		    case '+': t[i] = 0x57; break;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	4413      	add	r3, r2
 8001aae:	2257      	movs	r2, #87	@ 0x57
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	e09a      	b.n	8001bea <convert_message_eng+0x666>
		    case '?': is_special[i] = 0x20; t[i] = 0x38; break;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	2220      	movs	r2, #32
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	2238      	movs	r2, #56	@ 0x38
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e08d      	b.n	8001bea <convert_message_eng+0x666>
		    case '!': is_special[i] = 0x20; t[i] = 0x1e; break;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	221e      	movs	r2, #30
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e080      	b.n	8001bea <convert_message_eng+0x666>
		    case ':': is_special[i] = 0x20; t[i] = 0x33; break;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	2220      	movs	r2, #32
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	4413      	add	r3, r2
 8001afc:	2233      	movs	r2, #51	@ 0x33
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e073      	b.n	8001bea <convert_message_eng+0x666>
		    case '\t': is_special[i] = 0x00; t[i] = 0x2b; break;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	4413      	add	r3, r2
 8001b16:	222b      	movs	r2, #43	@ 0x2b
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e066      	b.n	8001bea <convert_message_eng+0x666>
		    case 127: is_special[i] = 0x00; t[i] = 0x2a; break; // delete
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	4413      	add	r3, r2
 8001b30:	222a      	movs	r2, #42	@ 0x2a
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e059      	b.n	8001bea <convert_message_eng+0x666>

		    // NO
		    case '@': is_special[i] = 0x20; t[i] = 0x34; break;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2220      	movs	r2, #32
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	4413      	add	r3, r2
 8001b4a:	2234      	movs	r2, #52	@ 0x34
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e04c      	b.n	8001bea <convert_message_eng+0x666>

		    case '0': t[i] = 0x27; break;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	4413      	add	r3, r2
 8001b58:	2227      	movs	r2, #39	@ 0x27
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e045      	b.n	8001bea <convert_message_eng+0x666>
		    case '1': t[i] = 0x1e; break;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	4413      	add	r3, r2
 8001b66:	221e      	movs	r2, #30
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	e03e      	b.n	8001bea <convert_message_eng+0x666>
		    case '2': t[i] = 0x1f; break;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	4413      	add	r3, r2
 8001b74:	221f      	movs	r2, #31
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e037      	b.n	8001bea <convert_message_eng+0x666>
		    case '3': t[i] = 0x20; break;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	2220      	movs	r2, #32
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	e030      	b.n	8001bea <convert_message_eng+0x666>
		    case '4': t[i] = 0x21; break;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	4413      	add	r3, r2
 8001b90:	2221      	movs	r2, #33	@ 0x21
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e029      	b.n	8001bea <convert_message_eng+0x666>
		    case '5': t[i] = 0x22; break;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	2222      	movs	r2, #34	@ 0x22
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e022      	b.n	8001bea <convert_message_eng+0x666>
		    case '6': t[i] = 0x23; break;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	4413      	add	r3, r2
 8001bac:	2223      	movs	r2, #35	@ 0x23
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e01b      	b.n	8001bea <convert_message_eng+0x666>
		    case '7': t[i] = 0x24; break;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	4413      	add	r3, r2
 8001bba:	2224      	movs	r2, #36	@ 0x24
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e014      	b.n	8001bea <convert_message_eng+0x666>
		    case '8': t[i] = 0x25; break;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	2225      	movs	r2, #37	@ 0x25
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e00d      	b.n	8001bea <convert_message_eng+0x666>
		    case '9': t[i] = 0x26; break;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	2226      	movs	r2, #38	@ 0x26
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	e006      	b.n	8001bea <convert_message_eng+0x666>

		    default: t[i] = 0x00; break;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	4413      	add	r3, r2
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	bf00      	nop
	for(int i=0; i<length; ++i)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f6ff acd3 	blt.w	80015a0 <convert_message_eng+0x1c>
		}
	}

	t[length] = 0x00;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4413      	add	r3, r2
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
	is_special[length]= 0x00;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

	return t;
 8001c12:	68bb      	ldr	r3, [r7, #8]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <Error_Handler+0x8>

08001c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <HAL_MspInit+0x4c>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	4a0f      	ldr	r2, [pc, #60]	@ (8001c74 <HAL_MspInit+0x4c>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_MspInit+0x4c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_MspInit+0x4c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	4a08      	ldr	r2, [pc, #32]	@ (8001c74 <HAL_MspInit+0x4c>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800

08001c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <NMI_Handler+0x4>

08001c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <HardFault_Handler+0x4>

08001c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <MemManage_Handler+0x4>

08001c90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <BusFault_Handler+0x4>

08001c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <UsageFault_Handler+0x4>

08001ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cce:	f000 f953 	bl	8001f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <OTG_FS_IRQHandler+0x10>)
 8001cde:	f000 fd9a 	bl	8002816 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200002f8 	.word	0x200002f8

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f006 ff56 	bl	8008bcc <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	@ (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20010000 	.word	0x20010000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	200002f4 	.word	0x200002f4
 8001d54:	20001228 	.word	0x20001228

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d80:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d82:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d90:	2202      	movs	r2, #2
 8001d92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc0:	f000 fbe5 	bl	800258e <HAL_PCD_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001dca:	f7ff ff27 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200002f8 	.word	0x200002f8

08001dd8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001df8:	d13a      	bne.n	8001e70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <HAL_PCD_MspInit+0xa0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a1d      	ldr	r2, [pc, #116]	@ (8001e78 <HAL_PCD_MspInit+0xa0>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <HAL_PCD_MspInit+0xa0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e16:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e28:	230a      	movs	r3, #10
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4812      	ldr	r0, [pc, #72]	@ (8001e7c <HAL_PCD_MspInit+0xa4>)
 8001e34:	f000 f9f6 	bl	8002224 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <HAL_PCD_MspInit+0xa0>)
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e78 <HAL_PCD_MspInit+0xa0>)
 8001e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e42:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <HAL_PCD_MspInit+0xa0>)
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <HAL_PCD_MspInit+0xa0>)
 8001e4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e52:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e54:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <HAL_PCD_MspInit+0xa0>)
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	2043      	movs	r0, #67	@ 0x43
 8001e66:	f000 f9a6 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001e6a:	2043      	movs	r0, #67	@ 0x43
 8001e6c:	f000 f9bf 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001e70:	bf00      	nop
 8001e72:	3728      	adds	r7, #40	@ 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000

08001e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e84:	f7ff ff68 	bl	8001d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e88:	480c      	ldr	r0, [pc, #48]	@ (8001ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e8a:	490d      	ldr	r1, [pc, #52]	@ (8001ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e90:	e002      	b.n	8001e98 <LoopCopyDataInit>

08001e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e96:	3304      	adds	r3, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e9c:	d3f9      	bcc.n	8001e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea4:	e001      	b.n	8001eaa <LoopFillZerobss>

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea8:	3204      	adds	r2, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eae:	f006 fe93 	bl	8008bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eb2:	f7fe fbcd 	bl	8000650 <main>
  bx  lr    
 8001eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec0:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001ec4:	08009988 	.word	0x08009988
  ldr r2, =_sbss
 8001ec8:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001ecc:	20001224 	.word	0x20001224

08001ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed0:	e7fe      	b.n	8001ed0 <ADC_IRQHandler>
	...

08001ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <HAL_Init+0x40>)
 8001ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <HAL_Init+0x40>)
 8001eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a07      	ldr	r2, [pc, #28]	@ (8001f14 <HAL_Init+0x40>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001efc:	2003      	movs	r0, #3
 8001efe:	f000 f94f 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f02:	200f      	movs	r0, #15
 8001f04:	f000 f808 	bl	8001f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f08:	f7ff fe8e 	bl	8001c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023c00 	.word	0x40023c00

08001f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <HAL_InitTick+0x54>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <HAL_InitTick+0x58>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f967 	bl	800220a <HAL_SYSTICK_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00e      	b.n	8001f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b0f      	cmp	r3, #15
 8001f4a:	d80a      	bhi.n	8001f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f000 f92f 	bl	80021b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f58:	4a06      	ldr	r2, [pc, #24]	@ (8001f74 <HAL_InitTick+0x5c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	20000008 	.word	0x20000008

08001f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_IncTick+0x20>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_IncTick+0x24>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <HAL_IncTick+0x24>)
 8001f8a:	6013      	str	r3, [r2, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	2000000c 	.word	0x2000000c
 8001f9c:	200007dc 	.word	0x200007dc

08001fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <HAL_GetTick+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	200007dc 	.word	0x200007dc

08001fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff ffee 	bl	8001fa0 <HAL_GetTick>
 8001fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd0:	d005      	beq.n	8001fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_Delay+0x44>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4413      	add	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fde:	bf00      	nop
 8001fe0:	f7ff ffde 	bl	8001fa0 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d8f7      	bhi.n	8001fe0 <HAL_Delay+0x28>
  {
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000000c 	.word	0x2000000c

08002000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800202c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db0b      	blt.n	800208e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4907      	ldr	r1, [pc, #28]	@ (800209c <__NVIC_EnableIRQ+0x38>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	@ (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	@ (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	@ 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	@ 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff8e 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	@ (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff29 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c8:	f7ff ff3e 	bl	8002048 <__NVIC_GetPriorityGrouping>
 80021cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f7ff ff8e 	bl	80020f4 <NVIC_EncodePriority>
 80021d8:	4602      	mov	r2, r0
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff5d 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff31 	bl	8002064 <__NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ffa2 	bl	800215c <SysTick_Config>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	@ 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e159      	b.n	80024f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 8148 	bne.w	80024ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	2b02      	cmp	r3, #2
 8002274:	d130      	bne.n	80022d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2203      	movs	r2, #3
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 0201 	and.w	r2, r3, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d017      	beq.n	8002314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d123      	bne.n	8002368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	69b9      	ldr	r1, [r7, #24]
 8002364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0203 	and.w	r2, r3, #3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a2 	beq.w	80024ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b57      	ldr	r3, [pc, #348]	@ (800250c <HAL_GPIO_Init+0x2e8>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a56      	ldr	r2, [pc, #344]	@ (800250c <HAL_GPIO_Init+0x2e8>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b54      	ldr	r3, [pc, #336]	@ (800250c <HAL_GPIO_Init+0x2e8>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c6:	4a52      	ldr	r2, [pc, #328]	@ (8002510 <HAL_GPIO_Init+0x2ec>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a49      	ldr	r2, [pc, #292]	@ (8002514 <HAL_GPIO_Init+0x2f0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d019      	beq.n	8002426 <HAL_GPIO_Init+0x202>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a48      	ldr	r2, [pc, #288]	@ (8002518 <HAL_GPIO_Init+0x2f4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0x1fe>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a47      	ldr	r2, [pc, #284]	@ (800251c <HAL_GPIO_Init+0x2f8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00d      	beq.n	800241e <HAL_GPIO_Init+0x1fa>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a46      	ldr	r2, [pc, #280]	@ (8002520 <HAL_GPIO_Init+0x2fc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <HAL_GPIO_Init+0x1f6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a45      	ldr	r2, [pc, #276]	@ (8002524 <HAL_GPIO_Init+0x300>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_GPIO_Init+0x1f2>
 8002412:	2304      	movs	r3, #4
 8002414:	e008      	b.n	8002428 <HAL_GPIO_Init+0x204>
 8002416:	2307      	movs	r3, #7
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x204>
 800241a:	2303      	movs	r3, #3
 800241c:	e004      	b.n	8002428 <HAL_GPIO_Init+0x204>
 800241e:	2302      	movs	r3, #2
 8002420:	e002      	b.n	8002428 <HAL_GPIO_Init+0x204>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x204>
 8002426:	2300      	movs	r3, #0
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f002 0203 	and.w	r2, r2, #3
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	4093      	lsls	r3, r2
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002438:	4935      	ldr	r1, [pc, #212]	@ (8002510 <HAL_GPIO_Init+0x2ec>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002446:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <HAL_GPIO_Init+0x304>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246a:	4a2f      	ldr	r2, [pc, #188]	@ (8002528 <HAL_GPIO_Init+0x304>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002470:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <HAL_GPIO_Init+0x304>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002494:	4a24      	ldr	r2, [pc, #144]	@ (8002528 <HAL_GPIO_Init+0x304>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800249a:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <HAL_GPIO_Init+0x304>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024be:	4a1a      	ldr	r2, [pc, #104]	@ (8002528 <HAL_GPIO_Init+0x304>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <HAL_GPIO_Init+0x304>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002528 <HAL_GPIO_Init+0x304>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	f67f aea2 	bls.w	8002240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3724      	adds	r7, #36	@ 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40013800 	.word	0x40013800
 8002514:	40020000 	.word	0x40020000
 8002518:	40020400 	.word	0x40020400
 800251c:	40020800 	.word	0x40020800
 8002520:	40020c00 	.word	0x40020c00
 8002524:	40021000 	.word	0x40021000
 8002528:	40013c00 	.word	0x40013c00

0800252c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e001      	b.n	800254e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800256c:	787b      	ldrb	r3, [r7, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002578:	e003      	b.n	8002582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	041a      	lsls	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	619a      	str	r2, [r3, #24]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af02      	add	r7, sp, #8
 8002594:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e101      	b.n	80027a4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fc0c 	bl	8001dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2203      	movs	r2, #3
 80025c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025ce:	d102      	bne.n	80025d6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 ff71 	bl	80044c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7c1a      	ldrb	r2, [r3, #16]
 80025e8:	f88d 2000 	strb.w	r2, [sp]
 80025ec:	3304      	adds	r3, #4
 80025ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f0:	f001 fe50 	bl	8004294 <USB_CoreInit>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2202      	movs	r2, #2
 80025fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0ce      	b.n	80027a4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f001 ff69 	bl	80044e4 <USB_SetCurrentMode>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0bf      	b.n	80027a4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e04a      	b.n	80026c0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3315      	adds	r3, #21
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3314      	adds	r3, #20
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	b298      	uxth	r0, r3
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	332e      	adds	r3, #46	@ 0x2e
 8002666:	4602      	mov	r2, r0
 8002668:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3318      	adds	r3, #24
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	331c      	adds	r3, #28
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	3320      	adds	r3, #32
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	3324      	adds	r3, #36	@ 0x24
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	3301      	adds	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	791b      	ldrb	r3, [r3, #4]
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d3af      	bcc.n	800262a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e044      	b.n	800275a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	3301      	adds	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	791b      	ldrb	r3, [r3, #4]
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	429a      	cmp	r2, r3
 8002762:	d3b5      	bcc.n	80026d0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7c1a      	ldrb	r2, [r3, #16]
 800276c:	f88d 2000 	strb.w	r2, [sp]
 8002770:	3304      	adds	r3, #4
 8002772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002774:	f001 ff02 	bl	800457c <USB_DevInit>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00c      	b.n	80027a4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f002 ff4c 	bl	800563a <USB_DevDisconnect>

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_PCD_Start+0x1c>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e022      	b.n	800280e <HAL_PCD_Start+0x62>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d009      	beq.n	80027f0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 fe53 	bl	80044a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 fefa 	bl	80055f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002816:	b590      	push	{r4, r7, lr}
 8002818:	b08d      	sub	sp, #52	@ 0x34
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f002 ffb8 	bl	80057a2 <USB_GetMode>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	f040 848c 	bne.w	8003152 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f002 ff1c 	bl	800567c <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8482 	beq.w	8003150 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f002 ff09 	bl	800567c <USB_ReadInterrupts>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b02      	cmp	r3, #2
 8002872:	d107      	bne.n	8002884 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f002 0202 	and.w	r2, r2, #2
 8002882:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f002 fef7 	bl	800567c <USB_ReadInterrupts>
 800288e:	4603      	mov	r3, r0
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b10      	cmp	r3, #16
 8002896:	d161      	bne.n	800295c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0210 	bic.w	r2, r2, #16
 80028a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f003 020f 	and.w	r2, r3, #15
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	3304      	adds	r3, #4
 80028c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	0c5b      	lsrs	r3, r3, #17
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d124      	bne.n	800291e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d035      	beq.n	800294c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	6a38      	ldr	r0, [r7, #32]
 80028f4:	f002 fd2e 	bl	8005354 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002904:	441a      	add	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002916:	441a      	add	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	615a      	str	r2, [r3, #20]
 800291c:	e016      	b.n	800294c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	0c5b      	lsrs	r3, r3, #17
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	2b06      	cmp	r3, #6
 8002928:	d110      	bne.n	800294c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002930:	2208      	movs	r2, #8
 8002932:	4619      	mov	r1, r3
 8002934:	6a38      	ldr	r0, [r7, #32]
 8002936:	f002 fd0d 	bl	8005354 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002946:	441a      	add	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0210 	orr.w	r2, r2, #16
 800295a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fe8b 	bl	800567c <USB_ReadInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800296c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002970:	f040 80a7 	bne.w	8002ac2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f002 fe90 	bl	80056a2 <USB_ReadDevAllOutEpInterrupt>
 8002982:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002984:	e099      	b.n	8002aba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 808e 	beq.w	8002aae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f002 feb4 	bl	800570a <USB_ReadDevOutEPInterrupt>
 80029a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ba:	461a      	mov	r2, r3
 80029bc:	2301      	movs	r3, #1
 80029be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fea4 	bl	8003710 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029de:	461a      	mov	r2, r3
 80029e0:	2308      	movs	r3, #8
 80029e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 ff7a 	bl	80038e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a02:	461a      	mov	r2, r3
 8002a04:	2310      	movs	r3, #16
 8002a06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d030      	beq.n	8002a74 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1a:	2b80      	cmp	r3, #128	@ 0x80
 8002a1c:	d109      	bne.n	8002a32 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a30:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	3304      	adds	r3, #4
 8002a46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	78db      	ldrb	r3, [r3, #3]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d108      	bne.n	8002a62 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f005 fe35 	bl	80086cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2302      	movs	r3, #2
 8002a72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f47f af62 	bne.w	8002986 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 fdd8 	bl	800567c <USB_ReadInterrupts>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ad2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ad6:	f040 80db 	bne.w	8002c90 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 fdf9 	bl	80056d6 <USB_ReadDevAllInEpInterrupt>
 8002ae4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002aea:	e0cd      	b.n	8002c88 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80c2 	beq.w	8002c7c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 fe1f 	bl	8005746 <USB_ReadDevInEPInterrupt>
 8002b08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d057      	beq.n	8002bc4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69f9      	ldr	r1, [r7, #28]
 8002b30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b34:	4013      	ands	r3, r2
 8002b36:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b44:	461a      	mov	r2, r3
 8002b46:	2301      	movs	r3, #1
 8002b48:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	799b      	ldrb	r3, [r3, #6]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d132      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3320      	adds	r3, #32
 8002b62:	6819      	ldr	r1, [r3, #0]
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4403      	add	r3, r0
 8002b72:	331c      	adds	r3, #28
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4419      	add	r1, r3
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4403      	add	r3, r0
 8002b86:	3320      	adds	r3, #32
 8002b88:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d113      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x3a2>
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3324      	adds	r3, #36	@ 0x24
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d108      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	f002 fe26 	bl	8005804 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f005 fcff 	bl	80085c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2308      	movs	r3, #8
 8002bde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c12:	461a      	mov	r2, r3
 8002c14:	2340      	movs	r3, #64	@ 0x40
 8002c16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d023      	beq.n	8002c6a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c24:	6a38      	ldr	r0, [r7, #32]
 8002c26:	f001 fe0d 	bl	8004844 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	3310      	adds	r3, #16
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	78db      	ldrb	r3, [r3, #3]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f005 fd4c 	bl	80086f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c64:	461a      	mov	r2, r3
 8002c66:	2302      	movs	r3, #2
 8002c68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fcbd 	bl	80035f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	3301      	adds	r3, #1
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f47f af2e 	bne.w	8002aec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fcf1 	bl	800567c <USB_ReadInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ca4:	d122      	bne.n	8002cec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fea4 	bl	8003a1c <HAL_PCDEx_LPM_Callback>
 8002cd4:	e002      	b.n	8002cdc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f005 fcea 	bl	80086b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 fcc3 	bl	800567c <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d00:	d112      	bne.n	8002d28 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f005 fca6 	bl	8008664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d26:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 fca5 	bl	800567c <USB_ReadInterrupts>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d3c:	f040 80b7 	bne.w	8002eae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2110      	movs	r1, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 fd72 	bl	8004844 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d64:	e046      	b.n	8002df4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d72:	461a      	mov	r2, r3
 8002d74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d78:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d8a:	0151      	lsls	r1, r2, #5
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	440a      	add	r2, r1
 8002d90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da6:	461a      	mov	r2, r3
 8002da8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dbe:	0151      	lsls	r1, r2, #5
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	440a      	add	r2, r1
 8002dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002dc8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dde:	0151      	lsls	r1, r2, #5
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	440a      	add	r2, r1
 8002de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002de8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002dec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df0:	3301      	adds	r3, #1
 8002df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d3b2      	bcc.n	8002d66 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e0e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7bdb      	ldrb	r3, [r3, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d016      	beq.n	8002e4a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e2c:	f043 030b 	orr.w	r3, r3, #11
 8002e30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e42:	f043 030b 	orr.w	r3, r3, #11
 8002e46:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e48:	e015      	b.n	8002e76 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e5c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e70:	f043 030b 	orr.w	r3, r3, #11
 8002e74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e84:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f002 fcb3 	bl	8005804 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fbe2 	bl	800567c <USB_ReadInterrupts>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec2:	d123      	bne.n	8002f0c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f002 fc78 	bl	80057be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 fd2f 	bl	8004936 <USB_GetDevSpeed>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681c      	ldr	r4, [r3, #0]
 8002ee4:	f001 f9ca 	bl	800427c <HAL_RCC_GetHCLKFreq>
 8002ee8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f001 fa33 	bl	800435c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f005 fb8b 	bl	8008612 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f002 fbb3 	bl	800567c <USB_ReadInterrupts>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d10a      	bne.n	8002f36 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f005 fb68 	bl	80085f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f002 0208 	and.w	r2, r2, #8
 8002f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 fb9e 	bl	800567c <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d123      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f56:	2301      	movs	r3, #1
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f5a:	e014      	b.n	8002f86 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fb0a 	bl	8003594 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	3301      	adds	r3, #1
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	791b      	ldrb	r3, [r3, #4]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d3e4      	bcc.n	8002f5c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f002 fb70 	bl	800567c <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fa6:	d13c      	bne.n	8003022 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa8:	2301      	movs	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fac:	e02b      	b.n	8003006 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3318      	adds	r3, #24
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d115      	bne.n	8003000 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	da12      	bge.n	8003000 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3317      	adds	r3, #23
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 faca 	bl	8003594 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	3301      	adds	r3, #1
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	791b      	ldrb	r3, [r3, #4]
 800300a:	461a      	mov	r2, r3
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	4293      	cmp	r3, r2
 8003010:	d3cd      	bcc.n	8002fae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f002 fb28 	bl	800567c <USB_ReadInterrupts>
 800302c:	4603      	mov	r3, r0
 800302e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003032:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003036:	d156      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003038:	2301      	movs	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
 800303c:	e045      	b.n	80030ca <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d12e      	bne.n	80030c4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003066:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003068:	2b00      	cmp	r3, #0
 800306a:	da2b      	bge.n	80030c4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003078:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800307c:	429a      	cmp	r2, r3
 800307e:	d121      	bne.n	80030c4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030c0:	6053      	str	r3, [r2, #4]
            break;
 80030c2:	e008      	b.n	80030d6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	3301      	adds	r3, #1
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	791b      	ldrb	r3, [r3, #4]
 80030ce:	461a      	mov	r2, r3
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d3b3      	bcc.n	800303e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80030e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f002 fac6 	bl	800567c <USB_ReadInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80030f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fa:	d10a      	bne.n	8003112 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f005 fb09 	bl	8008714 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f002 fab0 	bl	800567c <USB_ReadInterrupts>
 800311c:	4603      	mov	r3, r0
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d115      	bne.n	8003152 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f005 faf9 	bl	8008730 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e000      	b.n	8003152 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003150:	bf00      	nop
    }
  }
}
 8003152:	3734      	adds	r7, #52	@ 0x34
 8003154:	46bd      	mov	sp, r7
 8003156:	bd90      	pop	{r4, r7, pc}

08003158 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_PCD_SetAddress+0x1a>
 800316e:	2302      	movs	r3, #2
 8003170:	e012      	b.n	8003198 <HAL_PCD_SetAddress+0x40>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f002 fa0f 	bl	80055ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	4608      	mov	r0, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	461a      	mov	r2, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	70fb      	strb	r3, [r7, #3]
 80031b2:	460b      	mov	r3, r1
 80031b4:	803b      	strh	r3, [r7, #0]
 80031b6:	4613      	mov	r3, r2
 80031b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	da0f      	bge.n	80031e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 020f 	and.w	r2, r3, #15
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	3310      	adds	r3, #16
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	3304      	adds	r3, #4
 80031dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	705a      	strb	r2, [r3, #1]
 80031e4:	e00f      	b.n	8003206 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 020f 	and.w	r2, r3, #15
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	b2da      	uxtb	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003212:	883b      	ldrh	r3, [r7, #0]
 8003214:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	78ba      	ldrb	r2, [r7, #2]
 8003220:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d004      	beq.n	8003234 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003234:	78bb      	ldrb	r3, [r7, #2]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d102      	bne.n	8003240 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_PCD_EP_Open+0xae>
 800324a:	2302      	movs	r3, #2
 800324c:	e00e      	b.n	800326c <HAL_PCD_EP_Open+0xcc>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	4618      	mov	r0, r3
 800325e:	f001 fb8f 	bl	8004980 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800326a:	7afb      	ldrb	r3, [r7, #11]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003284:	2b00      	cmp	r3, #0
 8003286:	da0f      	bge.n	80032a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	f003 020f 	and.w	r2, r3, #15
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	3310      	adds	r3, #16
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	3304      	adds	r3, #4
 800329e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	705a      	strb	r2, [r3, #1]
 80032a6:	e00f      	b.n	80032c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	f003 020f 	and.w	r2, r3, #15
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	3304      	adds	r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_EP_Close+0x6e>
 80032de:	2302      	movs	r3, #2
 80032e0:	e00e      	b.n	8003300 <HAL_PCD_EP_Close+0x8c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f001 fbcd 	bl	8004a90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	460b      	mov	r3, r1
 8003316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2200      	movs	r2, #0
 8003348:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334a:	7afb      	ldrb	r3, [r7, #11]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	b2da      	uxtb	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	799b      	ldrb	r3, [r3, #6]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	799b      	ldrb	r3, [r3, #6]
 800336c:	461a      	mov	r2, r3
 800336e:	6979      	ldr	r1, [r7, #20]
 8003370:	f001 fc6a 	bl	8004c48 <USB_EPStartXfer>

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 020f 	and.w	r2, r3, #15
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80033a0:	681b      	ldr	r3, [r3, #0]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	460b      	mov	r3, r1
 80033bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033be:	7afb      	ldrb	r3, [r7, #11]
 80033c0:	f003 020f 	and.w	r2, r3, #15
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	3310      	adds	r3, #16
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2200      	movs	r2, #0
 80033e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2201      	movs	r2, #1
 80033ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	799b      	ldrb	r3, [r3, #6]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d102      	bne.n	8003408 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	799b      	ldrb	r3, [r3, #6]
 8003410:	461a      	mov	r2, r3
 8003412:	6979      	ldr	r1, [r7, #20]
 8003414:	f001 fc18 	bl	8004c48 <USB_EPStartXfer>

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	460b      	mov	r3, r1
 800342c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	7912      	ldrb	r2, [r2, #4]
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e04f      	b.n	80034e0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003444:	2b00      	cmp	r3, #0
 8003446:	da0f      	bge.n	8003468 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	f003 020f 	and.w	r2, r3, #15
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	3310      	adds	r3, #16
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	3304      	adds	r3, #4
 800345e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	705a      	strb	r2, [r3, #1]
 8003466:	e00d      	b.n	8003484 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	3304      	adds	r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_PCD_EP_SetStall+0x82>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e01d      	b.n	80034e0 <HAL_PCD_EP_SetStall+0xbe>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68f9      	ldr	r1, [r7, #12]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 ffa6 	bl	8005404 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7999      	ldrb	r1, [r3, #6]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034d0:	461a      	mov	r2, r3
 80034d2:	f002 f997 	bl	8005804 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	7912      	ldrb	r2, [r2, #4]
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e042      	b.n	800358c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800350a:	2b00      	cmp	r3, #0
 800350c:	da0f      	bge.n	800352e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	f003 020f 	and.w	r2, r3, #15
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	3310      	adds	r3, #16
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	3304      	adds	r3, #4
 8003524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	705a      	strb	r2, [r3, #1]
 800352c:	e00f      	b.n	800354e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	f003 020f 	and.w	r2, r3, #15
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	3304      	adds	r3, #4
 8003546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_PCD_EP_ClrStall+0x86>
 800356a:	2302      	movs	r3, #2
 800356c:	e00e      	b.n	800358c <HAL_PCD_EP_ClrStall+0xa4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68f9      	ldr	r1, [r7, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	f001 ffaf 	bl	80054e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da0c      	bge.n	80035c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	f003 020f 	and.w	r2, r3, #15
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3310      	adds	r3, #16
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	3304      	adds	r3, #4
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e00c      	b.n	80035dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	3304      	adds	r3, #4
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 fdce 	bl	8005184 <USB_EPStopXfer>
 80035e8:	4603      	mov	r3, r0
 80035ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035ec:	7afb      	ldrb	r3, [r7, #11]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b08a      	sub	sp, #40	@ 0x28
 80035fa:	af02      	add	r7, sp, #8
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	3310      	adds	r3, #16
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	3304      	adds	r3, #4
 800361c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	429a      	cmp	r2, r3
 8003628:	d901      	bls.n	800362e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06b      	b.n	8003706 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	429a      	cmp	r2, r3
 8003642:	d902      	bls.n	800364a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3303      	adds	r3, #3
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003652:	e02a      	b.n	80036aa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	429a      	cmp	r2, r3
 8003668:	d902      	bls.n	8003670 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3303      	adds	r3, #3
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68d9      	ldr	r1, [r3, #12]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	4603      	mov	r3, r0
 800368c:	6978      	ldr	r0, [r7, #20]
 800368e:	f001 fe23 	bl	80052d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	441a      	add	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	441a      	add	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d809      	bhi.n	80036d4 <PCD_WriteEmptyTxFifo+0xde>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d203      	bcs.n	80036d4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1bf      	bne.n	8003654 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d811      	bhi.n	8003704 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	2201      	movs	r2, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	6939      	ldr	r1, [r7, #16]
 80036fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003700:	4013      	ands	r3, r2
 8003702:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	333c      	adds	r3, #60	@ 0x3c
 8003728:	3304      	adds	r3, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	799b      	ldrb	r3, [r3, #6]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d17b      	bne.n	800383e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d015      	beq.n	800377c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4a61      	ldr	r2, [pc, #388]	@ (80038d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	f240 80b9 	bls.w	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80b3 	beq.w	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003772:	461a      	mov	r2, r3
 8003774:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003778:	6093      	str	r3, [r2, #8]
 800377a:	e0a7      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003792:	461a      	mov	r2, r3
 8003794:	2320      	movs	r3, #32
 8003796:	6093      	str	r3, [r2, #8]
 8003798:	e098      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f040 8093 	bne.w	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	@ (80038d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d90f      	bls.n	80037ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c4:	461a      	mov	r2, r3
 80037c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ca:	6093      	str	r3, [r2, #8]
 80037cc:	e07e      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	3304      	adds	r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	0159      	lsls	r1, r3, #5
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	440b      	add	r3, r1
 80037f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fa:	1ad2      	subs	r2, r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d114      	bne.n	8003830 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003818:	461a      	mov	r2, r3
 800381a:	2101      	movs	r1, #1
 800381c:	f001 fff2 	bl	8005804 <USB_EP0_OutStart>
 8003820:	e006      	b.n	8003830 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	441a      	add	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f004 fea8 	bl	800858c <HAL_PCD_DataOutStageCallback>
 800383c:	e046      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4a26      	ldr	r2, [pc, #152]	@ (80038dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d124      	bne.n	8003890 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385c:	461a      	mov	r2, r3
 800385e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003862:	6093      	str	r3, [r2, #8]
 8003864:	e032      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800387c:	461a      	mov	r2, r3
 800387e:	2320      	movs	r3, #32
 8003880:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f004 fe7f 	bl	800858c <HAL_PCD_DataOutStageCallback>
 800388e:	e01d      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d114      	bne.n	80038c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d108      	bne.n	80038c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038b8:	461a      	mov	r2, r3
 80038ba:	2100      	movs	r1, #0
 80038bc:	f001 ffa2 	bl	8005804 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	4619      	mov	r1, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f004 fe60 	bl	800858c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	4f54300a 	.word	0x4f54300a
 80038dc:	4f54310a 	.word	0x4f54310a

080038e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	333c      	adds	r3, #60	@ 0x3c
 80038f8:	3304      	adds	r3, #4
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a15      	ldr	r2, [pc, #84]	@ (8003968 <PCD_EP_OutSetupPacket_int+0x88>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d90e      	bls.n	8003934 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800392c:	461a      	mov	r2, r3
 800392e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003932:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f004 fe17 	bl	8008568 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a0a      	ldr	r2, [pc, #40]	@ (8003968 <PCD_EP_OutSetupPacket_int+0x88>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d90c      	bls.n	800395c <PCD_EP_OutSetupPacket_int+0x7c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	799b      	ldrb	r3, [r3, #6]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d108      	bne.n	800395c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003954:	461a      	mov	r2, r3
 8003956:	2101      	movs	r1, #1
 8003958:	f001 ff54 	bl	8005804 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	4f54300a 	.word	0x4f54300a

0800396c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]
 8003978:	4613      	mov	r3, r2
 800397a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d107      	bne.n	800399a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800398a:	883b      	ldrh	r3, [r7, #0]
 800398c:	0419      	lsls	r1, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	430a      	orrs	r2, r1
 8003996:	629a      	str	r2, [r3, #40]	@ 0x28
 8003998:	e028      	b.n	80039ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	4413      	add	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	e00d      	b.n	80039ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	3340      	adds	r3, #64	@ 0x40
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	4413      	add	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	3301      	adds	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d3ec      	bcc.n	80039ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039d4:	883b      	ldrh	r3, [r7, #0]
 80039d6:	0418      	lsls	r0, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6819      	ldr	r1, [r3, #0]
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	3b01      	subs	r3, #1
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	4302      	orrs	r2, r0
 80039e4:	3340      	adds	r3, #64	@ 0x40
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	887a      	ldrh	r2, [r7, #2]
 8003a0c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e267      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d075      	beq.n	8003b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a52:	4b88      	ldr	r3, [pc, #544]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d00c      	beq.n	8003a78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5e:	4b85      	ldr	r3, [pc, #532]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d112      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6a:	4b82      	ldr	r3, [pc, #520]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a76:	d10b      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	4b7e      	ldr	r3, [pc, #504]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d05b      	beq.n	8003b3c <HAL_RCC_OscConfig+0x108>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d157      	bne.n	8003b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e242      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x74>
 8003a9a:	4b76      	ldr	r3, [pc, #472]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a75      	ldr	r2, [pc, #468]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e01d      	b.n	8003ae4 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0x98>
 8003ab2:	4b70      	ldr	r3, [pc, #448]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6f      	ldr	r2, [pc, #444]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b6d      	ldr	r3, [pc, #436]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6c      	ldr	r2, [pc, #432]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCC_OscConfig+0xb0>
 8003acc:	4b69      	ldr	r3, [pc, #420]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a68      	ldr	r2, [pc, #416]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b66      	ldr	r3, [pc, #408]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a65      	ldr	r2, [pc, #404]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fe fa58 	bl	8001fa0 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe fa54 	bl	8001fa0 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	@ 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e207      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	4b5b      	ldr	r3, [pc, #364]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0xc0>
 8003b12:	e014      	b.n	8003b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe fa44 	bl	8001fa0 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fe fa40 	bl	8001fa0 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	@ 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e1f3      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	4b51      	ldr	r3, [pc, #324]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0xe8>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d063      	beq.n	8003c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b47      	ldr	r3, [pc, #284]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d11c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b62:	4b44      	ldr	r3, [pc, #272]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d116      	bne.n	8003b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	4b41      	ldr	r3, [pc, #260]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e1c7      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b86:	4b3b      	ldr	r3, [pc, #236]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4937      	ldr	r1, [pc, #220]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9a:	e03a      	b.n	8003c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba4:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <HAL_RCC_OscConfig+0x244>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe f9f9 	bl	8001fa0 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb2:	f7fe f9f5 	bl	8001fa0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1a8      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b28      	ldr	r3, [pc, #160]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4925      	ldr	r1, [pc, #148]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]
 8003be4:	e015      	b.n	8003c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be6:	4b24      	ldr	r3, [pc, #144]	@ (8003c78 <HAL_RCC_OscConfig+0x244>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe f9d8 	bl	8001fa0 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fe f9d4 	bl	8001fa0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e187      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d036      	beq.n	8003c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c26:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <HAL_RCC_OscConfig+0x248>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fe f9b8 	bl	8001fa0 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c34:	f7fe f9b4 	bl	8001fa0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e167      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x200>
 8003c52:	e01b      	b.n	8003c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c54:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_RCC_OscConfig+0x248>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5a:	f7fe f9a1 	bl	8001fa0 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	e00e      	b.n	8003c80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe f99d 	bl	8001fa0 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d907      	bls.n	8003c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e150      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
 8003c74:	40023800 	.word	0x40023800
 8003c78:	42470000 	.word	0x42470000
 8003c7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b88      	ldr	r3, [pc, #544]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ea      	bne.n	8003c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8097 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b81      	ldr	r3, [pc, #516]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cba:	4b7a      	ldr	r3, [pc, #488]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cca:	4b77      	ldr	r3, [pc, #476]	@ (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d118      	bne.n	8003d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd6:	4b74      	ldr	r3, [pc, #464]	@ (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a73      	ldr	r2, [pc, #460]	@ (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce2:	f7fe f95d 	bl	8001fa0 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cea:	f7fe f959 	bl	8001fa0 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e10c      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2ea>
 8003d10:	4b64      	ldr	r3, [pc, #400]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d14:	4a63      	ldr	r2, [pc, #396]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1c:	e01c      	b.n	8003d58 <HAL_RCC_OscConfig+0x324>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x30c>
 8003d26:	4b5f      	ldr	r3, [pc, #380]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	f043 0304 	orr.w	r3, r3, #4
 8003d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d32:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d36:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCC_OscConfig+0x324>
 8003d40:	4b58      	ldr	r3, [pc, #352]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	4a57      	ldr	r2, [pc, #348]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4c:	4b55      	ldr	r3, [pc, #340]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d50:	4a54      	ldr	r2, [pc, #336]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d52:	f023 0304 	bic.w	r3, r3, #4
 8003d56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fe f91e 	bl	8001fa0 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fe f91a 	bl	8001fa0 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0cb      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ee      	beq.n	8003d68 <HAL_RCC_OscConfig+0x334>
 8003d8a:	e014      	b.n	8003db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8c:	f7fe f908 	bl	8001fa0 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fe f904 	bl	8001fa0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0b5      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003daa:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ee      	bne.n	8003d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbc:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	4a38      	ldr	r2, [pc, #224]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a1 	beq.w	8003f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d05c      	beq.n	8003e98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d141      	bne.n	8003e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b31      	ldr	r3, [pc, #196]	@ (8003eac <HAL_RCC_OscConfig+0x478>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fe f8d8 	bl	8001fa0 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fe f8d4 	bl	8001fa0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e087      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	4b27      	ldr	r3, [pc, #156]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	019b      	lsls	r3, r3, #6
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	491b      	ldr	r1, [pc, #108]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <HAL_RCC_OscConfig+0x478>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fe f8ad 	bl	8001fa0 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fe f8a9 	bl	8001fa0 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e05c      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x416>
 8003e68:	e054      	b.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <HAL_RCC_OscConfig+0x478>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fe f896 	bl	8001fa0 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fe f892 	bl	8001fa0 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e045      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x444>
 8003e96:	e03d      	b.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e038      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <HAL_RCC_OscConfig+0x4ec>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d028      	beq.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d121      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d11a      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800

08003f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0cc      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f38:	4b68      	ldr	r3, [pc, #416]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d90c      	bls.n	8003f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b65      	ldr	r3, [pc, #404]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b63      	ldr	r3, [pc, #396]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0b8      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f78:	4b59      	ldr	r3, [pc, #356]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a58      	ldr	r2, [pc, #352]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f90:	4b53      	ldr	r3, [pc, #332]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a52      	ldr	r2, [pc, #328]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9c:	4b50      	ldr	r3, [pc, #320]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	494d      	ldr	r1, [pc, #308]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d044      	beq.n	8004044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d119      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e07f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e06f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e067      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004002:	4b37      	ldr	r3, [pc, #220]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4934      	ldr	r1, [pc, #208]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004014:	f7fd ffc4 	bl	8001fa0 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	e00a      	b.n	8004032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401c:	f7fd ffc0 	bl	8001fa0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e04f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	4b2b      	ldr	r3, [pc, #172]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 020c 	and.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	429a      	cmp	r2, r3
 8004042:	d1eb      	bne.n	800401c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004044:	4b25      	ldr	r3, [pc, #148]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d20c      	bcs.n	800406c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b22      	ldr	r3, [pc, #136]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b20      	ldr	r3, [pc, #128]	@ (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e032      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004078:	4b19      	ldr	r3, [pc, #100]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4916      	ldr	r1, [pc, #88]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004096:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	490e      	ldr	r1, [pc, #56]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040aa:	f000 f821 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	490a      	ldr	r1, [pc, #40]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	5ccb      	ldrb	r3, [r1, r3]
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	4a09      	ldr	r2, [pc, #36]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040c6:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd ff24 	bl	8001f18 <HAL_InitTick>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023c00 	.word	0x40023c00
 80040e0:	40023800 	.word	0x40023800
 80040e4:	0800992c 	.word	0x0800992c
 80040e8:	20000004 	.word	0x20000004
 80040ec:	20000008 	.word	0x20000008

080040f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f4:	b090      	sub	sp, #64	@ 0x40
 80040f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004108:	4b59      	ldr	r3, [pc, #356]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b08      	cmp	r3, #8
 8004112:	d00d      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x40>
 8004114:	2b08      	cmp	r3, #8
 8004116:	f200 80a1 	bhi.w	800425c <HAL_RCC_GetSysClockFreq+0x16c>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x34>
 800411e:	2b04      	cmp	r3, #4
 8004120:	d003      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x3a>
 8004122:	e09b      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004124:	4b53      	ldr	r3, [pc, #332]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x184>)
 8004126:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004128:	e09b      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800412a:	4b53      	ldr	r3, [pc, #332]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x188>)
 800412c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800412e:	e098      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004130:	4b4f      	ldr	r3, [pc, #316]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004138:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800413a:	4b4d      	ldr	r3, [pc, #308]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d028      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b4a      	ldr	r3, [pc, #296]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	2200      	movs	r2, #0
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	627a      	str	r2, [r7, #36]	@ 0x24
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004158:	2100      	movs	r1, #0
 800415a:	4b47      	ldr	r3, [pc, #284]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x188>)
 800415c:	fb03 f201 	mul.w	r2, r3, r1
 8004160:	2300      	movs	r3, #0
 8004162:	fb00 f303 	mul.w	r3, r0, r3
 8004166:	4413      	add	r3, r2
 8004168:	4a43      	ldr	r2, [pc, #268]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x188>)
 800416a:	fba0 1202 	umull	r1, r2, r0, r2
 800416e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004170:	460a      	mov	r2, r1
 8004172:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004176:	4413      	add	r3, r2
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417c:	2200      	movs	r2, #0
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	61fa      	str	r2, [r7, #28]
 8004182:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004186:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800418a:	f7fc f889 	bl	80002a0 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4613      	mov	r3, r2
 8004194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004196:	e053      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004198:	4b35      	ldr	r3, [pc, #212]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	099b      	lsrs	r3, r3, #6
 800419e:	2200      	movs	r2, #0
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	617a      	str	r2, [r7, #20]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041aa:	f04f 0b00 	mov.w	fp, #0
 80041ae:	4652      	mov	r2, sl
 80041b0:	465b      	mov	r3, fp
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	0159      	lsls	r1, r3, #5
 80041bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c0:	0150      	lsls	r0, r2, #5
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	ebb2 080a 	subs.w	r8, r2, sl
 80041ca:	eb63 090b 	sbc.w	r9, r3, fp
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041e2:	ebb2 0408 	subs.w	r4, r2, r8
 80041e6:	eb63 0509 	sbc.w	r5, r3, r9
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	00eb      	lsls	r3, r5, #3
 80041f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f8:	00e2      	lsls	r2, r4, #3
 80041fa:	4614      	mov	r4, r2
 80041fc:	461d      	mov	r5, r3
 80041fe:	eb14 030a 	adds.w	r3, r4, sl
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	eb45 030b 	adc.w	r3, r5, fp
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004216:	4629      	mov	r1, r5
 8004218:	028b      	lsls	r3, r1, #10
 800421a:	4621      	mov	r1, r4
 800421c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004220:	4621      	mov	r1, r4
 8004222:	028a      	lsls	r2, r1, #10
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422a:	2200      	movs	r2, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	60fa      	str	r2, [r7, #12]
 8004230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004234:	f7fc f834 	bl	80002a0 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4613      	mov	r3, r2
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x180>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	3301      	adds	r3, #1
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004250:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800425a:	e002      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x184>)
 800425e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004264:	4618      	mov	r0, r3
 8004266:	3740      	adds	r7, #64	@ 0x40
 8004268:	46bd      	mov	sp, r7
 800426a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800
 8004274:	00f42400 	.word	0x00f42400
 8004278:	017d7840 	.word	0x017d7840

0800427c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004280:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <HAL_RCC_GetHCLKFreq+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000004 	.word	0x20000004

08004294 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004294:	b084      	sub	sp, #16
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	f107 001c 	add.w	r0, r7, #28
 80042a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d123      	bne.n	80042f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80042c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d105      	bne.n	80042ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f001 fae8 	bl	80058c0 <USB_CoreReset>
 80042f0:	4603      	mov	r3, r0
 80042f2:	73fb      	strb	r3, [r7, #15]
 80042f4:	e01b      	b.n	800432e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 fadc 	bl	80058c0 <USB_CoreReset>
 8004308:	4603      	mov	r3, r0
 800430a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800430c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004318:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004320:	e005      	b.n	800432e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004326:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800432e:	7fbb      	ldrb	r3, [r7, #30]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10b      	bne.n	800434c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f043 0206 	orr.w	r2, r3, #6
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800434c:	7bfb      	ldrb	r3, [r7, #15]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004358:	b004      	add	sp, #16
 800435a:	4770      	bx	lr

0800435c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	4613      	mov	r3, r2
 8004368:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d165      	bne.n	800443c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a41      	ldr	r2, [pc, #260]	@ (8004478 <USB_SetTurnaroundTime+0x11c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d906      	bls.n	8004386 <USB_SetTurnaroundTime+0x2a>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4a40      	ldr	r2, [pc, #256]	@ (800447c <USB_SetTurnaroundTime+0x120>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d202      	bcs.n	8004386 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004380:	230f      	movs	r3, #15
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	e062      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4a3c      	ldr	r2, [pc, #240]	@ (800447c <USB_SetTurnaroundTime+0x120>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d306      	bcc.n	800439c <USB_SetTurnaroundTime+0x40>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4a3b      	ldr	r2, [pc, #236]	@ (8004480 <USB_SetTurnaroundTime+0x124>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d202      	bcs.n	800439c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004396:	230e      	movs	r3, #14
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e057      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4a38      	ldr	r2, [pc, #224]	@ (8004480 <USB_SetTurnaroundTime+0x124>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d306      	bcc.n	80043b2 <USB_SetTurnaroundTime+0x56>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4a37      	ldr	r2, [pc, #220]	@ (8004484 <USB_SetTurnaroundTime+0x128>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d202      	bcs.n	80043b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043ac:	230d      	movs	r3, #13
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e04c      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4a33      	ldr	r2, [pc, #204]	@ (8004484 <USB_SetTurnaroundTime+0x128>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d306      	bcc.n	80043c8 <USB_SetTurnaroundTime+0x6c>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4a32      	ldr	r2, [pc, #200]	@ (8004488 <USB_SetTurnaroundTime+0x12c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d802      	bhi.n	80043c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043c2:	230c      	movs	r3, #12
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e041      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004488 <USB_SetTurnaroundTime+0x12c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d906      	bls.n	80043de <USB_SetTurnaroundTime+0x82>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4a2e      	ldr	r2, [pc, #184]	@ (800448c <USB_SetTurnaroundTime+0x130>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d802      	bhi.n	80043de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043d8:	230b      	movs	r3, #11
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e036      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4a2a      	ldr	r2, [pc, #168]	@ (800448c <USB_SetTurnaroundTime+0x130>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d906      	bls.n	80043f4 <USB_SetTurnaroundTime+0x98>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4a29      	ldr	r2, [pc, #164]	@ (8004490 <USB_SetTurnaroundTime+0x134>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d802      	bhi.n	80043f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043ee:	230a      	movs	r3, #10
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e02b      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4a26      	ldr	r2, [pc, #152]	@ (8004490 <USB_SetTurnaroundTime+0x134>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d906      	bls.n	800440a <USB_SetTurnaroundTime+0xae>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4a25      	ldr	r2, [pc, #148]	@ (8004494 <USB_SetTurnaroundTime+0x138>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d202      	bcs.n	800440a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004404:	2309      	movs	r3, #9
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e020      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4a21      	ldr	r2, [pc, #132]	@ (8004494 <USB_SetTurnaroundTime+0x138>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d306      	bcc.n	8004420 <USB_SetTurnaroundTime+0xc4>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4a20      	ldr	r2, [pc, #128]	@ (8004498 <USB_SetTurnaroundTime+0x13c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d802      	bhi.n	8004420 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800441a:	2308      	movs	r3, #8
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e015      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4a1d      	ldr	r2, [pc, #116]	@ (8004498 <USB_SetTurnaroundTime+0x13c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d906      	bls.n	8004436 <USB_SetTurnaroundTime+0xda>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4a1c      	ldr	r2, [pc, #112]	@ (800449c <USB_SetTurnaroundTime+0x140>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d202      	bcs.n	8004436 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004430:	2307      	movs	r3, #7
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e00a      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004436:	2306      	movs	r3, #6
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e007      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d102      	bne.n	8004448 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004442:	2309      	movs	r3, #9
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e001      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004448:	2309      	movs	r3, #9
 800444a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	029b      	lsls	r3, r3, #10
 8004460:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004464:	431a      	orrs	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	00d8acbf 	.word	0x00d8acbf
 800447c:	00e4e1c0 	.word	0x00e4e1c0
 8004480:	00f42400 	.word	0x00f42400
 8004484:	01067380 	.word	0x01067380
 8004488:	011a499f 	.word	0x011a499f
 800448c:	01312cff 	.word	0x01312cff
 8004490:	014ca43f 	.word	0x014ca43f
 8004494:	016e3600 	.word	0x016e3600
 8004498:	01a6ab1f 	.word	0x01a6ab1f
 800449c:	01e84800 	.word	0x01e84800

080044a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f043 0201 	orr.w	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 0201 	bic.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d115      	bne.n	8004532 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004512:	200a      	movs	r0, #10
 8004514:	f7fd fd50 	bl	8001fb8 <HAL_Delay>
      ms += 10U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	330a      	adds	r3, #10
 800451c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f001 f93f 	bl	80057a2 <USB_GetMode>
 8004524:	4603      	mov	r3, r0
 8004526:	2b01      	cmp	r3, #1
 8004528:	d01e      	beq.n	8004568 <USB_SetCurrentMode+0x84>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2bc7      	cmp	r3, #199	@ 0xc7
 800452e:	d9f0      	bls.n	8004512 <USB_SetCurrentMode+0x2e>
 8004530:	e01a      	b.n	8004568 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d115      	bne.n	8004564 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004544:	200a      	movs	r0, #10
 8004546:	f7fd fd37 	bl	8001fb8 <HAL_Delay>
      ms += 10U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	330a      	adds	r3, #10
 800454e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f001 f926 	bl	80057a2 <USB_GetMode>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <USB_SetCurrentMode+0x84>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004560:	d9f0      	bls.n	8004544 <USB_SetCurrentMode+0x60>
 8004562:	e001      	b.n	8004568 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e005      	b.n	8004574 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2bc8      	cmp	r3, #200	@ 0xc8
 800456c:	d101      	bne.n	8004572 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800457c:	b084      	sub	sp, #16
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800458a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e009      	b.n	80045b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3340      	adds	r3, #64	@ 0x40
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	2200      	movs	r2, #0
 80045a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	3301      	adds	r3, #1
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b0e      	cmp	r3, #14
 80045b4:	d9f2      	bls.n	800459c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11c      	bne.n	80045f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045cc:	f043 0302 	orr.w	r3, r3, #2
 80045d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80045f6:	e00b      	b.n	8004610 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004616:	461a      	mov	r2, r3
 8004618:	2300      	movs	r3, #0
 800461a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800461c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10d      	bne.n	8004640 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800462c:	2100      	movs	r1, #0
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f968 	bl	8004904 <USB_SetDevSpeed>
 8004634:	e008      	b.n	8004648 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004636:	2101      	movs	r1, #1
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f963 	bl	8004904 <USB_SetDevSpeed>
 800463e:	e003      	b.n	8004648 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004640:	2103      	movs	r1, #3
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f95e 	bl	8004904 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004648:	2110      	movs	r1, #16
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8fa 	bl	8004844 <USB_FlushTxFifo>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f924 	bl	80048a8 <USB_FlushRxFifo>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004670:	461a      	mov	r2, r3
 8004672:	2300      	movs	r3, #0
 8004674:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467c:	461a      	mov	r2, r3
 800467e:	2300      	movs	r3, #0
 8004680:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004688:	461a      	mov	r2, r3
 800468a:	2300      	movs	r3, #0
 800468c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e043      	b.n	800471c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046aa:	d118      	bne.n	80046de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046be:	461a      	mov	r2, r3
 80046c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e013      	b.n	80046f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d4:	461a      	mov	r2, r3
 80046d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e008      	b.n	80046f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ea:	461a      	mov	r2, r3
 80046ec:	2300      	movs	r3, #0
 80046ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fc:	461a      	mov	r2, r3
 80046fe:	2300      	movs	r3, #0
 8004700:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470e:	461a      	mov	r2, r3
 8004710:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004714:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	3301      	adds	r3, #1
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004720:	461a      	mov	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4293      	cmp	r3, r2
 8004726:	d3b5      	bcc.n	8004694 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	e043      	b.n	80047b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004740:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004744:	d118      	bne.n	8004778 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004758:	461a      	mov	r2, r3
 800475a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	e013      	b.n	800478a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476e:	461a      	mov	r2, r3
 8004770:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e008      	b.n	800478a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004784:	461a      	mov	r2, r3
 8004786:	2300      	movs	r3, #0
 8004788:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004796:	461a      	mov	r2, r3
 8004798:	2300      	movs	r3, #0
 800479a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a8:	461a      	mov	r2, r3
 80047aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	3301      	adds	r3, #1
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047ba:	461a      	mov	r2, r3
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4293      	cmp	r3, r2
 80047c0:	d3b5      	bcc.n	800472e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f043 0210 	orr.w	r2, r3, #16
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	4b10      	ldr	r3, [pc, #64]	@ (8004840 <USB_DevInit+0x2c4>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004804:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f043 0208 	orr.w	r2, r3, #8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004818:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800481c:	2b01      	cmp	r3, #1
 800481e:	d107      	bne.n	8004830 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004830:	7dfb      	ldrb	r3, [r7, #23]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800483c:	b004      	add	sp, #16
 800483e:	4770      	bx	lr
 8004840:	803c3800 	.word	0x803c3800

08004844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3301      	adds	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800485e:	d901      	bls.n	8004864 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e01b      	b.n	800489c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	daf2      	bge.n	8004852 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	019b      	lsls	r3, r3, #6
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004888:	d901      	bls.n	800488e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e006      	b.n	800489c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b20      	cmp	r3, #32
 8004898:	d0f0      	beq.n	800487c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3301      	adds	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048c0:	d901      	bls.n	80048c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e018      	b.n	80048f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	daf2      	bge.n	80048b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2210      	movs	r2, #16
 80048d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048e4:	d901      	bls.n	80048ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e006      	b.n	80048f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d0f0      	beq.n	80048d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	68f9      	ldr	r1, [r7, #12]
 8004920:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004936:	b480      	push	{r7}
 8004938:	b087      	sub	sp, #28
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0306 	and.w	r3, r3, #6
 800494e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004956:	2300      	movs	r3, #0
 8004958:	75fb      	strb	r3, [r7, #23]
 800495a:	e00a      	b.n	8004972 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d002      	beq.n	8004968 <USB_GetDevSpeed+0x32>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b06      	cmp	r3, #6
 8004966:	d102      	bne.n	800496e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004968:	2302      	movs	r3, #2
 800496a:	75fb      	strb	r3, [r7, #23]
 800496c:	e001      	b.n	8004972 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800496e:	230f      	movs	r3, #15
 8004970:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004972:	7dfb      	ldrb	r3, [r7, #23]
}
 8004974:	4618      	mov	r0, r3
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d13a      	bne.n	8004a12 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	2101      	movs	r1, #1
 80049ae:	fa01 f303 	lsl.w	r3, r1, r3
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	68f9      	ldr	r1, [r7, #12]
 80049b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d155      	bne.n	8004a80 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	791b      	ldrb	r3, [r3, #4]
 80049ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	059b      	lsls	r3, r3, #22
 80049f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049f8:	4313      	orrs	r3, r2
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	e036      	b.n	8004a80 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a18:	69da      	ldr	r2, [r3, #28]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	2101      	movs	r1, #1
 8004a24:	fa01 f303 	lsl.w	r3, r1, r3
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d11a      	bne.n	8004a80 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	791b      	ldrb	r3, [r3, #4]
 8004a64:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a66:	430b      	orrs	r3, r1
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a7e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d161      	bne.n	8004b70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004abe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ac2:	d11f      	bne.n	8004b04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ade:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ae2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	2101      	movs	r1, #1
 8004b16:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	68f9      	ldr	r1, [r7, #12]
 8004b20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b24:	4013      	ands	r3, r2
 8004b26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	2101      	movs	r1, #1
 8004b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	0159      	lsls	r1, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	440b      	add	r3, r1
 8004b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b66:	4619      	mov	r1, r3
 8004b68:	4b35      	ldr	r3, [pc, #212]	@ (8004c40 <USB_DeactivateEndpoint+0x1b0>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	600b      	str	r3, [r1, #0]
 8004b6e:	e060      	b.n	8004c32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b86:	d11f      	bne.n	8004bc8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ba2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ba6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	2101      	movs	r1, #1
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	43db      	mvns	r3, r3
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004be8:	4013      	ands	r3, r2
 8004bea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	43db      	mvns	r3, r3
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	0159      	lsls	r1, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	440b      	add	r3, r1
 8004c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <USB_DeactivateEndpoint+0x1b4>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	ec337800 	.word	0xec337800
 8004c44:	eff37800 	.word	0xeff37800

08004c48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	@ 0x28
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	f040 817f 	bne.w	8004f68 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d132      	bne.n	8004cd8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c8c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c90:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cd0:	0cdb      	lsrs	r3, r3, #19
 8004cd2:	04db      	lsls	r3, r3, #19
 8004cd4:	6113      	str	r3, [r2, #16]
 8004cd6:	e097      	b.n	8004e08 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cf2:	0cdb      	lsrs	r3, r3, #19
 8004cf4:	04db      	lsls	r3, r3, #19
 8004cf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d1a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d11a      	bne.n	8004d58 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d903      	bls.n	8004d36 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d54:	6113      	str	r3, [r2, #16]
 8004d56:	e044      	b.n	8004de2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4413      	add	r3, r2
 8004d62:	1e5a      	subs	r2, r3, #1
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	8afb      	ldrh	r3, [r7, #22]
 8004d7e:	04d9      	lsls	r1, r3, #19
 8004d80:	4ba4      	ldr	r3, [pc, #656]	@ (8005014 <USB_EPStartXfer+0x3cc>)
 8004d82:	400b      	ands	r3, r1
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	0148      	lsls	r0, r1, #5
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	4401      	add	r1, r0
 8004d8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d90:	4313      	orrs	r3, r2
 8004d92:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	791b      	ldrb	r3, [r3, #4]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d122      	bne.n	8004de2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	0151      	lsls	r1, r2, #5
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	440a      	add	r2, r1
 8004db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004db6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004dba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	8afb      	ldrh	r3, [r7, #22]
 8004dcc:	075b      	lsls	r3, r3, #29
 8004dce:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004dd2:	69b9      	ldr	r1, [r7, #24]
 8004dd4:	0148      	lsls	r0, r1, #5
 8004dd6:	69f9      	ldr	r1, [r7, #28]
 8004dd8:	4401      	add	r1, r0
 8004dda:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004dde:	4313      	orrs	r3, r2
 8004de0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	0148      	lsls	r0, r1, #5
 8004dfc:	69f9      	ldr	r1, [r7, #28]
 8004dfe:	4401      	add	r1, r0
 8004e00:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e04:	4313      	orrs	r3, r2
 8004e06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d14b      	bne.n	8004ea6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e22:	461a      	mov	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	791b      	ldrb	r3, [r3, #4]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d128      	bne.n	8004e84 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d110      	bne.n	8004e64 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e00f      	b.n	8004e84 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e82:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e9e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e166      	b.n	8005174 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ec0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ec4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	791b      	ldrb	r3, [r3, #4]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d015      	beq.n	8004efa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 814e 	beq.w	8005174 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	2101      	movs	r1, #1
 8004eea:	fa01 f303 	lsl.w	r3, r1, r3
 8004eee:	69f9      	ldr	r1, [r7, #28]
 8004ef0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	634b      	str	r3, [r1, #52]	@ 0x34
 8004ef8:	e13c      	b.n	8005174 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d110      	bne.n	8004f2c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e00f      	b.n	8004f4c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	68d9      	ldr	r1, [r3, #12]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	781a      	ldrb	r2, [r3, #0]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	b298      	uxth	r0, r3
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4603      	mov	r3, r0
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f9b9 	bl	80052d8 <USB_WritePacket>
 8004f66:	e105      	b.n	8005174 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f82:	0cdb      	lsrs	r3, r3, #19
 8004f84:	04db      	lsls	r3, r3, #19
 8004f86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fa2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004fa6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004faa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d132      	bne.n	8005018 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe0:	69b9      	ldr	r1, [r7, #24]
 8004fe2:	0148      	lsls	r0, r1, #5
 8004fe4:	69f9      	ldr	r1, [r7, #28]
 8004fe6:	4401      	add	r1, r0
 8004fe8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004fec:	4313      	orrs	r3, r2
 8004fee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800500a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800500e:	6113      	str	r3, [r2, #16]
 8005010:	e062      	b.n	80050d8 <USB_EPStartXfer+0x490>
 8005012:	bf00      	nop
 8005014:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d123      	bne.n	8005068 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005036:	69b9      	ldr	r1, [r7, #24]
 8005038:	0148      	lsls	r0, r1, #5
 800503a:	69f9      	ldr	r1, [r7, #28]
 800503c:	4401      	add	r1, r0
 800503e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005042:	4313      	orrs	r3, r2
 8005044:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005060:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005064:	6113      	str	r3, [r2, #16]
 8005066:	e037      	b.n	80050d8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	4413      	add	r3, r2
 8005072:	1e5a      	subs	r2, r3, #1
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	8afa      	ldrh	r2, [r7, #22]
 8005084:	fb03 f202 	mul.w	r2, r3, r2
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	8afb      	ldrh	r3, [r7, #22]
 800509c:	04d9      	lsls	r1, r3, #19
 800509e:	4b38      	ldr	r3, [pc, #224]	@ (8005180 <USB_EPStartXfer+0x538>)
 80050a0:	400b      	ands	r3, r1
 80050a2:	69b9      	ldr	r1, [r7, #24]
 80050a4:	0148      	lsls	r0, r1, #5
 80050a6:	69f9      	ldr	r1, [r7, #28]
 80050a8:	4401      	add	r1, r0
 80050aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050ae:	4313      	orrs	r3, r2
 80050b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c8:	69b9      	ldr	r1, [r7, #24]
 80050ca:	0148      	lsls	r0, r1, #5
 80050cc:	69f9      	ldr	r1, [r7, #28]
 80050ce:	4401      	add	r1, r0
 80050d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050d4:	4313      	orrs	r3, r2
 80050d6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10d      	bne.n	80050fa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	68d9      	ldr	r1, [r3, #12]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f6:	460a      	mov	r2, r1
 80050f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	791b      	ldrb	r3, [r3, #4]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d128      	bne.n	8005154 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d110      	bne.n	8005134 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800512c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e00f      	b.n	8005154 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800514e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005152:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	440a      	add	r2, r1
 800516a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800516e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	1ff80000 	.word	0x1ff80000

08005184 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	785b      	ldrb	r3, [r3, #1]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d14a      	bne.n	8005238 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ba:	f040 8086 	bne.w	80052ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	7812      	ldrb	r2, [r2, #0]
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005200:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005204:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3301      	adds	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005212:	4293      	cmp	r3, r2
 8005214:	d902      	bls.n	800521c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
          break;
 800521a:	e056      	b.n	80052ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005234:	d0e7      	beq.n	8005206 <USB_EPStopXfer+0x82>
 8005236:	e048      	b.n	80052ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800524c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005250:	d13b      	bne.n	80052ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	7812      	ldrb	r2, [r2, #0]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005270:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005274:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	7812      	ldrb	r2, [r2, #0]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005294:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005298:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3301      	adds	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d902      	bls.n	80052b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
          break;
 80052ae:	e00c      	b.n	80052ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052c8:	d0e7      	beq.n	800529a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052d8:	b480      	push	{r7}
 80052da:	b089      	sub	sp, #36	@ 0x24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4611      	mov	r1, r2
 80052e4:	461a      	mov	r2, r3
 80052e6:	460b      	mov	r3, r1
 80052e8:	71fb      	strb	r3, [r7, #7]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d123      	bne.n	8005346 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052fe:	88bb      	ldrh	r3, [r7, #4]
 8005300:	3303      	adds	r3, #3
 8005302:	089b      	lsrs	r3, r3, #2
 8005304:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005306:	2300      	movs	r3, #0
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	e018      	b.n	800533e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	031a      	lsls	r2, r3, #12
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005318:	461a      	mov	r2, r3
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3301      	adds	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	3301      	adds	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3301      	adds	r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	3301      	adds	r3, #1
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	429a      	cmp	r2, r3
 8005344:	d3e2      	bcc.n	800530c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3724      	adds	r7, #36	@ 0x24
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005354:	b480      	push	{r7}
 8005356:	b08b      	sub	sp, #44	@ 0x2c
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	4613      	mov	r3, r2
 8005360:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	089b      	lsrs	r3, r3, #2
 800536e:	b29b      	uxth	r3, r3
 8005370:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800537a:	2300      	movs	r3, #0
 800537c:	623b      	str	r3, [r7, #32]
 800537e:	e014      	b.n	80053aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	601a      	str	r2, [r3, #0]
    pDest++;
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	3301      	adds	r3, #1
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	3301      	adds	r3, #1
 8005396:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	3301      	adds	r3, #1
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	3301      	adds	r3, #1
 80053a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	3301      	adds	r3, #1
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	6a3a      	ldr	r2, [r7, #32]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d3e6      	bcc.n	8005380 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053b2:	8bfb      	ldrh	r3, [r7, #30]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01e      	beq.n	80053f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053c2:	461a      	mov	r2, r3
 80053c4:	f107 0310 	add.w	r3, r7, #16
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	701a      	strb	r2, [r3, #0]
      i++;
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	3301      	adds	r3, #1
 80053e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	3301      	adds	r3, #1
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80053ea:	8bfb      	ldrh	r3, [r7, #30]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053f0:	8bfb      	ldrh	r3, [r7, #30]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1ea      	bne.n	80053cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	372c      	adds	r7, #44	@ 0x2c
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	785b      	ldrb	r3, [r3, #1]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d12c      	bne.n	800547a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	db12      	blt.n	8005458 <USB_EPSetStall+0x54>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00f      	beq.n	8005458 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005452:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005456:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005472:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e02b      	b.n	80054d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	db12      	blt.n	80054b2 <USB_EPSetStall+0xae>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00f      	beq.n	80054b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d128      	bne.n	800554e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005516:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800551a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	791b      	ldrb	r3, [r3, #4]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d003      	beq.n	800552c <USB_EPClearStall+0x4c>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	791b      	ldrb	r3, [r3, #4]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d138      	bne.n	800559e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	e027      	b.n	800559e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005568:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800556c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	791b      	ldrb	r3, [r3, #4]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d003      	beq.n	800557e <USB_EPClearStall+0x9e>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	791b      	ldrb	r3, [r3, #4]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d10f      	bne.n	800559e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800559c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055e6:	4313      	orrs	r3, r2
 80055e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005626:	f023 0302 	bic.w	r3, r3, #2
 800562a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005654:	f023 0303 	bic.w	r3, r3, #3
 8005658:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005668:	f043 0302 	orr.w	r3, r3, #2
 800566c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005694:	68fb      	ldr	r3, [r7, #12]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	4013      	ands	r3, r2
 80056c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	0c1b      	lsrs	r3, r3, #16
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	4013      	ands	r3, r2
 80056f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	b29b      	uxth	r3, r3
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	4013      	ands	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005738:	68bb      	ldr	r3, [r7, #8]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005746:	b480      	push	{r7}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005768:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	fa22 f303 	lsr.w	r3, r2, r3
 8005776:	01db      	lsls	r3, r3, #7
 8005778:	b2db      	uxtb	r3, r3
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4013      	ands	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005794:	68bb      	ldr	r3, [r7, #8]
}
 8005796:	4618      	mov	r0, r3
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0301 	and.w	r3, r3, #1
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80057dc:	f023 0307 	bic.w	r3, r3, #7
 80057e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	460b      	mov	r3, r1
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	333c      	adds	r3, #60	@ 0x3c
 800581a:	3304      	adds	r3, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4a26      	ldr	r2, [pc, #152]	@ (80058bc <USB_EP0_OutStart+0xb8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d90a      	bls.n	800583e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005838:	d101      	bne.n	800583e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e037      	b.n	80058ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005844:	461a      	mov	r2, r3
 8005846:	2300      	movs	r3, #0
 8005848:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005858:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800585c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800586c:	f043 0318 	orr.w	r3, r3, #24
 8005870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005880:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005884:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d10f      	bne.n	80058ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005892:	461a      	mov	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058a6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80058aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	4f54300a 	.word	0x4f54300a

080058c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058d8:	d901      	bls.n	80058de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e01b      	b.n	8005916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	daf2      	bge.n	80058cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005902:	d901      	bls.n	8005908 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e006      	b.n	8005916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b01      	cmp	r3, #1
 8005912:	d0f0      	beq.n	80058f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8005928:	f001 f936 	bl	8006b98 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800592c:	2200      	movs	r2, #0
 800592e:	4912      	ldr	r1, [pc, #72]	@ (8005978 <MX_USB_DEVICE_Init+0x54>)
 8005930:	4812      	ldr	r0, [pc, #72]	@ (800597c <MX_USB_DEVICE_Init+0x58>)
 8005932:	f001 fc69 	bl	8007208 <USBD_Init>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800593c:	f7fc f96e 	bl	8001c1c <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8005940:	490f      	ldr	r1, [pc, #60]	@ (8005980 <MX_USB_DEVICE_Init+0x5c>)
 8005942:	480e      	ldr	r0, [pc, #56]	@ (800597c <MX_USB_DEVICE_Init+0x58>)
 8005944:	f001 fc8c 	bl	8007260 <USBD_RegisterClass>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800594e:	f7fc f965 	bl	8001c1c <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8005952:	490c      	ldr	r1, [pc, #48]	@ (8005984 <MX_USB_DEVICE_Init+0x60>)
 8005954:	4809      	ldr	r0, [pc, #36]	@ (800597c <MX_USB_DEVICE_Init+0x58>)
 8005956:	f000 fe11 	bl	800657c <USBD_CDC_ACM_RegisterInterface>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8005960:	f7fc f95c 	bl	8001c1c <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8005964:	4805      	ldr	r0, [pc, #20]	@ (800597c <MX_USB_DEVICE_Init+0x58>)
 8005966:	f001 fcb9 	bl	80072dc <USBD_Start>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8005970:	f7fc f954 	bl	8001c1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005974:	bf00      	nop
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20000024 	.word	0x20000024
 800597c:	200007e0 	.word	0x200007e0
 8005980:	20000154 	.word	0x20000154
 8005984:	20000010 	.word	0x20000010

08005988 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	01db      	lsls	r3, r3, #7
 8005996:	4a06      	ldr	r2, [pc, #24]	@ (80059b0 <CDC_Init+0x28>)
 8005998:	441a      	add	r2, r3
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	4905      	ldr	r1, [pc, #20]	@ (80059b4 <CDC_Init+0x2c>)
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fe26 	bl	80065f0 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 80059a4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000afc 	.word	0x20000afc
 80059b4:	200007e0 	.word	0x200007e0

080059b8 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 80059c2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	603a      	str	r2, [r7, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	4603      	mov	r3, r0
 80059dc:	71fb      	strb	r3, [r7, #7]
 80059de:	460b      	mov	r3, r1
 80059e0:	71bb      	strb	r3, [r7, #6]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80059e6:	79bb      	ldrb	r3, [r7, #6]
 80059e8:	2b23      	cmp	r3, #35	@ 0x23
 80059ea:	f200 80b6 	bhi.w	8005b5a <CDC_Control+0x18a>
 80059ee:	a201      	add	r2, pc, #4	@ (adr r2, 80059f4 <CDC_Control+0x24>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005b5b 	.word	0x08005b5b
 80059f8:	08005b5b 	.word	0x08005b5b
 80059fc:	08005b5b 	.word	0x08005b5b
 8005a00:	08005b5b 	.word	0x08005b5b
 8005a04:	08005b5b 	.word	0x08005b5b
 8005a08:	08005b5b 	.word	0x08005b5b
 8005a0c:	08005b5b 	.word	0x08005b5b
 8005a10:	08005b5b 	.word	0x08005b5b
 8005a14:	08005b5b 	.word	0x08005b5b
 8005a18:	08005b5b 	.word	0x08005b5b
 8005a1c:	08005b5b 	.word	0x08005b5b
 8005a20:	08005b5b 	.word	0x08005b5b
 8005a24:	08005b5b 	.word	0x08005b5b
 8005a28:	08005b5b 	.word	0x08005b5b
 8005a2c:	08005b5b 	.word	0x08005b5b
 8005a30:	08005b5b 	.word	0x08005b5b
 8005a34:	08005b5b 	.word	0x08005b5b
 8005a38:	08005b5b 	.word	0x08005b5b
 8005a3c:	08005b5b 	.word	0x08005b5b
 8005a40:	08005b5b 	.word	0x08005b5b
 8005a44:	08005b5b 	.word	0x08005b5b
 8005a48:	08005b5b 	.word	0x08005b5b
 8005a4c:	08005b5b 	.word	0x08005b5b
 8005a50:	08005b5b 	.word	0x08005b5b
 8005a54:	08005b5b 	.word	0x08005b5b
 8005a58:	08005b5b 	.word	0x08005b5b
 8005a5c:	08005b5b 	.word	0x08005b5b
 8005a60:	08005b5b 	.word	0x08005b5b
 8005a64:	08005b5b 	.word	0x08005b5b
 8005a68:	08005b5b 	.word	0x08005b5b
 8005a6c:	08005b5b 	.word	0x08005b5b
 8005a70:	08005b5b 	.word	0x08005b5b
 8005a74:	08005a85 	.word	0x08005a85
 8005a78:	08005ae5 	.word	0x08005ae5
 8005a7c:	08005b5b 	.word	0x08005b5b
 8005a80:	08005b5b 	.word	0x08005b5b
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	3302      	adds	r3, #2
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8005a9c:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	3303      	adds	r3, #3
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	061b      	lsls	r3, r3, #24
 8005aa6:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4a2f      	ldr	r2, [pc, #188]	@ (8005b6c <CDC_Control+0x19c>)
 8005aae:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	7911      	ldrb	r1, [r2, #4]
 8005ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b6c <CDC_Control+0x19c>)
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4413      	add	r3, r2
 8005abe:	460a      	mov	r2, r1
 8005ac0:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	7951      	ldrb	r1, [r2, #5]
 8005ac8:	4a28      	ldr	r2, [pc, #160]	@ (8005b6c <CDC_Control+0x19c>)
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	460a      	mov	r2, r1
 8005ad0:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	7991      	ldrb	r1, [r2, #6]
 8005ad8:	4a24      	ldr	r2, [pc, #144]	@ (8005b6c <CDC_Control+0x19c>)
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	4413      	add	r3, r2
 8005ade:	460a      	mov	r2, r1
 8005ae0:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8005ae2:	e03b      	b.n	8005b5c <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	4a21      	ldr	r2, [pc, #132]	@ (8005b6c <CDC_Control+0x19c>)
 8005ae8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b6c <CDC_Control+0x19c>)
 8005af6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005afa:	0a1a      	lsrs	r2, r3, #8
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	3301      	adds	r3, #1
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	4a19      	ldr	r2, [pc, #100]	@ (8005b6c <CDC_Control+0x19c>)
 8005b08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b0c:	0c1a      	lsrs	r2, r3, #16
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	3302      	adds	r3, #2
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	4a14      	ldr	r2, [pc, #80]	@ (8005b6c <CDC_Control+0x19c>)
 8005b1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b1e:	0e1a      	lsrs	r2, r3, #24
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	3303      	adds	r3, #3
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	3204      	adds	r2, #4
 8005b2e:	490f      	ldr	r1, [pc, #60]	@ (8005b6c <CDC_Control+0x19c>)
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	440b      	add	r3, r1
 8005b34:	791b      	ldrb	r3, [r3, #4]
 8005b36:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	3205      	adds	r2, #5
 8005b3e:	490b      	ldr	r1, [pc, #44]	@ (8005b6c <CDC_Control+0x19c>)
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	440b      	add	r3, r1
 8005b44:	795b      	ldrb	r3, [r3, #5]
 8005b46:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	3206      	adds	r2, #6
 8005b4e:	4907      	ldr	r1, [pc, #28]	@ (8005b6c <CDC_Control+0x19c>)
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	440b      	add	r3, r1
 8005b54:	799b      	ldrb	r3, [r3, #6]
 8005b56:	7013      	strb	r3, [r2, #0]
    break;
 8005b58:	e000      	b.n	8005b5c <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005b5a:	bf00      	nop
  }

  return (USBD_OK);
 8005b5c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000b7c 	.word	0x20000b7c

08005b70 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f825 	bl	8005bd8 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	4907      	ldr	r1, [pc, #28]	@ (8005bb0 <CDC_Receive+0x40>)
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fd2b 	bl	80065f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	4904      	ldr	r1, [pc, #16]	@ (8005bb0 <CDC_Receive+0x40>)
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fd86 	bl	80066b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005ba4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	200007e0 	.word	0x200007e0

08005bb4 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	6039      	str	r1, [r7, #0]
 8005be2:	71fb      	strb	r3, [r7, #7]
 8005be4:	4613      	mov	r3, r2
 8005be6:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005bf6:	fb02 f303 	mul.w	r3, r2, r3
 8005bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8005c34 <CDC_Transmit+0x5c>)
 8005bfc:	4413      	add	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e00d      	b.n	8005c2a <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8005c0e:	88bb      	ldrh	r3, [r7, #4]
 8005c10:	79f8      	ldrb	r0, [r7, #7]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	4908      	ldr	r1, [pc, #32]	@ (8005c38 <CDC_Transmit+0x60>)
 8005c16:	f000 fcc7 	bl	80065a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	4906      	ldr	r1, [pc, #24]	@ (8005c38 <CDC_Transmit+0x60>)
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fd04 	bl	800662c <USBD_CDC_TransmitPacket>
 8005c24:	4603      	mov	r3, r0
 8005c26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000d9c 	.word	0x20000d9c
 8005c38:	200007e0 	.word	0x200007e0

08005c3c <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	6039      	str	r1, [r7, #0]
 8005c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2212      	movs	r2, #18
 8005c4c:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8005c4e:	4b03      	ldr	r3, [pc, #12]	@ (8005c5c <USBD_DeviceDescriptor+0x20>)
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	20000040 	.word	0x20000040

08005c60 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	6039      	str	r1, [r7, #0]
 8005c6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005c72:	4b03      	ldr	r3, [pc, #12]	@ (8005c80 <USBD_LangIDStrDescriptor+0x20>)
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	20000054 	.word	0x20000054

08005c84 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	6039      	str	r1, [r7, #0]
 8005c8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d105      	bne.n	8005ca2 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	4907      	ldr	r1, [pc, #28]	@ (8005cb8 <USBD_ProductStrDescriptor+0x34>)
 8005c9a:	4808      	ldr	r0, [pc, #32]	@ (8005cbc <USBD_ProductStrDescriptor+0x38>)
 8005c9c:	f002 fb5d 	bl	800835a <USBD_GetString>
 8005ca0:	e004      	b.n	8005cac <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	4904      	ldr	r1, [pc, #16]	@ (8005cb8 <USBD_ProductStrDescriptor+0x34>)
 8005ca6:	4805      	ldr	r0, [pc, #20]	@ (8005cbc <USBD_ProductStrDescriptor+0x38>)
 8005ca8:	f002 fb57 	bl	800835a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005cac:	4b02      	ldr	r3, [pc, #8]	@ (8005cb8 <USBD_ProductStrDescriptor+0x34>)
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000b84 	.word	0x20000b84
 8005cbc:	080098b8 	.word	0x080098b8

08005cc0 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	6039      	str	r1, [r7, #0]
 8005cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	4904      	ldr	r1, [pc, #16]	@ (8005ce0 <USBD_ManufacturerStrDescriptor+0x20>)
 8005cd0:	4804      	ldr	r0, [pc, #16]	@ (8005ce4 <USBD_ManufacturerStrDescriptor+0x24>)
 8005cd2:	f002 fb42 	bl	800835a <USBD_GetString>
  return USBD_StrDesc;
 8005cd6:	4b02      	ldr	r3, [pc, #8]	@ (8005ce0 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20000b84 	.word	0x20000b84
 8005ce4:	080098d0 	.word	0x080098d0

08005ce8 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	6039      	str	r1, [r7, #0]
 8005cf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	221a      	movs	r2, #26
 8005cf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005cfa:	f000 f843 	bl	8005d84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8005cfe:	4b02      	ldr	r3, [pc, #8]	@ (8005d08 <USBD_SerialStrDescriptor+0x20>)
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20000058 	.word	0x20000058

08005d0c <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	6039      	str	r1, [r7, #0]
 8005d16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d105      	bne.n	8005d2a <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	4907      	ldr	r1, [pc, #28]	@ (8005d40 <USBD_ConfigStrDescriptor+0x34>)
 8005d22:	4808      	ldr	r0, [pc, #32]	@ (8005d44 <USBD_ConfigStrDescriptor+0x38>)
 8005d24:	f002 fb19 	bl	800835a <USBD_GetString>
 8005d28:	e004      	b.n	8005d34 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	4904      	ldr	r1, [pc, #16]	@ (8005d40 <USBD_ConfigStrDescriptor+0x34>)
 8005d2e:	4805      	ldr	r0, [pc, #20]	@ (8005d44 <USBD_ConfigStrDescriptor+0x38>)
 8005d30:	f002 fb13 	bl	800835a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d34:	4b02      	ldr	r3, [pc, #8]	@ (8005d40 <USBD_ConfigStrDescriptor+0x34>)
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000b84 	.word	0x20000b84
 8005d44:	080098e4 	.word	0x080098e4

08005d48 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d105      	bne.n	8005d66 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	4907      	ldr	r1, [pc, #28]	@ (8005d7c <USBD_InterfaceStrDescriptor+0x34>)
 8005d5e:	4808      	ldr	r0, [pc, #32]	@ (8005d80 <USBD_InterfaceStrDescriptor+0x38>)
 8005d60:	f002 fafb 	bl	800835a <USBD_GetString>
 8005d64:	e004      	b.n	8005d70 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	4904      	ldr	r1, [pc, #16]	@ (8005d7c <USBD_InterfaceStrDescriptor+0x34>)
 8005d6a:	4805      	ldr	r0, [pc, #20]	@ (8005d80 <USBD_InterfaceStrDescriptor+0x38>)
 8005d6c:	f002 faf5 	bl	800835a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d70:	4b02      	ldr	r3, [pc, #8]	@ (8005d7c <USBD_InterfaceStrDescriptor+0x34>)
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000b84 	.word	0x20000b84
 8005d80:	080098f4 	.word	0x080098f4

08005d84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <Get_SerialNum+0x44>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d90:	4b0e      	ldr	r3, [pc, #56]	@ (8005dcc <Get_SerialNum+0x48>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005d96:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd0 <Get_SerialNum+0x4c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005daa:	2208      	movs	r2, #8
 8005dac:	4909      	ldr	r1, [pc, #36]	@ (8005dd4 <Get_SerialNum+0x50>)
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f814 	bl	8005ddc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005db4:	2204      	movs	r2, #4
 8005db6:	4908      	ldr	r1, [pc, #32]	@ (8005dd8 <Get_SerialNum+0x54>)
 8005db8:	68b8      	ldr	r0, [r7, #8]
 8005dba:	f000 f80f 	bl	8005ddc <IntToUnicode>
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	1fff7a10 	.word	0x1fff7a10
 8005dcc:	1fff7a14 	.word	0x1fff7a14
 8005dd0:	1fff7a18 	.word	0x1fff7a18
 8005dd4:	2000005a 	.word	0x2000005a
 8005dd8:	2000006a 	.word	0x2000006a

08005ddc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	75fb      	strb	r3, [r7, #23]
 8005df2:	e027      	b.n	8005e44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	0f1b      	lsrs	r3, r3, #28
 8005df8:	2b09      	cmp	r3, #9
 8005dfa:	d80b      	bhi.n	8005e14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	0f1b      	lsrs	r3, r3, #28
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	4619      	mov	r1, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	440b      	add	r3, r1
 8005e0c:	3230      	adds	r2, #48	@ 0x30
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	e00a      	b.n	8005e2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	0f1b      	lsrs	r3, r3, #28
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	4619      	mov	r1, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	440b      	add	r3, r1
 8005e24:	3237      	adds	r2, #55	@ 0x37
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	3301      	adds	r3, #1
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4413      	add	r3, r2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	3301      	adds	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
 8005e44:	7dfa      	ldrb	r2, [r7, #23]
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d3d3      	bcc.n	8005df4 <IntToUnicode+0x18>
  }
}
 8005e4c:	bf00      	nop
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	73fb      	strb	r3, [r7, #15]
 8005e70:	e0c6      	b.n	8006000 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005e78:	fb02 f303 	mul.w	r3, r2, r3
 8005e7c:	4a65      	ldr	r2, [pc, #404]	@ (8006014 <USBD_CDC_Init+0x1b8>)
 8005e7e:	4413      	add	r3, r2
 8005e80:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	7c1b      	ldrb	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d13d      	bne.n	8005f06 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	4a62      	ldr	r2, [pc, #392]	@ (8006018 <USBD_CDC_Init+0x1bc>)
 8005e8e:	5cd1      	ldrb	r1, [r2, r3]
 8005e90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e94:	2202      	movs	r2, #2
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f002 fcd1 	bl	800883e <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	4a5e      	ldr	r2, [pc, #376]	@ (8006018 <USBD_CDC_Init+0x1bc>)
 8005ea0:	5cd3      	ldrb	r3, [r2, r3]
 8005ea2:	f003 020f 	and.w	r2, r3, #15
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	3324      	adds	r3, #36	@ 0x24
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	4a58      	ldr	r2, [pc, #352]	@ (800601c <USBD_CDC_Init+0x1c0>)
 8005ebc:	5cd1      	ldrb	r1, [r2, r3]
 8005ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f002 fcba 	bl	800883e <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	4a53      	ldr	r2, [pc, #332]	@ (800601c <USBD_CDC_Init+0x1c0>)
 8005ece:	5cd3      	ldrb	r3, [r2, r3]
 8005ed0:	f003 020f 	and.w	r2, r3, #15
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	4a4d      	ldr	r2, [pc, #308]	@ (8006020 <USBD_CDC_Init+0x1c4>)
 8005eec:	5cd3      	ldrb	r3, [r2, r3]
 8005eee:	f003 020f 	and.w	r2, r3, #15
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	3326      	adds	r3, #38	@ 0x26
 8005f00:	2210      	movs	r2, #16
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	e03a      	b.n	8005f7c <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	4a43      	ldr	r2, [pc, #268]	@ (8006018 <USBD_CDC_Init+0x1bc>)
 8005f0a:	5cd1      	ldrb	r1, [r2, r3]
 8005f0c:	2340      	movs	r3, #64	@ 0x40
 8005f0e:	2202      	movs	r2, #2
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f002 fc94 	bl	800883e <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	4a3f      	ldr	r2, [pc, #252]	@ (8006018 <USBD_CDC_Init+0x1bc>)
 8005f1a:	5cd3      	ldrb	r3, [r2, r3]
 8005f1c:	f003 020f 	and.w	r2, r3, #15
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	3324      	adds	r3, #36	@ 0x24
 8005f2e:	2201      	movs	r2, #1
 8005f30:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	4a39      	ldr	r2, [pc, #228]	@ (800601c <USBD_CDC_Init+0x1c0>)
 8005f36:	5cd1      	ldrb	r1, [r2, r3]
 8005f38:	2340      	movs	r3, #64	@ 0x40
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f002 fc7e 	bl	800883e <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	4a35      	ldr	r2, [pc, #212]	@ (800601c <USBD_CDC_Init+0x1c0>)
 8005f46:	5cd3      	ldrb	r3, [r2, r3]
 8005f48:	f003 020f 	and.w	r2, r3, #15
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	4a2f      	ldr	r2, [pc, #188]	@ (8006020 <USBD_CDC_Init+0x1c4>)
 8005f64:	5cd3      	ldrb	r3, [r2, r3]
 8005f66:	f003 020f 	and.w	r2, r3, #15
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	3326      	adds	r3, #38	@ 0x26
 8005f78:	2210      	movs	r2, #16
 8005f7a:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	4a28      	ldr	r2, [pc, #160]	@ (8006020 <USBD_CDC_Init+0x1c4>)
 8005f80:	5cd1      	ldrb	r1, [r2, r3]
 8005f82:	2308      	movs	r3, #8
 8005f84:	2203      	movs	r2, #3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f002 fc59 	bl	800883e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	4a24      	ldr	r2, [pc, #144]	@ (8006020 <USBD_CDC_Init+0x1c4>)
 8005f90:	5cd3      	ldrb	r3, [r2, r3]
 8005f92:	f003 020f 	and.w	r2, r3, #15
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3324      	adds	r3, #36	@ 0x24
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	7bfa      	ldrb	r2, [r7, #15]
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	7c1b      	ldrb	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	4a12      	ldr	r2, [pc, #72]	@ (800601c <USBD_CDC_Init+0x1c0>)
 8005fd2:	5cd1      	ldrb	r1, [r2, r3]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f002 fd1c 	bl	8008a1c <USBD_LL_PrepareReceive>
 8005fe4:	e009      	b.n	8005ffa <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800601c <USBD_CDC_Init+0x1c0>)
 8005fea:	5cd1      	ldrb	r1, [r2, r3]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ff2:	2340      	movs	r3, #64	@ 0x40
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f002 fd11 	bl	8008a1c <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f43f af35 	beq.w	8005e72 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000d9c 	.word	0x20000d9c
 8006018:	20000d84 	.word	0x20000d84
 800601c:	20000d88 	.word	0x20000d88
 8006020:	20000d8c 	.word	0x20000d8c

08006024 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006030:	2300      	movs	r3, #0
 8006032:	73fb      	strb	r3, [r7, #15]
 8006034:	e057      	b.n	80060e6 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	4a2f      	ldr	r2, [pc, #188]	@ (80060f8 <USBD_CDC_DeInit+0xd4>)
 800603a:	5cd3      	ldrb	r3, [r2, r3]
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f002 fc23 	bl	800888a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	4a2c      	ldr	r2, [pc, #176]	@ (80060f8 <USBD_CDC_DeInit+0xd4>)
 8006048:	5cd3      	ldrb	r3, [r2, r3]
 800604a:	f003 020f 	and.w	r2, r3, #15
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	3324      	adds	r3, #36	@ 0x24
 800605c:	2200      	movs	r2, #0
 800605e:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	4a26      	ldr	r2, [pc, #152]	@ (80060fc <USBD_CDC_DeInit+0xd8>)
 8006064:	5cd3      	ldrb	r3, [r2, r3]
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f002 fc0e 	bl	800888a <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	4a22      	ldr	r2, [pc, #136]	@ (80060fc <USBD_CDC_DeInit+0xd8>)
 8006072:	5cd3      	ldrb	r3, [r2, r3]
 8006074:	f003 020f 	and.w	r2, r3, #15
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	4613      	mov	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	440b      	add	r3, r1
 8006084:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006088:	2200      	movs	r2, #0
 800608a:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	4a1c      	ldr	r2, [pc, #112]	@ (8006100 <USBD_CDC_DeInit+0xdc>)
 8006090:	5cd3      	ldrb	r3, [r2, r3]
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f002 fbf8 	bl	800888a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	4a18      	ldr	r2, [pc, #96]	@ (8006100 <USBD_CDC_DeInit+0xdc>)
 800609e:	5cd3      	ldrb	r3, [r2, r3]
 80060a0:	f003 020f 	and.w	r2, r3, #15
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	3324      	adds	r3, #36	@ 0x24
 80060b2:	2200      	movs	r2, #0
 80060b4:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	4a11      	ldr	r2, [pc, #68]	@ (8006100 <USBD_CDC_DeInit+0xdc>)
 80060ba:	5cd3      	ldrb	r3, [r2, r3]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3326      	adds	r3, #38	@ 0x26
 80060ce:	2200      	movs	r2, #0
 80060d0:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	7bfa      	ldrb	r2, [r7, #15]
 80060dc:	4610      	mov	r0, r2
 80060de:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	3301      	adds	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0a4      	beq.n	8006036 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20000d84 	.word	0x20000d84
 80060fc:	20000d88 	.word	0x20000d88
 8006100:	20000d8c 	.word	0x20000d8c

08006104 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006104:	b590      	push	{r4, r7, lr}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006122:	2300      	movs	r3, #0
 8006124:	757b      	strb	r3, [r7, #21]
 8006126:	e015      	b.n	8006154 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	889b      	ldrh	r3, [r3, #4]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	7d7b      	ldrb	r3, [r7, #21]
 8006130:	496d      	ldr	r1, [pc, #436]	@ (80062e8 <USBD_CDC_Setup+0x1e4>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	429a      	cmp	r2, r3
 8006136:	d007      	beq.n	8006148 <USBD_CDC_Setup+0x44>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	889b      	ldrh	r3, [r3, #4]
 800613c:	b2da      	uxtb	r2, r3
 800613e:	7d7b      	ldrb	r3, [r7, #21]
 8006140:	496a      	ldr	r1, [pc, #424]	@ (80062ec <USBD_CDC_Setup+0x1e8>)
 8006142:	5ccb      	ldrb	r3, [r1, r3]
 8006144:	429a      	cmp	r2, r3
 8006146:	d102      	bne.n	800614e <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8006148:	7d7b      	ldrb	r3, [r7, #21]
 800614a:	75bb      	strb	r3, [r7, #22]
      break;
 800614c:	e005      	b.n	800615a <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800614e:	7d7b      	ldrb	r3, [r7, #21]
 8006150:	3301      	adds	r3, #1
 8006152:	757b      	strb	r3, [r7, #21]
 8006154:	7d7b      	ldrb	r3, [r7, #21]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0e6      	beq.n	8006128 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800615a:	7dbb      	ldrb	r3, [r7, #22]
 800615c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006160:	fb02 f303 	mul.w	r3, r2, r3
 8006164:	4a62      	ldr	r2, [pc, #392]	@ (80062f0 <USBD_CDC_Setup+0x1ec>)
 8006166:	4413      	add	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006172:	2b00      	cmp	r3, #0
 8006174:	d04a      	beq.n	800620c <USBD_CDC_Setup+0x108>
 8006176:	2b20      	cmp	r3, #32
 8006178:	f040 80aa 	bne.w	80062d0 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	88db      	ldrh	r3, [r3, #6]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d038      	beq.n	80061f6 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	b25b      	sxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	da1d      	bge.n	80061ca <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006194:	689c      	ldr	r4, [r3, #8]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	7859      	ldrb	r1, [r3, #1]
 800619a:	7dbb      	ldrb	r3, [r7, #22]
 800619c:	025b      	lsls	r3, r3, #9
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	441a      	add	r2, r3
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	88db      	ldrh	r3, [r3, #6]
 80061a6:	7db8      	ldrb	r0, [r7, #22]
 80061a8:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	88db      	ldrh	r3, [r3, #6]
 80061ae:	2b07      	cmp	r3, #7
 80061b0:	bf28      	it	cs
 80061b2:	2307      	movcs	r3, #7
 80061b4:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 80061b6:	7dbb      	ldrb	r3, [r7, #22]
 80061b8:	025b      	lsls	r3, r3, #9
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4413      	add	r3, r2
 80061be:	89fa      	ldrh	r2, [r7, #14]
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f002 f929 	bl	800841a <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 80061c8:	e089      	b.n	80062de <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	785a      	ldrb	r2, [r3, #1]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	88db      	ldrh	r3, [r3, #6]
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80061e0:	7dbb      	ldrb	r3, [r7, #22]
 80061e2:	025b      	lsls	r3, r3, #9
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	18d1      	adds	r1, r2, r3
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	88db      	ldrh	r3, [r3, #6]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f002 f93f 	bl	8008472 <USBD_CtlPrepareRx>
    break;
 80061f4:	e073      	b.n	80062de <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80061fc:	689c      	ldr	r4, [r3, #8]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	7859      	ldrb	r1, [r3, #1]
 8006202:	7db8      	ldrb	r0, [r7, #22]
 8006204:	2300      	movs	r3, #0
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	47a0      	blx	r4
    break;
 800620a:	e068      	b.n	80062de <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	785b      	ldrb	r3, [r3, #1]
 8006210:	2b0b      	cmp	r3, #11
 8006212:	d852      	bhi.n	80062ba <USBD_CDC_Setup+0x1b6>
 8006214:	a201      	add	r2, pc, #4	@ (adr r2, 800621c <USBD_CDC_Setup+0x118>)
 8006216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621a:	bf00      	nop
 800621c:	0800624d 	.word	0x0800624d
 8006220:	080062c9 	.word	0x080062c9
 8006224:	080062bb 	.word	0x080062bb
 8006228:	080062bb 	.word	0x080062bb
 800622c:	080062bb 	.word	0x080062bb
 8006230:	080062bb 	.word	0x080062bb
 8006234:	080062bb 	.word	0x080062bb
 8006238:	080062bb 	.word	0x080062bb
 800623c:	080062bb 	.word	0x080062bb
 8006240:	080062bb 	.word	0x080062bb
 8006244:	08006277 	.word	0x08006277
 8006248:	080062a1 	.word	0x080062a1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b03      	cmp	r3, #3
 8006256:	d107      	bne.n	8006268 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006258:	f107 030a 	add.w	r3, r7, #10
 800625c:	2202      	movs	r2, #2
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f002 f8da 	bl	800841a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006266:	e032      	b.n	80062ce <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f002 f864 	bl	8008338 <USBD_CtlError>
        ret = USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	75fb      	strb	r3, [r7, #23]
      break;
 8006274:	e02b      	b.n	80062ce <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b03      	cmp	r3, #3
 8006280:	d107      	bne.n	8006292 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006282:	f107 030d 	add.w	r3, r7, #13
 8006286:	2201      	movs	r2, #1
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f002 f8c5 	bl	800841a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006290:	e01d      	b.n	80062ce <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f002 f84f 	bl	8008338 <USBD_CtlError>
        ret = USBD_FAIL;
 800629a:	2303      	movs	r3, #3
 800629c:	75fb      	strb	r3, [r7, #23]
      break;
 800629e:	e016      	b.n	80062ce <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d00f      	beq.n	80062cc <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f002 f842 	bl	8008338 <USBD_CtlError>
        ret = USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80062b8:	e008      	b.n	80062cc <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f002 f83b 	bl	8008338 <USBD_CtlError>
      ret = USBD_FAIL;
 80062c2:	2303      	movs	r3, #3
 80062c4:	75fb      	strb	r3, [r7, #23]
      break;
 80062c6:	e002      	b.n	80062ce <USBD_CDC_Setup+0x1ca>
      break;
 80062c8:	bf00      	nop
 80062ca:	e008      	b.n	80062de <USBD_CDC_Setup+0x1da>
      break;
 80062cc:	bf00      	nop
    }
    break;
 80062ce:	e006      	b.n	80062de <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f002 f830 	bl	8008338 <USBD_CtlError>
    ret = USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	75fb      	strb	r3, [r7, #23]
    break;
 80062dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd90      	pop	{r4, r7, pc}
 80062e8:	20000d90 	.word	0x20000d90
 80062ec:	20000d94 	.word	0x20000d94
 80062f0:	20000d9c 	.word	0x20000d9c

080062f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800630a:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006310:	2300      	movs	r3, #0
 8006312:	75bb      	strb	r3, [r7, #22]
 8006314:	e00d      	b.n	8006332 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	7dbb      	ldrb	r3, [r7, #22]
 800631a:	4934      	ldr	r1, [pc, #208]	@ (80063ec <USBD_CDC_DataIn+0xf8>)
 800631c:	5ccb      	ldrb	r3, [r1, r3]
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	429a      	cmp	r2, r3
 8006324:	d102      	bne.n	800632c <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8006326:	7dbb      	ldrb	r3, [r7, #22]
 8006328:	75fb      	strb	r3, [r7, #23]
      break;
 800632a:	e005      	b.n	8006338 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800632c:	7dbb      	ldrb	r3, [r7, #22]
 800632e:	3301      	adds	r3, #1
 8006330:	75bb      	strb	r3, [r7, #22]
 8006332:	7dbb      	ldrb	r3, [r7, #22]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0ee      	beq.n	8006316 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800633e:	fb02 f303 	mul.w	r3, r2, r3
 8006342:	4a2b      	ldr	r2, [pc, #172]	@ (80063f0 <USBD_CDC_DataIn+0xfc>)
 8006344:	4413      	add	r3, r2
 8006346:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006348:	78fa      	ldrb	r2, [r7, #3]
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	440b      	add	r3, r1
 8006356:	3318      	adds	r3, #24
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d029      	beq.n	80063b2 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	3318      	adds	r3, #24
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	78f9      	ldrb	r1, [r7, #3]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	460b      	mov	r3, r1
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	440b      	add	r3, r1
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4403      	add	r3, r0
 800637e:	331c      	adds	r3, #28
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	fbb2 f1f3 	udiv	r1, r2, r3
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800638c:	2b00      	cmp	r3, #0
 800638e:	d110      	bne.n	80063b2 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006390:	78fa      	ldrb	r2, [r7, #3]
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	3318      	adds	r3, #24
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063a4:	78f9      	ldrb	r1, [r7, #3]
 80063a6:	2300      	movs	r3, #0
 80063a8:	2200      	movs	r2, #0
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f002 fb15 	bl	80089da <USBD_LL_Transmit>
 80063b0:	e016      	b.n	80063e0 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00c      	beq.n	80063e0 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063cc:	691c      	ldr	r4, [r3, #16]
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	7df8      	ldrb	r0, [r7, #23]
 80063de:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd90      	pop	{r4, r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000d84 	.word	0x20000d84
 80063f0:	20000d9c 	.word	0x20000d9c

080063f4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006408:	2300      	movs	r3, #0
 800640a:	73bb      	strb	r3, [r7, #14]
 800640c:	e00b      	b.n	8006426 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <USBD_CDC_DataOut+0x7c>)
 8006412:	5cd3      	ldrb	r3, [r2, r3]
 8006414:	78fa      	ldrb	r2, [r7, #3]
 8006416:	429a      	cmp	r2, r3
 8006418:	d102      	bne.n	8006420 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800641a:	7bbb      	ldrb	r3, [r7, #14]
 800641c:	73fb      	strb	r3, [r7, #15]
      break;
 800641e:	e005      	b.n	800642c <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	3301      	adds	r3, #1
 8006424:	73bb      	strb	r3, [r7, #14]
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f0      	beq.n	800640e <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006432:	fb02 f303 	mul.w	r3, r2, r3
 8006436:	4a0f      	ldr	r2, [pc, #60]	@ (8006474 <USBD_CDC_DataOut+0x80>)
 8006438:	4413      	add	r3, r2
 800643a:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f002 fb0c 	bl	8008a5e <USBD_LL_GetRxDataSize>
 8006446:	4602      	mov	r2, r0
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006462:	7bf8      	ldrb	r0, [r7, #15]
 8006464:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000d88 	.word	0x20000d88
 8006474:	20000d9c 	.word	0x20000d9c

08006478 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8006480:	2300      	movs	r3, #0
 8006482:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006484:	2300      	movs	r3, #0
 8006486:	73fb      	strb	r3, [r7, #15]
 8006488:	e02d      	b.n	80064e6 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006490:	fb02 f303 	mul.w	r3, r2, r3
 8006494:	4a18      	ldr	r2, [pc, #96]	@ (80064f8 <USBD_CDC_EP0_RxReady+0x80>)
 8006496:	4413      	add	r3, r2
 8006498:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e024      	b.n	80064ee <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d018      	beq.n	80064e0 <USBD_CDC_EP0_RxReady+0x68>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80064b4:	2bff      	cmp	r3, #255	@ 0xff
 80064b6:	d013      	beq.n	80064e0 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80064be:	689c      	ldr	r4, [r3, #8]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	025b      	lsls	r3, r3, #9
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	441a      	add	r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80064d4:	7bf8      	ldrb	r0, [r7, #15]
 80064d6:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	22ff      	movs	r2, #255	@ 0xff
 80064dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	3301      	adds	r3, #1
 80064e4:	73fb      	strb	r3, [r7, #15]
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0ce      	beq.n	800648a <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd90      	pop	{r4, r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000d9c 	.word	0x20000d9c

080064fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	224b      	movs	r2, #75	@ 0x4b
 8006508:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800650a:	4b03      	ldr	r3, [pc, #12]	@ (8006518 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	20000108 	.word	0x20000108

0800651c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	224b      	movs	r2, #75	@ 0x4b
 8006528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800652a:	4b03      	ldr	r3, [pc, #12]	@ (8006538 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	200000bc 	.word	0x200000bc

0800653c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	224b      	movs	r2, #75	@ 0x4b
 8006548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800654a:	4b03      	ldr	r3, [pc, #12]	@ (8006558 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	20000108 	.word	0x20000108

0800655c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	220a      	movs	r2, #10
 8006568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800656a:	4b03      	ldr	r3, [pc, #12]	@ (8006578 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	20000074 	.word	0x20000074

0800657c <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	e004      	b.n	800659a <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
	...

080065a8 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	4a09      	ldr	r2, [pc, #36]	@ (80065ec <USBD_CDC_SetTxBuffer+0x44>)
 80065c8:	4413      	add	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	20000d9c 	.word	0x20000d9c

080065f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	4603      	mov	r3, r0
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006608:	fb02 f303 	mul.w	r3, r2, r3
 800660c:	4a06      	ldr	r2, [pc, #24]	@ (8006628 <USBD_CDC_SetRxBuffer+0x38>)
 800660e:	4413      	add	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	20000d9c 	.word	0x20000d9c

0800662c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	6039      	str	r1, [r7, #0]
 8006636:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	4a17      	ldr	r2, [pc, #92]	@ (80066a8 <USBD_CDC_TransmitPacket+0x7c>)
 800664c:	4413      	add	r3, r2
 800664e:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006656:	2b00      	cmp	r3, #0
 8006658:	d121      	bne.n	800669e <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2201      	movs	r2, #1
 800665e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	4a11      	ldr	r2, [pc, #68]	@ (80066ac <USBD_CDC_TransmitPacket+0x80>)
 8006666:	5cd3      	ldrb	r3, [r2, r3]
 8006668:	f003 020f 	and.w	r2, r3, #15
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006672:	6838      	ldr	r0, [r7, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4403      	add	r3, r0
 800667e:	3318      	adds	r3, #24
 8006680:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	4a09      	ldr	r2, [pc, #36]	@ (80066ac <USBD_CDC_TransmitPacket+0x80>)
 8006686:	5cd1      	ldrb	r1, [r2, r3]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006694:	6838      	ldr	r0, [r7, #0]
 8006696:	f002 f9a0 	bl	80089da <USBD_LL_Transmit>

    ret = USBD_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20000d9c 	.word	0x20000d9c
 80066ac:	20000d84 	.word	0x20000d84

080066b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	4a11      	ldr	r2, [pc, #68]	@ (8006710 <USBD_CDC_ReceivePacket+0x60>)
 80066cc:	4413      	add	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	7c1b      	ldrb	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10b      	bne.n	80066f0 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	4a0e      	ldr	r2, [pc, #56]	@ (8006714 <USBD_CDC_ReceivePacket+0x64>)
 80066dc:	5cd1      	ldrb	r1, [r2, r3]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80066e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066e8:	6838      	ldr	r0, [r7, #0]
 80066ea:	f002 f997 	bl	8008a1c <USBD_LL_PrepareReceive>
 80066ee:	e009      	b.n	8006704 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	4a08      	ldr	r2, [pc, #32]	@ (8006714 <USBD_CDC_ReceivePacket+0x64>)
 80066f4:	5cd1      	ldrb	r1, [r2, r3]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80066fc:	2340      	movs	r3, #64	@ 0x40
 80066fe:	6838      	ldr	r0, [r7, #0]
 8006700:	f002 f98c 	bl	8008a1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000d9c 	.word	0x20000d9c
 8006714:	20000d88 	.word	0x20000d88

08006718 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	4603      	mov	r3, r0
 8006728:	70fb      	strb	r3, [r7, #3]
 800672a:	460b      	mov	r3, r1
 800672c:	70bb      	strb	r3, [r7, #2]
 800672e:	4613      	mov	r3, r2
 8006730:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3309      	adds	r3, #9
 8006736:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006738:	2300      	movs	r3, #0
 800673a:	73fb      	strb	r3, [r7, #15]
 800673c:	e05b      	b.n	80067f6 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3302      	adds	r3, #2
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3310      	adds	r3, #16
 800674a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800674e:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	330a      	adds	r3, #10
 8006754:	78fa      	ldrb	r2, [r7, #3]
 8006756:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	331a      	adds	r3, #26
 800675c:	78ba      	ldrb	r2, [r7, #2]
 800675e:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3322      	adds	r3, #34	@ 0x22
 8006764:	78fa      	ldrb	r2, [r7, #3]
 8006766:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3323      	adds	r3, #35	@ 0x23
 800676c:	78ba      	ldrb	r2, [r7, #2]
 800676e:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3326      	adds	r3, #38	@ 0x26
 8006774:	7e3a      	ldrb	r2, [r7, #24]
 8006776:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	332d      	adds	r3, #45	@ 0x2d
 800677c:	78ba      	ldrb	r2, [r7, #2]
 800677e:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3336      	adds	r3, #54	@ 0x36
 8006784:	7f3a      	ldrb	r2, [r7, #28]
 8006786:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	333d      	adds	r3, #61	@ 0x3d
 800678c:	787a      	ldrb	r2, [r7, #1]
 800678e:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3342      	adds	r3, #66	@ 0x42
 8006794:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	491c      	ldr	r1, [pc, #112]	@ (800680c <USBD_Update_CDC_ACM_DESC+0xf4>)
 800679a:	787a      	ldrb	r2, [r7, #1]
 800679c:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	491b      	ldr	r1, [pc, #108]	@ (8006810 <USBD_Update_CDC_ACM_DESC+0xf8>)
 80067a2:	7f3a      	ldrb	r2, [r7, #28]
 80067a4:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	491a      	ldr	r1, [pc, #104]	@ (8006814 <USBD_Update_CDC_ACM_DESC+0xfc>)
 80067aa:	7e3a      	ldrb	r2, [r7, #24]
 80067ac:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	4919      	ldr	r1, [pc, #100]	@ (8006818 <USBD_Update_CDC_ACM_DESC+0x100>)
 80067b2:	78fa      	ldrb	r2, [r7, #3]
 80067b4:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	4918      	ldr	r1, [pc, #96]	@ (800681c <USBD_Update_CDC_ACM_DESC+0x104>)
 80067ba:	78ba      	ldrb	r2, [r7, #2]
 80067bc:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	4917      	ldr	r1, [pc, #92]	@ (8006820 <USBD_Update_CDC_ACM_DESC+0x108>)
 80067c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80067c6:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 80067c8:	787b      	ldrb	r3, [r7, #1]
 80067ca:	3302      	adds	r3, #2
 80067cc:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 80067ce:	787b      	ldrb	r3, [r7, #1]
 80067d0:	3301      	adds	r3, #1
 80067d2:	763b      	strb	r3, [r7, #24]
    out_ep++;
 80067d4:	7f3b      	ldrb	r3, [r7, #28]
 80067d6:	3301      	adds	r3, #1
 80067d8:	773b      	strb	r3, [r7, #28]
    str_idx++;
 80067da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80067de:	3301      	adds	r3, #1
 80067e0:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	3302      	adds	r3, #2
 80067e8:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	3301      	adds	r3, #1
 80067ee:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	3301      	adds	r3, #1
 80067f4:	73fb      	strb	r3, [r7, #15]
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0a0      	beq.n	800673e <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20000d84 	.word	0x20000d84
 8006810:	20000d88 	.word	0x20000d88
 8006814:	20000d8c 	.word	0x20000d8c
 8006818:	20000d90 	.word	0x20000d90
 800681c:	20000d94 	.word	0x20000d94
 8006820:	20000d98 	.word	0x20000d98

08006824 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8006830:	4b08      	ldr	r3, [pc, #32]	@ (8006854 <USBD_COMPOSITE_Init+0x30>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	4611      	mov	r1, r2
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
 800683c:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <USBD_COMPOSITE_Init+0x34>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	78fa      	ldrb	r2, [r7, #3]
 8006842:	4611      	mov	r1, r2
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000080 	.word	0x20000080
 8006858:	200001a0 	.word	0x200001a0

0800685c <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8006868:	4b08      	ldr	r3, [pc, #32]	@ (800688c <USBD_COMPOSITE_DeInit+0x30>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	78fa      	ldrb	r2, [r7, #3]
 800686e:	4611      	mov	r1, r2
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
 8006874:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <USBD_COMPOSITE_DeInit+0x34>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	78fa      	ldrb	r2, [r7, #3]
 800687a:	4611      	mov	r1, r2
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000080 	.word	0x20000080
 8006890:	200001a0 	.word	0x200001a0

08006894 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800689e:	2300      	movs	r3, #0
 80068a0:	73fb      	strb	r3, [r7, #15]
 80068a2:	e019      	b.n	80068d8 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	889b      	ldrh	r3, [r3, #4]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	4915      	ldr	r1, [pc, #84]	@ (8006904 <USBD_COMPOSITE_Setup+0x70>)
 80068ae:	5ccb      	ldrb	r3, [r1, r3]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d007      	beq.n	80068c4 <USBD_COMPOSITE_Setup+0x30>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	889b      	ldrh	r3, [r3, #4]
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	4912      	ldr	r1, [pc, #72]	@ (8006908 <USBD_COMPOSITE_Setup+0x74>)
 80068be:	5ccb      	ldrb	r3, [r1, r3]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d106      	bne.n	80068d2 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 80068c4:	4b11      	ldr	r3, [pc, #68]	@ (800690c <USBD_COMPOSITE_Setup+0x78>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
 80068ce:	4603      	mov	r3, r0
 80068d0:	e014      	b.n	80068fc <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	3301      	adds	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0e2      	beq.n	80068a4 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_MOUSE.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (LOBYTE(req->wIndex) == HID_KEYBOARD_ITF_NBR)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	889b      	ldrh	r3, [r3, #4]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006910 <USBD_COMPOSITE_Setup+0x7c>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d106      	bne.n	80068fa <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
 80068ec:	4b09      	ldr	r3, [pc, #36]	@ (8006914 <USBD_COMPOSITE_Setup+0x80>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	e000      	b.n	80068fc <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 80068fa:	2303      	movs	r3, #3
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000d90 	.word	0x20000d90
 8006908:	20000d94 	.word	0x20000d94
 800690c:	20000080 	.word	0x20000080
 8006910:	200010c0 	.word	0x200010c0
 8006914:	200001a0 	.word	0x200001a0

08006918 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006924:	2300      	movs	r3, #0
 8006926:	73fb      	strb	r3, [r7, #15]
 8006928:	e01a      	b.n	8006960 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	4918      	ldr	r1, [pc, #96]	@ (8006990 <USBD_COMPOSITE_DataIn+0x78>)
 8006930:	5ccb      	ldrb	r3, [r1, r3]
 8006932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006936:	429a      	cmp	r2, r3
 8006938:	d007      	beq.n	800694a <USBD_COMPOSITE_DataIn+0x32>
 800693a:	78fa      	ldrb	r2, [r7, #3]
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	4915      	ldr	r1, [pc, #84]	@ (8006994 <USBD_COMPOSITE_DataIn+0x7c>)
 8006940:	5ccb      	ldrb	r3, [r1, r3]
 8006942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006946:	429a      	cmp	r2, r3
 8006948:	d107      	bne.n	800695a <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800694a:	4b13      	ldr	r3, [pc, #76]	@ (8006998 <USBD_COMPOSITE_DataIn+0x80>)
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	78fa      	ldrb	r2, [r7, #3]
 8006950:	4611      	mov	r1, r2
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	4798      	blx	r3
 8006956:	4603      	mov	r3, r0
 8006958:	e015      	b.n	8006986 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	3301      	adds	r3, #1
 800695e:	73fb      	strb	r3, [r7, #15]
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0e1      	beq.n	800692a <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_MOUSE.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (epnum == (HID_KEYBOARD_IN_EP & 0x7F))
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	4b0c      	ldr	r3, [pc, #48]	@ (800699c <USBD_COMPOSITE_DataIn+0x84>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006970:	429a      	cmp	r2, r3
 8006972:	d107      	bne.n	8006984 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
 8006974:	4b0a      	ldr	r3, [pc, #40]	@ (80069a0 <USBD_COMPOSITE_DataIn+0x88>)
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	4611      	mov	r1, r2
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
 8006980:	4603      	mov	r3, r0
 8006982:	e000      	b.n	8006986 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8006984:	2303      	movs	r3, #3
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20000d84 	.word	0x20000d84
 8006994:	20000d8c 	.word	0x20000d8c
 8006998:	20000080 	.word	0x20000080
 800699c:	2000019e 	.word	0x2000019e
 80069a0:	200001a0 	.word	0x200001a0

080069a4 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 80069ac:	4b04      	ldr	r3, [pc, #16]	@ (80069c0 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000080 	.word	0x20000080

080069c4 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006a30:	2300      	movs	r3, #0
 8006a32:	73fb      	strb	r3, [r7, #15]
 8006a34:	e010      	b.n	8006a58 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	4a0b      	ldr	r2, [pc, #44]	@ (8006a68 <USBD_COMPOSITE_DataOut+0x44>)
 8006a3a:	5cd3      	ldrb	r3, [r2, r3]
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d107      	bne.n	8006a52 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8006a42:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <USBD_COMPOSITE_DataOut+0x48>)
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	e006      	b.n	8006a60 <USBD_COMPOSITE_DataOut+0x3c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	3301      	adds	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0eb      	beq.n	8006a36 <USBD_COMPOSITE_DataOut+0x12>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8006a5e:	2303      	movs	r3, #3
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000d88 	.word	0x20000d88
 8006a6c:	20000080 	.word	0x20000080

08006a70 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2264      	movs	r2, #100	@ 0x64
 8006a7c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8006a7e:	4b03      	ldr	r3, [pc, #12]	@ (8006a8c <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	2000101c 	.word	0x2000101c

08006a90 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2264      	movs	r2, #100	@ 0x64
 8006a9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8006a9e:	4b03      	ldr	r3, [pc, #12]	@ (8006aac <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20000fb8 	.word	0x20000fb8

08006ab0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2264      	movs	r2, #100	@ 0x64
 8006abc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8006abe:	4b03      	ldr	r3, [pc, #12]	@ (8006acc <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	2000101c 	.word	0x2000101c

08006ad0 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	220a      	movs	r2, #10
 8006adc:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8006ade:	4b03      	ldr	r3, [pc, #12]	@ (8006aec <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	20000194 	.word	0x20000194

08006af0 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	@ 0x28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	460b      	mov	r3, r1
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8006afe:	4b20      	ldr	r3, [pc, #128]	@ (8006b80 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	7afa      	ldrb	r2, [r7, #11]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d836      	bhi.n	8006b76 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8006b08:	2300      	movs	r3, #0
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	f107 0318 	add.w	r3, r7, #24
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b1e:	e01a      	b.n	8006b56 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8006b20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b24:	4a17      	ldr	r2, [pc, #92]	@ (8006b84 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8006b26:	5cd3      	ldrb	r3, [r2, r3]
 8006b28:	7afa      	ldrb	r2, [r7, #11]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d10e      	bne.n	8006b4c <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8006b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b32:	f107 0014 	add.w	r0, r7, #20
 8006b36:	4a14      	ldr	r2, [pc, #80]	@ (8006b88 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8006b38:	2110      	movs	r1, #16
 8006b3a:	f001 ffcf 	bl	8008adc <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8006b3e:	f107 0314 	add.w	r3, r7, #20
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	4911      	ldr	r1, [pc, #68]	@ (8006b8c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8006b46:	4618      	mov	r0, r3
 8006b48:	f001 fc07 	bl	800835a <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b50:	3301      	adds	r3, #1
 8006b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0e0      	beq.n	8006b20 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_MOUSE_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    if (index == HID_KEYBOARD_STR_DESC_IDX)
 8006b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b90 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	7afa      	ldrb	r2, [r7, #11]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d104      	bne.n	8006b72 <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4908      	ldr	r1, [pc, #32]	@ (8006b8c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8006b6c:	4809      	ldr	r0, [pc, #36]	@ (8006b94 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8006b6e:	f001 fbf4 	bl	800835a <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8006b72:	4b06      	ldr	r3, [pc, #24]	@ (8006b8c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8006b74:	e000      	b.n	8006b78 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8006b76:	2300      	movs	r3, #0
  }
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3728      	adds	r7, #40	@ 0x28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20000190 	.word	0x20000190
 8006b84:	20000d98 	.word	0x20000d98
 8006b88:	08009908 	.word	0x08009908
 8006b8c:	20001080 	.word	0x20001080
 8006b90:	200010c1 	.word	0x200010c1
 8006b94:	08009918 	.word	0x08009918

08006b98 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8006b98:	b590      	push	{r4, r7, lr}
 8006b9a:	b089      	sub	sp, #36	@ 0x24
 8006b9c:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8006ba6:	2381      	movs	r3, #129	@ 0x81
 8006ba8:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8006baa:	2301      	movs	r3, #1
 8006bac:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_KEYBOARD == 1)
  ptr = USBD_HID_KEYBOARD.GetFSConfigDescriptor(&len);
 8006bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8006d70 <USBD_COMPOSITE_Mount_Class+0x1d8>)
 8006bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb6:	1d3a      	adds	r2, r7, #4
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4798      	blx	r3
 8006bbc:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8006bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8006d74 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	7afa      	ldrb	r2, [r7, #11]
 8006bc4:	7a79      	ldrb	r1, [r7, #9]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 faf0 	bl	80071ac <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3309      	adds	r3, #9
 8006bd0:	88ba      	ldrh	r2, [r7, #4]
 8006bd2:	3a09      	subs	r2, #9
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4868      	ldr	r0, [pc, #416]	@ (8006d78 <USBD_COMPOSITE_Mount_Class+0x1e0>)
 8006bd8:	f002 f824 	bl	8008c24 <memcpy>

  ptr = USBD_HID_KEYBOARD.GetHSConfigDescriptor(&len);
 8006bdc:	4b64      	ldr	r3, [pc, #400]	@ (8006d70 <USBD_COMPOSITE_Mount_Class+0x1d8>)
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	1d3a      	adds	r2, r7, #4
 8006be2:	4610      	mov	r0, r2
 8006be4:	4798      	blx	r3
 8006be6:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8006be8:	4b62      	ldr	r3, [pc, #392]	@ (8006d74 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	7afa      	ldrb	r2, [r7, #11]
 8006bee:	7a79      	ldrb	r1, [r7, #9]
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fadb 	bl	80071ac <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3309      	adds	r3, #9
 8006bfa:	88ba      	ldrh	r2, [r7, #4]
 8006bfc:	3a09      	subs	r2, #9
 8006bfe:	4619      	mov	r1, r3
 8006c00:	485e      	ldr	r0, [pc, #376]	@ (8006d7c <USBD_COMPOSITE_Mount_Class+0x1e4>)
 8006c02:	f002 f80f 	bl	8008c24 <memcpy>

  in_ep_track += 1;
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 8006c0c:	7a7b      	ldrb	r3, [r7, #9]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8006c12:	4b58      	ldr	r3, [pc, #352]	@ (8006d74 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	3301      	adds	r3, #1
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	4b56      	ldr	r3, [pc, #344]	@ (8006d74 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006c1c:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8006c1e:	4b58      	ldr	r3, [pc, #352]	@ (8006d80 <USBD_COMPOSITE_Mount_Class+0x1e8>)
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	1d3a      	adds	r2, r7, #4
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8006c2a:	7a7b      	ldrb	r3, [r7, #9]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	b2d8      	uxtb	r0, r3
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	3301      	adds	r3, #1
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	4a4f      	ldr	r2, [pc, #316]	@ (8006d74 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006c38:	7812      	ldrb	r2, [r2, #0]
 8006c3a:	7afc      	ldrb	r4, [r7, #11]
 8006c3c:	7a79      	ldrb	r1, [r7, #9]
 8006c3e:	9202      	str	r2, [sp, #8]
 8006c40:	7aba      	ldrb	r2, [r7, #10]
 8006c42:	9201      	str	r2, [sp, #4]
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	4623      	mov	r3, r4
 8006c48:	4602      	mov	r2, r0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7ff fd64 	bl	8006718 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3309      	adds	r3, #9
 8006c54:	88ba      	ldrh	r2, [r7, #4]
 8006c56:	3a09      	subs	r2, #9
 8006c58:	4619      	mov	r1, r3
 8006c5a:	484a      	ldr	r0, [pc, #296]	@ (8006d84 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8006c5c:	f001 ffe2 	bl	8008c24 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8006c60:	4b47      	ldr	r3, [pc, #284]	@ (8006d80 <USBD_COMPOSITE_Mount_Class+0x1e8>)
 8006c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c64:	1d3a      	adds	r2, r7, #4
 8006c66:	4610      	mov	r0, r2
 8006c68:	4798      	blx	r3
 8006c6a:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8006c6c:	7a7b      	ldrb	r3, [r7, #9]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	b2d8      	uxtb	r0, r3
 8006c72:	7afb      	ldrb	r3, [r7, #11]
 8006c74:	3301      	adds	r3, #1
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	4a3e      	ldr	r2, [pc, #248]	@ (8006d74 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006c7a:	7812      	ldrb	r2, [r2, #0]
 8006c7c:	7afc      	ldrb	r4, [r7, #11]
 8006c7e:	7a79      	ldrb	r1, [r7, #9]
 8006c80:	9202      	str	r2, [sp, #8]
 8006c82:	7aba      	ldrb	r2, [r7, #10]
 8006c84:	9201      	str	r2, [sp, #4]
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	4623      	mov	r3, r4
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f7ff fd43 	bl	8006718 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3309      	adds	r3, #9
 8006c96:	88ba      	ldrh	r2, [r7, #4]
 8006c98:	3a09      	subs	r2, #9
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	483a      	ldr	r0, [pc, #232]	@ (8006d88 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8006c9e:	f001 ffc1 	bl	8008c24 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 8006ca2:	7afb      	ldrb	r3, [r7, #11]
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8006ca8:	7abb      	ldrb	r3, [r7, #10]
 8006caa:	3301      	adds	r3, #1
 8006cac:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8006cae:	7a7b      	ldrb	r3, [r7, #9]
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8006cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8006d74 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006d74 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8006cbe:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8006cc0:	2364      	movs	r3, #100	@ 0x64
 8006cc2:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8006cc4:	4b31      	ldr	r3, [pc, #196]	@ (8006d8c <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8006cc6:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2209      	movs	r2, #9
 8006ccc:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3302      	adds	r3, #2
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8006ce0:	88fb      	ldrh	r3, [r7, #6]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3303      	adds	r3, #3
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	7a7a      	ldrb	r2, [r7, #9]
 8006cf4:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3305      	adds	r3, #5
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3306      	adds	r3, #6
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3307      	adds	r3, #7
 8006d0a:	22c0      	movs	r2, #192	@ 0xc0
 8006d0c:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3308      	adds	r3, #8
 8006d12:	2232      	movs	r2, #50	@ 0x32
 8006d14:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8006d16:	4b1e      	ldr	r3, [pc, #120]	@ (8006d90 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8006d18:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2209      	movs	r2, #9
 8006d1e:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	2202      	movs	r2, #2
 8006d26:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3303      	adds	r3, #3
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3304      	adds	r3, #4
 8006d44:	7a7a      	ldrb	r2, [r7, #9]
 8006d46:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3305      	adds	r3, #5
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3306      	adds	r3, #6
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3307      	adds	r3, #7
 8006d5c:	22c0      	movs	r2, #192	@ 0xc0
 8006d5e:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3308      	adds	r3, #8
 8006d64:	2232      	movs	r2, #50	@ 0x32
 8006d66:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd90      	pop	{r4, r7, pc}
 8006d70:	200001a0 	.word	0x200001a0
 8006d74:	20000190 	.word	0x20000190
 8006d78:	20000fc1 	.word	0x20000fc1
 8006d7c:	20001025 	.word	0x20001025
 8006d80:	20000080 	.word	0x20000080
 8006d84:	20000fda 	.word	0x20000fda
 8006d88:	2000103e 	.word	0x2000103e
 8006d8c:	2000101c 	.word	0x2000101c
 8006d90:	20000fb8 	.word	0x20000fb8

08006d94 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_Keyboard_HandleTypeDef *hhid;

  hhid = &USBD_HID_KBD_Instace;
 8006da0:	4b24      	ldr	r3, [pc, #144]	@ (8006e34 <USBD_HID_Init+0xa0>)
 8006da2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d105      	bne.n	8006db6 <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Keyboard = NULL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
    return (uint8_t)USBD_EMEM;
 8006db2:	2302      	movs	r3, #2
 8006db4:	e03a      	b.n	8006e2c <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Keyboard = (void *)hhid;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7c1b      	ldrb	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10d      	bne.n	8006de2 <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_HS_BINTERVAL;
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e38 <USBD_HID_Init+0xa4>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	f003 020f 	and.w	r2, r3, #15
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	3326      	adds	r3, #38	@ 0x26
 8006ddc:	2207      	movs	r2, #7
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	e00c      	b.n	8006dfc <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_FS_BINTERVAL;
 8006de2:	4b15      	ldr	r3, [pc, #84]	@ (8006e38 <USBD_HID_Init+0xa4>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 020f 	and.w	r2, r3, #15
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	3326      	adds	r3, #38	@ 0x26
 8006df8:	220a      	movs	r2, #10
 8006dfa:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_KEYBOARD_IN_EP, USBD_EP_TYPE_INTR, HID_KEYBOARD_EPIN_SIZE);
 8006dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8006e38 <USBD_HID_Init+0xa4>)
 8006dfe:	7819      	ldrb	r1, [r3, #0]
 8006e00:	2308      	movs	r3, #8
 8006e02:	2203      	movs	r2, #3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fd1a 	bl	800883e <USBD_LL_OpenEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 1U;
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e38 <USBD_HID_Init+0xa4>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	f003 020f 	and.w	r2, r3, #15
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	3324      	adds	r3, #36	@ 0x24
 8006e20:	2201      	movs	r2, #1
 8006e22:	801a      	strh	r2, [r3, #0]

  hhid->state = KEYBOARD_HID_IDLE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	200010c4 	.word	0x200010c4
 8006e38:	2000019e 	.word	0x2000019e

08006e3c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_KEYBOARD_IN_EP);
 8006e48:	4b16      	ldr	r3, [pc, #88]	@ (8006ea4 <USBD_HID_DeInit+0x68>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fd1b 	bl	800888a <USBD_LL_CloseEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 0U;
 8006e54:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <USBD_HID_DeInit+0x68>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 020f 	and.w	r2, r3, #15
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	3324      	adds	r3, #36	@ 0x24
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = 0U;
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <USBD_HID_DeInit+0x68>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	f003 020f 	and.w	r2, r3, #15
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	3326      	adds	r3, #38	@ 0x26
 8006e84:	2200      	movs	r2, #0
 8006e86:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Keyboard != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Keyboard);
#endif
    pdev->pClassData_HID_Keyboard = NULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  }

  return (uint8_t)USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	2000019e 	.word	0x2000019e

08006ea8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eb8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e0e8      	b.n	800709e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d046      	beq.n	8006f66 <USBD_HID_Setup+0xbe>
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	f040 80d8 	bne.w	800708e <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	3b02      	subs	r3, #2
 8006ee4:	2b09      	cmp	r3, #9
 8006ee6:	d836      	bhi.n	8006f56 <USBD_HID_Setup+0xae>
 8006ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <USBD_HID_Setup+0x48>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f47 	.word	0x08006f47
 8006ef4:	08006f27 	.word	0x08006f27
 8006ef8:	08006f57 	.word	0x08006f57
 8006efc:	08006f57 	.word	0x08006f57
 8006f00:	08006f57 	.word	0x08006f57
 8006f04:	08006f57 	.word	0x08006f57
 8006f08:	08006f57 	.word	0x08006f57
 8006f0c:	08006f57 	.word	0x08006f57
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f19 	.word	0x08006f19
    {
    case HID_KEYBOARD_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	885b      	ldrh	r3, [r3, #2]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	601a      	str	r2, [r3, #0]
      break;
 8006f24:	e01e      	b.n	8006f64 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fa74 	bl	800841a <USBD_CtlSendData>
      break;
 8006f32:	e017      	b.n	8006f64 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	885b      	ldrh	r3, [r3, #2]
 8006f38:	0a1b      	lsrs	r3, r3, #8
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	605a      	str	r2, [r3, #4]
      break;
 8006f44:	e00e      	b.n	8006f64 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 fa63 	bl	800841a <USBD_CtlSendData>
      break;
 8006f54:	e006      	b.n	8006f64 <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 f9ed 	bl	8008338 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	75fb      	strb	r3, [r7, #23]
      break;
 8006f62:	bf00      	nop
    }
    break;
 8006f64:	e09a      	b.n	800709c <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	2b0b      	cmp	r3, #11
 8006f6c:	f200 8086 	bhi.w	800707c <USBD_HID_Setup+0x1d4>
 8006f70:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <USBD_HID_Setup+0xd0>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08006fa9 	.word	0x08006fa9
 8006f7c:	0800708b 	.word	0x0800708b
 8006f80:	0800707d 	.word	0x0800707d
 8006f84:	0800707d 	.word	0x0800707d
 8006f88:	0800707d 	.word	0x0800707d
 8006f8c:	0800707d 	.word	0x0800707d
 8006f90:	08006fd3 	.word	0x08006fd3
 8006f94:	0800707d 	.word	0x0800707d
 8006f98:	0800707d 	.word	0x0800707d
 8006f9c:	0800707d 	.word	0x0800707d
 8006fa0:	0800702b 	.word	0x0800702b
 8006fa4:	08007055 	.word	0x08007055
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d107      	bne.n	8006fc4 <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fb4:	f107 030a 	add.w	r3, r7, #10
 8006fb8:	2202      	movs	r2, #2
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 fa2c 	bl	800841a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006fc2:	e063      	b.n	800708c <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 f9b6 	bl	8008338 <USBD_CtlError>
        ret = USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd0:	e05c      	b.n	800708c <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_KEYBOARD_REPORT_DESC)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	885b      	ldrh	r3, [r3, #2]
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b22      	cmp	r3, #34	@ 0x22
 8006fdc:	d108      	bne.n	8006ff0 <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	88db      	ldrh	r3, [r3, #6]
 8006fe2:	2b3f      	cmp	r3, #63	@ 0x3f
 8006fe4:	bf28      	it	cs
 8006fe6:	233f      	movcs	r3, #63	@ 0x3f
 8006fe8:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_KEYBOARD_ReportDesc;
 8006fea:	4b2f      	ldr	r3, [pc, #188]	@ (80070a8 <USBD_HID_Setup+0x200>)
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	e015      	b.n	800701c <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_KEYBOARD_DESCRIPTOR_TYPE)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	885b      	ldrh	r3, [r3, #2]
 8006ff4:	0a1b      	lsrs	r3, r3, #8
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b21      	cmp	r3, #33	@ 0x21
 8006ffa:	d108      	bne.n	800700e <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_KEYBOARD_Desc;
 8006ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80070ac <USBD_HID_Setup+0x204>)
 8006ffe:	613b      	str	r3, [r7, #16]
        len = MIN(HID_KEYBOARD_DESC_SIZE, req->wLength);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	88db      	ldrh	r3, [r3, #6]
 8007004:	2b09      	cmp	r3, #9
 8007006:	bf28      	it	cs
 8007008:	2309      	movcs	r3, #9
 800700a:	82bb      	strh	r3, [r7, #20]
 800700c:	e006      	b.n	800701c <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 f991 	bl	8008338 <USBD_CtlError>
        ret = USBD_FAIL;
 8007016:	2303      	movs	r3, #3
 8007018:	75fb      	strb	r3, [r7, #23]
        break;
 800701a:	e037      	b.n	800708c <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800701c:	8abb      	ldrh	r3, [r7, #20]
 800701e:	461a      	mov	r2, r3
 8007020:	6939      	ldr	r1, [r7, #16]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 f9f9 	bl	800841a <USBD_CtlSendData>
      break;
 8007028:	e030      	b.n	800708c <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b03      	cmp	r3, #3
 8007034:	d107      	bne.n	8007046 <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3308      	adds	r3, #8
 800703a:	2201      	movs	r2, #1
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 f9eb 	bl	800841a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007044:	e022      	b.n	800708c <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 f975 	bl	8008338 <USBD_CtlError>
        ret = USBD_FAIL;
 800704e:	2303      	movs	r3, #3
 8007050:	75fb      	strb	r3, [r7, #23]
      break;
 8007052:	e01b      	b.n	800708c <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b03      	cmp	r3, #3
 800705e:	d106      	bne.n	800706e <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	885b      	ldrh	r3, [r3, #2]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800706c:	e00e      	b.n	800708c <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 f961 	bl	8008338 <USBD_CtlError>
        ret = USBD_FAIL;
 8007076:	2303      	movs	r3, #3
 8007078:	75fb      	strb	r3, [r7, #23]
      break;
 800707a:	e007      	b.n	800708c <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f95a 	bl	8008338 <USBD_CtlError>
      ret = USBD_FAIL;
 8007084:	2303      	movs	r3, #3
 8007086:	75fb      	strb	r3, [r7, #23]
      break;
 8007088:	e000      	b.n	800708c <USBD_HID_Setup+0x1e4>
      break;
 800708a:	bf00      	nop
    }
    break;
 800708c:	e006      	b.n	800709c <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 f951 	bl	8008338 <USBD_CtlError>
    ret = USBD_FAIL;
 8007096:	2303      	movs	r3, #3
 8007098:	75fb      	strb	r3, [r7, #23]
    break;
 800709a:	bf00      	nop
  }

  return (uint8_t)ret;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	2000023c 	.word	0x2000023c
 80070ac:	20000224 	.word	0x20000224

080070b0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2222      	movs	r2, #34	@ 0x22
 80070bc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 80070be:	4b03      	ldr	r3, [pc, #12]	@ (80070cc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	200001dc 	.word	0x200001dc

080070d0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgHSDesc);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2222      	movs	r2, #34	@ 0x22
 80070dc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgHSDesc;
 80070de:	4b03      	ldr	r3, [pc, #12]	@ (80070ec <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20000200 	.word	0x20000200

080070f0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2222      	movs	r2, #34	@ 0x22
 80070fc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 80070fe:	4b03      	ldr	r3, [pc, #12]	@ (800710c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007100:	4618      	mov	r0, r3
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	200001dc 	.word	0x200001dc

08007110 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard)->state = KEYBOARD_HID_IDLE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007122:	2200      	movs	r2, #0
 8007124:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	220a      	movs	r2, #10
 8007140:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007142:	4b03      	ldr	r3, [pc, #12]	@ (8007150 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	20000230 	.word	0x20000230

08007154 <USBD_HID_Keybaord_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_Keybaord_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	4613      	mov	r3, r2
 8007160:	80fb      	strh	r3, [r7, #6]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007168:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <USBD_HID_Keybaord_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	e014      	b.n	800719e <USBD_HID_Keybaord_SendReport+0x4a>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b03      	cmp	r3, #3
 800717e:	d10d      	bne.n	800719c <USBD_HID_Keybaord_SendReport+0x48>
  {
    if (hhid->state == KEYBOARD_HID_IDLE)
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	7b1b      	ldrb	r3, [r3, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d109      	bne.n	800719c <USBD_HID_Keybaord_SendReport+0x48>
    {
      hhid->state = KEYBOARD_HID_BUSY;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2201      	movs	r2, #1
 800718c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_KEYBOARD_IN_EP, report, len);
 800718e:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <USBD_HID_Keybaord_SendReport+0x54>)
 8007190:	7819      	ldrb	r1, [r3, #0]
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f001 fc1f 	bl	80089da <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	2000019e 	.word	0x2000019e

080071ac <USBD_Update_HID_KBD_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_KBD_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	4608      	mov	r0, r1
 80071b6:	4611      	mov	r1, r2
 80071b8:	461a      	mov	r2, r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	70fb      	strb	r3, [r7, #3]
 80071be:	460b      	mov	r3, r1
 80071c0:	70bb      	strb	r3, [r7, #2]
 80071c2:	4613      	mov	r3, r2
 80071c4:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	330b      	adds	r3, #11
 80071ca:	78fa      	ldrb	r2, [r7, #3]
 80071cc:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3311      	adds	r3, #17
 80071d2:	787a      	ldrb	r2, [r7, #1]
 80071d4:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	331d      	adds	r3, #29
 80071da:	78ba      	ldrb	r2, [r7, #2]
 80071dc:	701a      	strb	r2, [r3, #0]

  HID_KEYBOARD_IN_EP = in_ep;
 80071de:	4a07      	ldr	r2, [pc, #28]	@ (80071fc <USBD_Update_HID_KBD_DESC+0x50>)
 80071e0:	78bb      	ldrb	r3, [r7, #2]
 80071e2:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_ITF_NBR = itf_no;
 80071e4:	4a06      	ldr	r2, [pc, #24]	@ (8007200 <USBD_Update_HID_KBD_DESC+0x54>)
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_STR_DESC_IDX = str_idx;
 80071ea:	4a06      	ldr	r2, [pc, #24]	@ (8007204 <USBD_Update_HID_KBD_DESC+0x58>)
 80071ec:	787b      	ldrb	r3, [r7, #1]
 80071ee:	7013      	strb	r3, [r2, #0]
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	2000019e 	.word	0x2000019e
 8007200:	200010c0 	.word	0x200010c0
 8007204:	200010c1 	.word	0x200010c1

08007208 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e01b      	b.n	8007258 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	79fa      	ldrb	r2, [r7, #7]
 800724a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f001 fa7d 	bl	800874c <USBD_LL_Init>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007256:	7dfb      	ldrb	r3, [r7, #23]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007274:	2303      	movs	r3, #3
 8007276:	e02d      	b.n	80072d4 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	7c1b      	ldrb	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d112      	bne.n	80072ae <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01e      	beq.n	80072d2 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	f107 020e 	add.w	r2, r7, #14
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	4602      	mov	r2, r0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 80072ac:	e011      	b.n	80072d2 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c2:	f107 020e 	add.w	r2, r7, #14
 80072c6:	4610      	mov	r0, r2
 80072c8:	4798      	blx	r3
 80072ca:	4602      	mov	r2, r0
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 fa8f 	bl	8008808 <USBD_LL_Start>
 80072ea:	4603      	mov	r3, r0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	460b      	mov	r3, r1
 8007314:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007316:	2303      	movs	r3, #3
 8007318:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007320:	2b00      	cmp	r3, #0
 8007322:	d009      	beq.n	8007338 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	4611      	mov	r1, r2
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d007      	beq.n	8007368 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	4611      	mov	r1, r2
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
  }

  return USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 ff9d 	bl	80082c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007398:	461a      	mov	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d01a      	beq.n	80073e4 <USBD_LL_SetupStage+0x72>
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d822      	bhi.n	80073f8 <USBD_LL_SetupStage+0x86>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <USBD_LL_SetupStage+0x4a>
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d00a      	beq.n	80073d0 <USBD_LL_SetupStage+0x5e>
 80073ba:	e01d      	b.n	80073f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fa5d 	bl	8007884 <USBD_StdDevReq>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73fb      	strb	r3, [r7, #15]
      break;
 80073ce:	e020      	b.n	8007412 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fac1 	bl	8007960 <USBD_StdItfReq>
 80073de:	4603      	mov	r3, r0
 80073e0:	73fb      	strb	r3, [r7, #15]
      break;
 80073e2:	e016      	b.n	8007412 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fb00 	bl	80079f2 <USBD_StdEPReq>
 80073f2:	4603      	mov	r3, r0
 80073f4:	73fb      	strb	r3, [r7, #15]
      break;
 80073f6:	e00c      	b.n	8007412 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007402:	b2db      	uxtb	r3, r3
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 fa5e 	bl	80088c8 <USBD_LL_StallEP>
 800740c:	4603      	mov	r3, r0
 800740e:	73fb      	strb	r3, [r7, #15]
      break;
 8007410:	bf00      	nop
  }

  return ret;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	460b      	mov	r3, r1
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800742a:	7afb      	ldrb	r3, [r7, #11]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d138      	bne.n	80074a2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007436:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800743e:	2b03      	cmp	r3, #3
 8007440:	d14a      	bne.n	80074d8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	429a      	cmp	r2, r3
 800744c:	d913      	bls.n	8007476 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	1ad2      	subs	r2, r2, r3
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	4293      	cmp	r3, r2
 8007466:	bf28      	it	cs
 8007468:	4613      	movcs	r3, r2
 800746a:	461a      	mov	r2, r3
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f001 f81c 	bl	80084ac <USBD_CtlContinueRx>
 8007474:	e030      	b.n	80074d8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b03      	cmp	r3, #3
 8007480:	d10b      	bne.n	800749a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d005      	beq.n	800749a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f001 f817 	bl	80084ce <USBD_CtlSendStatus>
 80074a0:	e01a      	b.n	80074d8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d114      	bne.n	80074d8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00e      	beq.n	80074d8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	7afa      	ldrb	r2, [r7, #11]
 80074c4:	4611      	mov	r1, r2
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	4798      	blx	r3
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	e000      	b.n	80074da <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b086      	sub	sp, #24
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	460b      	mov	r3, r1
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074f0:	7afb      	ldrb	r3, [r7, #11]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d16b      	bne.n	80075ce <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3314      	adds	r3, #20
 80074fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007502:	2b02      	cmp	r3, #2
 8007504:	d156      	bne.n	80075b4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	429a      	cmp	r2, r3
 8007510:	d914      	bls.n	800753c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	689a      	ldr	r2, [r3, #8]
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	461a      	mov	r2, r3
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 ff91 	bl	8008450 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800752e:	2300      	movs	r3, #0
 8007530:	2200      	movs	r2, #0
 8007532:	2100      	movs	r1, #0
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f001 fa71 	bl	8008a1c <USBD_LL_PrepareReceive>
 800753a:	e03b      	b.n	80075b4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	429a      	cmp	r2, r3
 8007546:	d11c      	bne.n	8007582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007550:	429a      	cmp	r2, r3
 8007552:	d316      	bcc.n	8007582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800755e:	429a      	cmp	r2, r3
 8007560:	d20f      	bcs.n	8007582 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 ff72 	bl	8008450 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007574:	2300      	movs	r3, #0
 8007576:	2200      	movs	r2, #0
 8007578:	2100      	movs	r1, #0
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f001 fa4e 	bl	8008a1c <USBD_LL_PrepareReceive>
 8007580:	e018      	b.n	80075b4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b03      	cmp	r3, #3
 800758c:	d10b      	bne.n	80075a6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d005      	beq.n	80075a6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075a6:	2180      	movs	r1, #128	@ 0x80
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f001 f98d 	bl	80088c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 ffa0 	bl	80084f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d122      	bne.n	8007604 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f7ff fe98 	bl	80072f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80075cc:	e01a      	b.n	8007604 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d114      	bne.n	8007604 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00e      	beq.n	8007604 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	7afa      	ldrb	r2, [r7, #11]
 80075f0:	4611      	mov	r1, r2
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	4798      	blx	r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	e000      	b.n	8007606 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800763e:	2303      	movs	r3, #3
 8007640:	e02a      	b.n	8007698 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6852      	ldr	r2, [r2, #4]
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	4611      	mov	r1, r2
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007662:	2340      	movs	r3, #64	@ 0x40
 8007664:	2200      	movs	r2, #0
 8007666:	2100      	movs	r1, #0
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 f8e8 	bl	800883e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2240      	movs	r2, #64	@ 0x40
 800767a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800767e:	2340      	movs	r3, #64	@ 0x40
 8007680:	2200      	movs	r2, #0
 8007682:	2180      	movs	r1, #128	@ 0x80
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f8da 	bl	800883e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2240      	movs	r2, #64	@ 0x40
 8007694:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	78fa      	ldrb	r2, [r7, #3]
 80076b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2204      	movs	r2, #4
 80076da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b04      	cmp	r3, #4
 80076fe:	d106      	bne.n	800770e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007706:	b2da      	uxtb	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800772e:	2303      	movs	r3, #3
 8007730:	e012      	b.n	8007758 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d10b      	bne.n	8007756 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d005      	beq.n	8007756 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007776:	2303      	movs	r3, #3
 8007778:	e014      	b.n	80077a4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b03      	cmp	r3, #3
 8007784:	d10d      	bne.n	80077a2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	4611      	mov	r1, r2
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e014      	b.n	80077f0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d10d      	bne.n	80077ee <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e6:	78fa      	ldrb	r2, [r7, #3]
 80077e8:	4611      	mov	r1, r2
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d009      	beq.n	800783c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6852      	ldr	r2, [r2, #4]
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	4611      	mov	r1, r2
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	4798      	blx	r3
  }

  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007846:	b480      	push	{r7}
 8007848:	b087      	sub	sp, #28
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	3301      	adds	r3, #1
 800785c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007864:	8a3b      	ldrh	r3, [r7, #16]
 8007866:	021b      	lsls	r3, r3, #8
 8007868:	b21a      	sxth	r2, r3
 800786a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800786e:	4313      	orrs	r3, r2
 8007870:	b21b      	sxth	r3, r3
 8007872:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007874:	89fb      	ldrh	r3, [r7, #14]
}
 8007876:	4618      	mov	r0, r3
 8007878:	371c      	adds	r7, #28
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
	...

08007884 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800789a:	2b40      	cmp	r3, #64	@ 0x40
 800789c:	d005      	beq.n	80078aa <USBD_StdDevReq+0x26>
 800789e:	2b40      	cmp	r3, #64	@ 0x40
 80078a0:	d853      	bhi.n	800794a <USBD_StdDevReq+0xc6>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <USBD_StdDevReq+0x3a>
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	d14f      	bne.n	800794a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]
      break;
 80078bc:	e04a      	b.n	8007954 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	785b      	ldrb	r3, [r3, #1]
 80078c2:	2b09      	cmp	r3, #9
 80078c4:	d83b      	bhi.n	800793e <USBD_StdDevReq+0xba>
 80078c6:	a201      	add	r2, pc, #4	@ (adr r2, 80078cc <USBD_StdDevReq+0x48>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	08007921 	.word	0x08007921
 80078d0:	08007935 	.word	0x08007935
 80078d4:	0800793f 	.word	0x0800793f
 80078d8:	0800792b 	.word	0x0800792b
 80078dc:	0800793f 	.word	0x0800793f
 80078e0:	080078ff 	.word	0x080078ff
 80078e4:	080078f5 	.word	0x080078f5
 80078e8:	0800793f 	.word	0x0800793f
 80078ec:	08007917 	.word	0x08007917
 80078f0:	08007909 	.word	0x08007909
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f9de 	bl	8007cb8 <USBD_GetDescriptor>
          break;
 80078fc:	e024      	b.n	8007948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fb55 	bl	8007fb0 <USBD_SetAddress>
          break;
 8007906:	e01f      	b.n	8007948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fb94 	bl	8008038 <USBD_SetConfig>
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]
          break;
 8007914:	e018      	b.n	8007948 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc33 	bl	8008184 <USBD_GetConfig>
          break;
 800791e:	e013      	b.n	8007948 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fc64 	bl	80081f0 <USBD_GetStatus>
          break;
 8007928:	e00e      	b.n	8007948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fc93 	bl	8008258 <USBD_SetFeature>
          break;
 8007932:	e009      	b.n	8007948 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fca2 	bl	8008280 <USBD_ClrFeature>
          break;
 800793c:	e004      	b.n	8007948 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fcf9 	bl	8008338 <USBD_CtlError>
          break;
 8007946:	bf00      	nop
      }
      break;
 8007948:	e004      	b.n	8007954 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fcf3 	bl	8008338 <USBD_CtlError>
      break;
 8007952:	bf00      	nop
  }

  return ret;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop

08007960 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007976:	2b40      	cmp	r3, #64	@ 0x40
 8007978:	d005      	beq.n	8007986 <USBD_StdItfReq+0x26>
 800797a:	2b40      	cmp	r3, #64	@ 0x40
 800797c:	d82f      	bhi.n	80079de <USBD_StdItfReq+0x7e>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <USBD_StdItfReq+0x26>
 8007982:	2b20      	cmp	r3, #32
 8007984:	d12b      	bne.n	80079de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800798c:	b2db      	uxtb	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	2b02      	cmp	r3, #2
 8007992:	d81d      	bhi.n	80079d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	889b      	ldrh	r3, [r3, #4]
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b0f      	cmp	r3, #15
 800799c:	d813      	bhi.n	80079c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	4798      	blx	r3
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	88db      	ldrh	r3, [r3, #6]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d110      	bne.n	80079da <USBD_StdItfReq+0x7a>
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10d      	bne.n	80079da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fd85 	bl	80084ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079c4:	e009      	b.n	80079da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fcb5 	bl	8008338 <USBD_CtlError>
          break;
 80079ce:	e004      	b.n	80079da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fcb0 	bl	8008338 <USBD_CtlError>
          break;
 80079d8:	e000      	b.n	80079dc <USBD_StdItfReq+0x7c>
          break;
 80079da:	bf00      	nop
      }
      break;
 80079dc:	e004      	b.n	80079e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fca9 	bl	8008338 <USBD_CtlError>
      break;
 80079e6:	bf00      	nop
  }

  return ret;
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	889b      	ldrh	r3, [r3, #4]
 8007a04:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a0e:	2b40      	cmp	r3, #64	@ 0x40
 8007a10:	d007      	beq.n	8007a22 <USBD_StdEPReq+0x30>
 8007a12:	2b40      	cmp	r3, #64	@ 0x40
 8007a14:	f200 8145 	bhi.w	8007ca2 <USBD_StdEPReq+0x2b0>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00c      	beq.n	8007a36 <USBD_StdEPReq+0x44>
 8007a1c:	2b20      	cmp	r3, #32
 8007a1e:	f040 8140 	bne.w	8007ca2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]
      break;
 8007a34:	e13a      	b.n	8007cac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	785b      	ldrb	r3, [r3, #1]
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d007      	beq.n	8007a4e <USBD_StdEPReq+0x5c>
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	f300 8129 	bgt.w	8007c96 <USBD_StdEPReq+0x2a4>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d07f      	beq.n	8007b48 <USBD_StdEPReq+0x156>
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d03c      	beq.n	8007ac6 <USBD_StdEPReq+0xd4>
 8007a4c:	e123      	b.n	8007c96 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d002      	beq.n	8007a60 <USBD_StdEPReq+0x6e>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d016      	beq.n	8007a8c <USBD_StdEPReq+0x9a>
 8007a5e:	e02c      	b.n	8007aba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <USBD_StdEPReq+0x90>
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b80      	cmp	r3, #128	@ 0x80
 8007a6a:	d00a      	beq.n	8007a82 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 ff29 	bl	80088c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a76:	2180      	movs	r1, #128	@ 0x80
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 ff25 	bl	80088c8 <USBD_LL_StallEP>
 8007a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a80:	e020      	b.n	8007ac4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fc57 	bl	8008338 <USBD_CtlError>
              break;
 8007a8a:	e01b      	b.n	8007ac4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	885b      	ldrh	r3, [r3, #2]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10e      	bne.n	8007ab2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <USBD_StdEPReq+0xc0>
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b80      	cmp	r3, #128	@ 0x80
 8007a9e:	d008      	beq.n	8007ab2 <USBD_StdEPReq+0xc0>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	88db      	ldrh	r3, [r3, #6]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 ff0b 	bl	80088c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fd0b 	bl	80084ce <USBD_CtlSendStatus>

              break;
 8007ab8:	e004      	b.n	8007ac4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fc3b 	bl	8008338 <USBD_CtlError>
              break;
 8007ac2:	bf00      	nop
          }
          break;
 8007ac4:	e0ec      	b.n	8007ca0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d002      	beq.n	8007ad8 <USBD_StdEPReq+0xe6>
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d016      	beq.n	8007b04 <USBD_StdEPReq+0x112>
 8007ad6:	e030      	b.n	8007b3a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00d      	beq.n	8007afa <USBD_StdEPReq+0x108>
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b80      	cmp	r3, #128	@ 0x80
 8007ae2:	d00a      	beq.n	8007afa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 feed 	bl	80088c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aee:	2180      	movs	r1, #128	@ 0x80
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fee9 	bl	80088c8 <USBD_LL_StallEP>
 8007af6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007af8:	e025      	b.n	8007b46 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fc1b 	bl	8008338 <USBD_CtlError>
              break;
 8007b02:	e020      	b.n	8007b46 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	885b      	ldrh	r3, [r3, #2]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11b      	bne.n	8007b44 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fef3 	bl	8008906 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fcd4 	bl	80084ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007b38:	e004      	b.n	8007b44 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fbfb 	bl	8008338 <USBD_CtlError>
              break;
 8007b42:	e000      	b.n	8007b46 <USBD_StdEPReq+0x154>
              break;
 8007b44:	bf00      	nop
          }
          break;
 8007b46:	e0ab      	b.n	8007ca0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d002      	beq.n	8007b5a <USBD_StdEPReq+0x168>
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d032      	beq.n	8007bbe <USBD_StdEPReq+0x1cc>
 8007b58:	e097      	b.n	8007c8a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d007      	beq.n	8007b70 <USBD_StdEPReq+0x17e>
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b80      	cmp	r3, #128	@ 0x80
 8007b64:	d004      	beq.n	8007b70 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fbe5 	bl	8008338 <USBD_CtlError>
                break;
 8007b6e:	e091      	b.n	8007c94 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da0b      	bge.n	8007b90 <USBD_StdEPReq+0x19e>
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	3310      	adds	r3, #16
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	e00b      	b.n	8007ba8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fc2f 	bl	800841a <USBD_CtlSendData>
              break;
 8007bbc:	e06a      	b.n	8007c94 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da11      	bge.n	8007bea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	f003 020f 	and.w	r2, r3, #15
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	3324      	adds	r3, #36	@ 0x24
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d117      	bne.n	8007c10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fba8 	bl	8008338 <USBD_CtlError>
                  break;
 8007be8:	e054      	b.n	8007c94 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	f003 020f 	and.w	r2, r3, #15
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d104      	bne.n	8007c10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fb95 	bl	8008338 <USBD_CtlError>
                  break;
 8007c0e:	e041      	b.n	8007c94 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	da0b      	bge.n	8007c30 <USBD_StdEPReq+0x23e>
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	3310      	adds	r3, #16
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	e00b      	b.n	8007c48 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	4413      	add	r3, r2
 8007c46:	3304      	adds	r3, #4
 8007c48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <USBD_StdEPReq+0x264>
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b80      	cmp	r3, #128	@ 0x80
 8007c54:	d103      	bne.n	8007c5e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	e00e      	b.n	8007c7c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fe6e 	bl	8008944 <USBD_LL_IsStallEP>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2201      	movs	r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e002      	b.n	8007c7c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2202      	movs	r2, #2
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fbc9 	bl	800841a <USBD_CtlSendData>
              break;
 8007c88:	e004      	b.n	8007c94 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fb53 	bl	8008338 <USBD_CtlError>
              break;
 8007c92:	bf00      	nop
          }
          break;
 8007c94:	e004      	b.n	8007ca0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fb4d 	bl	8008338 <USBD_CtlError>
          break;
 8007c9e:	bf00      	nop
      }
      break;
 8007ca0:	e004      	b.n	8007cac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fb47 	bl	8008338 <USBD_CtlError>
      break;
 8007caa:	bf00      	nop
  }

  return ret;
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	885b      	ldrh	r3, [r3, #2]
 8007cd2:	0a1b      	lsrs	r3, r3, #8
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	2b06      	cmp	r3, #6
 8007cda:	f200 813b 	bhi.w	8007f54 <USBD_GetDescriptor+0x29c>
 8007cde:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce4 <USBD_GetDescriptor+0x2c>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d01 	.word	0x08007d01
 8007ce8:	08007d19 	.word	0x08007d19
 8007cec:	08007d59 	.word	0x08007d59
 8007cf0:	08007f55 	.word	0x08007f55
 8007cf4:	08007f55 	.word	0x08007f55
 8007cf8:	08007ef5 	.word	0x08007ef5
 8007cfc:	08007f21 	.word	0x08007f21
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
      break;
 8007d16:	e125      	b.n	8007f64 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7c1b      	ldrb	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10d      	bne.n	8007d3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d28:	f107 0208 	add.w	r2, r7, #8
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	2202      	movs	r2, #2
 8007d38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d3a:	e113      	b.n	8007f64 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d44:	f107 0208 	add.w	r2, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	2202      	movs	r2, #2
 8007d54:	701a      	strb	r2, [r3, #0]
      break;
 8007d56:	e105      	b.n	8007f64 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	885b      	ldrh	r3, [r3, #2]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b05      	cmp	r3, #5
 8007d60:	f200 80ac 	bhi.w	8007ebc <USBD_GetDescriptor+0x204>
 8007d64:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <USBD_GetDescriptor+0xb4>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007d85 	.word	0x08007d85
 8007d70:	08007db9 	.word	0x08007db9
 8007d74:	08007ded 	.word	0x08007ded
 8007d78:	08007e21 	.word	0x08007e21
 8007d7c:	08007e55 	.word	0x08007e55
 8007d80:	08007e89 	.word	0x08007e89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	7c12      	ldrb	r2, [r2, #16]
 8007d9c:	f107 0108 	add.w	r1, r7, #8
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007da6:	e0a4      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fac4 	bl	8008338 <USBD_CtlError>
            err++;
 8007db0:	7afb      	ldrb	r3, [r7, #11]
 8007db2:	3301      	adds	r3, #1
 8007db4:	72fb      	strb	r3, [r7, #11]
          break;
 8007db6:	e09c      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00b      	beq.n	8007ddc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	7c12      	ldrb	r2, [r2, #16]
 8007dd0:	f107 0108 	add.w	r1, r7, #8
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
 8007dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dda:	e08a      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 faaa 	bl	8008338 <USBD_CtlError>
            err++;
 8007de4:	7afb      	ldrb	r3, [r7, #11]
 8007de6:	3301      	adds	r3, #1
 8007de8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dea:	e082      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	7c12      	ldrb	r2, [r2, #16]
 8007e04:	f107 0108 	add.w	r1, r7, #8
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e0e:	e070      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa90 	bl	8008338 <USBD_CtlError>
            err++;
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e1e:	e068      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	7c12      	ldrb	r2, [r2, #16]
 8007e38:	f107 0108 	add.w	r1, r7, #8
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4798      	blx	r3
 8007e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e42:	e056      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa76 	bl	8008338 <USBD_CtlError>
            err++;
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	72fb      	strb	r3, [r7, #11]
          break;
 8007e52:	e04e      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00b      	beq.n	8007e78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	7c12      	ldrb	r2, [r2, #16]
 8007e6c:	f107 0108 	add.w	r1, r7, #8
 8007e70:	4610      	mov	r0, r2
 8007e72:	4798      	blx	r3
 8007e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e76:	e03c      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa5c 	bl	8008338 <USBD_CtlError>
            err++;
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	3301      	adds	r3, #1
 8007e84:	72fb      	strb	r3, [r7, #11]
          break;
 8007e86:	e034      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	7c12      	ldrb	r2, [r2, #16]
 8007ea0:	f107 0108 	add.w	r1, r7, #8
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4798      	blx	r3
 8007ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eaa:	e022      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa42 	bl	8008338 <USBD_CtlError>
            err++;
 8007eb4:	7afb      	ldrb	r3, [r7, #11]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eba:	e01a      	b.n	8007ef2 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00c      	beq.n	8007ee2 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	8852      	ldrh	r2, [r2, #2]
 8007ed4:	b2d1      	uxtb	r1, r2
 8007ed6:	f107 0208 	add.w	r2, r7, #8
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	4798      	blx	r3
 8007ede:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8007ee0:	e006      	b.n	8007ef0 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fa27 	bl	8008338 <USBD_CtlError>
            err++;
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	3301      	adds	r3, #1
 8007eee:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef0:	bf00      	nop
      }
      break;
 8007ef2:	e037      	b.n	8007f64 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	7c1b      	ldrb	r3, [r3, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d109      	bne.n	8007f10 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f04:	f107 0208 	add.w	r2, r7, #8
 8007f08:	4610      	mov	r0, r2
 8007f0a:	4798      	blx	r3
 8007f0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f0e:	e029      	b.n	8007f64 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa10 	bl	8008338 <USBD_CtlError>
        err++;
 8007f18:	7afb      	ldrb	r3, [r7, #11]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	72fb      	strb	r3, [r7, #11]
      break;
 8007f1e:	e021      	b.n	8007f64 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	7c1b      	ldrb	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10d      	bne.n	8007f44 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f30:	f107 0208 	add.w	r2, r7, #8
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
 8007f38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	2207      	movs	r2, #7
 8007f40:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f42:	e00f      	b.n	8007f64 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f9f6 	bl	8008338 <USBD_CtlError>
        err++;
 8007f4c:	7afb      	ldrb	r3, [r7, #11]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	72fb      	strb	r3, [r7, #11]
      break;
 8007f52:	e007      	b.n	8007f64 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f9ee 	bl	8008338 <USBD_CtlError>
      err++;
 8007f5c:	7afb      	ldrb	r3, [r7, #11]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	72fb      	strb	r3, [r7, #11]
      break;
 8007f62:	bf00      	nop
  }

  if (err != 0U)
 8007f64:	7afb      	ldrb	r3, [r7, #11]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d11e      	bne.n	8007fa8 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	88db      	ldrh	r3, [r3, #6]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d016      	beq.n	8007fa0 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8007f72:	893b      	ldrh	r3, [r7, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00e      	beq.n	8007f96 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	88da      	ldrh	r2, [r3, #6]
 8007f7c:	893b      	ldrh	r3, [r7, #8]
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	bf28      	it	cs
 8007f82:	4613      	movcs	r3, r2
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f88:	893b      	ldrh	r3, [r7, #8]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	68f9      	ldr	r1, [r7, #12]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fa43 	bl	800841a <USBD_CtlSendData>
 8007f94:	e009      	b.n	8007faa <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f9cd 	bl	8008338 <USBD_CtlError>
 8007f9e:	e004      	b.n	8007faa <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa94 	bl	80084ce <USBD_CtlSendStatus>
 8007fa6:	e000      	b.n	8007faa <USBD_GetDescriptor+0x2f2>
    return;
 8007fa8:	bf00      	nop
  }
}
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	889b      	ldrh	r3, [r3, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d131      	bne.n	8008026 <USBD_SetAddress+0x76>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	88db      	ldrh	r3, [r3, #6]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d12d      	bne.n	8008026 <USBD_SetAddress+0x76>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	885b      	ldrh	r3, [r3, #2]
 8007fce:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fd0:	d829      	bhi.n	8008026 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d104      	bne.n	8007ff4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f9a3 	bl	8008338 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff2:	e01d      	b.n	8008030 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	7bfa      	ldrb	r2, [r7, #15]
 8007ff8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fccb 	bl	800899c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa61 	bl	80084ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d004      	beq.n	800801c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2202      	movs	r2, #2
 8008016:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801a:	e009      	b.n	8008030 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008024:	e004      	b.n	8008030 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f985 	bl	8008338 <USBD_CtlError>
  }
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	885b      	ldrh	r3, [r3, #2]
 800804a:	b2da      	uxtb	r2, r3
 800804c:	4b4c      	ldr	r3, [pc, #304]	@ (8008180 <USBD_SetConfig+0x148>)
 800804e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008050:	4b4b      	ldr	r3, [pc, #300]	@ (8008180 <USBD_SetConfig+0x148>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d905      	bls.n	8008064 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f96c 	bl	8008338 <USBD_CtlError>
    return USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	e088      	b.n	8008176 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d002      	beq.n	8008076 <USBD_SetConfig+0x3e>
 8008070:	2b03      	cmp	r3, #3
 8008072:	d025      	beq.n	80080c0 <USBD_SetConfig+0x88>
 8008074:	e071      	b.n	800815a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008076:	4b42      	ldr	r3, [pc, #264]	@ (8008180 <USBD_SetConfig+0x148>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d01c      	beq.n	80080b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800807e:	4b40      	ldr	r3, [pc, #256]	@ (8008180 <USBD_SetConfig+0x148>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008088:	4b3d      	ldr	r3, [pc, #244]	@ (8008180 <USBD_SetConfig+0x148>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff f93b 	bl	800730a <USBD_SetClassConfig>
 8008094:	4603      	mov	r3, r0
 8008096:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f949 	bl	8008338 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080a6:	e065      	b.n	8008174 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fa10 	bl	80084ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2203      	movs	r2, #3
 80080b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080b6:	e05d      	b.n	8008174 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fa08 	bl	80084ce <USBD_CtlSendStatus>
      break;
 80080be:	e059      	b.n	8008174 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080c0:	4b2f      	ldr	r3, [pc, #188]	@ (8008180 <USBD_SetConfig+0x148>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d112      	bne.n	80080ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80080d0:	4b2b      	ldr	r3, [pc, #172]	@ (8008180 <USBD_SetConfig+0x148>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080da:	4b29      	ldr	r3, [pc, #164]	@ (8008180 <USBD_SetConfig+0x148>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff f92e 	bl	8007342 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9f1 	bl	80084ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080ec:	e042      	b.n	8008174 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80080ee:	4b24      	ldr	r3, [pc, #144]	@ (8008180 <USBD_SetConfig+0x148>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d02a      	beq.n	8008152 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff f91c 	bl	8007342 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800810a:	4b1d      	ldr	r3, [pc, #116]	@ (8008180 <USBD_SetConfig+0x148>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008114:	4b1a      	ldr	r3, [pc, #104]	@ (8008180 <USBD_SetConfig+0x148>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff f8f5 	bl	800730a <USBD_SetClassConfig>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00f      	beq.n	800814a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f903 	bl	8008338 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff f901 	bl	8007342 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008148:	e014      	b.n	8008174 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f9bf 	bl	80084ce <USBD_CtlSendStatus>
      break;
 8008150:	e010      	b.n	8008174 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f9bb 	bl	80084ce <USBD_CtlSendStatus>
      break;
 8008158:	e00c      	b.n	8008174 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8eb 	bl	8008338 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008162:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <USBD_SetConfig+0x148>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff f8ea 	bl	8007342 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800816e:	2303      	movs	r3, #3
 8008170:	73fb      	strb	r3, [r7, #15]
      break;
 8008172:	bf00      	nop
  }

  return ret;
 8008174:	7bfb      	ldrb	r3, [r7, #15]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	200010d4 	.word	0x200010d4

08008184 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	88db      	ldrh	r3, [r3, #6]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d004      	beq.n	80081a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8cd 	bl	8008338 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800819e:	e023      	b.n	80081e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	dc02      	bgt.n	80081b2 <USBD_GetConfig+0x2e>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dc03      	bgt.n	80081b8 <USBD_GetConfig+0x34>
 80081b0:	e015      	b.n	80081de <USBD_GetConfig+0x5a>
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d00b      	beq.n	80081ce <USBD_GetConfig+0x4a>
 80081b6:	e012      	b.n	80081de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3308      	adds	r3, #8
 80081c2:	2201      	movs	r2, #1
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f927 	bl	800841a <USBD_CtlSendData>
        break;
 80081cc:	e00c      	b.n	80081e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3304      	adds	r3, #4
 80081d2:	2201      	movs	r2, #1
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f91f 	bl	800841a <USBD_CtlSendData>
        break;
 80081dc:	e004      	b.n	80081e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f8a9 	bl	8008338 <USBD_CtlError>
        break;
 80081e6:	bf00      	nop
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008200:	b2db      	uxtb	r3, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	2b02      	cmp	r3, #2
 8008206:	d81e      	bhi.n	8008246 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	88db      	ldrh	r3, [r3, #6]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d004      	beq.n	800821a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f890 	bl	8008338 <USBD_CtlError>
        break;
 8008218:	e01a      	b.n	8008250 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008226:	2b00      	cmp	r3, #0
 8008228:	d005      	beq.n	8008236 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f043 0202 	orr.w	r2, r3, #2
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	330c      	adds	r3, #12
 800823a:	2202      	movs	r2, #2
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f8eb 	bl	800841a <USBD_CtlSendData>
      break;
 8008244:	e004      	b.n	8008250 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f875 	bl	8008338 <USBD_CtlError>
      break;
 800824e:	bf00      	nop
  }
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	885b      	ldrh	r3, [r3, #2]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d106      	bne.n	8008278 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f92b 	bl	80084ce <USBD_CtlSendStatus>
  }
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008290:	b2db      	uxtb	r3, r3
 8008292:	3b01      	subs	r3, #1
 8008294:	2b02      	cmp	r3, #2
 8008296:	d80b      	bhi.n	80082b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	885b      	ldrh	r3, [r3, #2]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d10c      	bne.n	80082ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f910 	bl	80084ce <USBD_CtlSendStatus>
      }
      break;
 80082ae:	e004      	b.n	80082ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f840 	bl	8008338 <USBD_CtlError>
      break;
 80082b8:	e000      	b.n	80082bc <USBD_ClrFeature+0x3c>
      break;
 80082ba:	bf00      	nop
  }
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	781a      	ldrb	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f7ff faa9 	bl	8007846 <SWAPBYTE>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3301      	adds	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff fa9c 	bl	8007846 <SWAPBYTE>
 800830e:	4603      	mov	r3, r0
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3301      	adds	r3, #1
 800831a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3301      	adds	r3, #1
 8008320:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff fa8f 	bl	8007846 <SWAPBYTE>
 8008328:	4603      	mov	r3, r0
 800832a:	461a      	mov	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	80da      	strh	r2, [r3, #6]
}
 8008330:	bf00      	nop
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008342:	2180      	movs	r1, #128	@ 0x80
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fabf 	bl	80088c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800834a:	2100      	movs	r1, #0
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fabb 	bl	80088c8 <USBD_LL_StallEP>
}
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d036      	beq.n	80083de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008374:	6938      	ldr	r0, [r7, #16]
 8008376:	f000 f836 	bl	80083e6 <USBD_GetLen>
 800837a:	4603      	mov	r3, r0
 800837c:	3301      	adds	r3, #1
 800837e:	b29b      	uxth	r3, r3
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	b29a      	uxth	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	4413      	add	r3, r2
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	7812      	ldrb	r2, [r2, #0]
 8008392:	701a      	strb	r2, [r3, #0]
  idx++;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	3301      	adds	r3, #1
 8008398:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	4413      	add	r3, r2
 80083a0:	2203      	movs	r2, #3
 80083a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	3301      	adds	r3, #1
 80083a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083aa:	e013      	b.n	80083d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4413      	add	r3, r2
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	7812      	ldrb	r2, [r2, #0]
 80083b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	3301      	adds	r3, #1
 80083bc:	613b      	str	r3, [r7, #16]
    idx++;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	3301      	adds	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	4413      	add	r3, r2
 80083ca:	2200      	movs	r2, #0
 80083cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	3301      	adds	r3, #1
 80083d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e7      	bne.n	80083ac <USBD_GetString+0x52>
 80083dc:	e000      	b.n	80083e0 <USBD_GetString+0x86>
    return;
 80083de:	bf00      	nop
  }
}
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b085      	sub	sp, #20
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083f6:	e005      	b.n	8008404 <USBD_GetLen+0x1e>
  {
    len++;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	3301      	adds	r3, #1
 80083fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	3301      	adds	r3, #1
 8008402:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1f5      	bne.n	80083f8 <USBD_GetLen+0x12>
  }

  return len;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2202      	movs	r2, #2
 800842a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	2100      	movs	r1, #0
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 faca 	bl	80089da <USBD_LL_Transmit>

  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	2100      	movs	r1, #0
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 fab9 	bl	80089da <USBD_LL_Transmit>

  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2203      	movs	r2, #3
 8008482:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	2100      	movs	r1, #0
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 fabd 	bl	8008a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	2100      	movs	r1, #0
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 faac 	bl	8008a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2204      	movs	r2, #4
 80084da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084de:	2300      	movs	r3, #0
 80084e0:	2200      	movs	r2, #0
 80084e2:	2100      	movs	r1, #0
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fa78 	bl	80089da <USBD_LL_Transmit>

  return USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2205      	movs	r2, #5
 8008500:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008504:	2300      	movs	r3, #0
 8008506:	2200      	movs	r2, #0
 8008508:	2100      	movs	r1, #0
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa86 	bl	8008a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
 8008526:	4613      	mov	r3, r2
 8008528:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800852a:	883b      	ldrh	r3, [r7, #0]
 800852c:	089b      	lsrs	r3, r3, #2
 800852e:	b29a      	uxth	r2, r3
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7fb fa19 	bl	800396c <HAL_PCDEx_SetTxFiFo>
 800853a:	4603      	mov	r3, r0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 8008550:	887b      	ldrh	r3, [r7, #2]
 8008552:	089b      	lsrs	r3, r3, #2
 8008554:	b29b      	uxth	r3, r3
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7fb fa4e 	bl	80039fa <HAL_PCDEx_SetRxFiFo>
 800855e:	4603      	mov	r3, r0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f7fe fef7 	bl	8007372 <USBD_LL_SetupStage>
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800859e:	78fa      	ldrb	r2, [r7, #3]
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	4613      	mov	r3, r2
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	440b      	add	r3, r1
 80085ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	4619      	mov	r1, r3
 80085b6:	f7fe ff31 	bl	800741c <USBD_LL_DataOutStage>
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	3320      	adds	r3, #32
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	4619      	mov	r1, r3
 80085ea:	f7fe ff7a 	bl	80074e2 <USBD_LL_DataInStage>
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008604:	4618      	mov	r0, r3
 8008606:	f7ff f889 	bl	800771c <USBD_LL_SOF>
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800861a:	2301      	movs	r3, #1
 800861c:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	79db      	ldrb	r3, [r3, #7]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d102      	bne.n	800862c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 8008626:	2301      	movs	r3, #1
 8008628:	73fb      	strb	r3, [r7, #15]
 800862a:	e008      	b.n	800863e <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	79db      	ldrb	r3, [r3, #7]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d102      	bne.n	800863a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
 8008638:	e001      	b.n	800863e <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800863a:	f7f9 faef 	bl	8001c1c <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008644:	7bfa      	ldrb	r2, [r7, #15]
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff f829 	bl	80076a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe ffda 	bl	800760e <USBD_LL_Reset>
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff f824 	bl	80076c0 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	7adb      	ldrb	r3, [r3, #11]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008698:	4b04      	ldr	r3, [pc, #16]	@ (80086ac <HAL_PCD_SuspendCallback+0x48>)
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	4a03      	ldr	r2, [pc, #12]	@ (80086ac <HAL_PCD_SuspendCallback+0x48>)
 800869e:	f043 0306 	orr.w	r3, r3, #6
 80086a2:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	e000ed00 	.word	0xe000ed00

080086b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff f814 	bl	80076ec <USBD_LL_Resume>
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff f862 	bl	80077ac <USBD_LL_IsoOUTIncomplete>
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff f82a 	bl	8007760 <USBD_LL_IsoINIncomplete>
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff f868 	bl	80077f8 <USBD_LL_DevConnected>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800873e:	4618      	mov	r0, r3
 8008740:	f7ff f865 	bl	800780e <USBD_LL_DevDisconnected>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8008754:	4b27      	ldr	r3, [pc, #156]	@ (80087f4 <USBD_LL_Init+0xa8>)
 8008756:	4a28      	ldr	r2, [pc, #160]	@ (80087f8 <USBD_LL_Init+0xac>)
 8008758:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d143      	bne.n	80087ea <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 8008762:	4b24      	ldr	r3, [pc, #144]	@ (80087f4 <USBD_LL_Init+0xa8>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800876c:	4b21      	ldr	r3, [pc, #132]	@ (80087f4 <USBD_LL_Init+0xa8>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 8008776:	4b1f      	ldr	r3, [pc, #124]	@ (80087f4 <USBD_LL_Init+0xa8>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fee0 	bl	8008544 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 8008784:	4b1b      	ldr	r3, [pc, #108]	@ (80087f4 <USBD_LL_Init+0xa8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2240      	movs	r2, #64	@ 0x40
 800878a:	2100      	movs	r1, #0
 800878c:	4618      	mov	r0, r3
 800878e:	f7ff fec4 	bl	800851a <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_MOUSE == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_MOUSE_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
 8008792:	4b18      	ldr	r3, [pc, #96]	@ (80087f4 <USBD_LL_Init+0xa8>)
 8008794:	6818      	ldr	r0, [r3, #0]
 8008796:	4b19      	ldr	r3, [pc, #100]	@ (80087fc <USBD_LL_Init+0xb0>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2240      	movs	r2, #64	@ 0x40
 80087a2:	4619      	mov	r1, r3
 80087a4:	f7ff feb9 	bl	800851a <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]
 80087ac:	e01a      	b.n	80087e4 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 80087ae:	4b11      	ldr	r3, [pc, #68]	@ (80087f4 <USBD_LL_Init+0xa8>)
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	4a12      	ldr	r2, [pc, #72]	@ (8008800 <USBD_LL_Init+0xb4>)
 80087b6:	5cd3      	ldrb	r3, [r2, r3]
 80087b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2280      	movs	r2, #128	@ 0x80
 80087c0:	4619      	mov	r1, r3
 80087c2:	f7ff feaa 	bl	800851a <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 80087c6:	4b0b      	ldr	r3, [pc, #44]	@ (80087f4 <USBD_LL_Init+0xa8>)
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008804 <USBD_LL_Init+0xb8>)
 80087ce:	5cd3      	ldrb	r3, [r2, r3]
 80087d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2240      	movs	r2, #64	@ 0x40
 80087d8:	4619      	mov	r1, r3
 80087da:	f7ff fe9e 	bl	800851a <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	3301      	adds	r3, #1
 80087e2:	73fb      	strb	r3, [r7, #15]
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0e1      	beq.n	80087ae <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200010d8 	.word	0x200010d8
 80087f8:	200002f8 	.word	0x200002f8
 80087fc:	2000019e 	.word	0x2000019e
 8008800:	20000d84 	.word	0x20000d84
 8008804:	20000d8c 	.word	0x20000d8c

08008808 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800881e:	4618      	mov	r0, r3
 8008820:	f7f9 ffc4 	bl	80027ac <HAL_PCD_Start>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	4618      	mov	r0, r3
 800882c:	f000 f92a 	bl	8008a84 <USBD_Get_USB_Status>
 8008830:	4603      	mov	r3, r0
 8008832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008834:	7bbb      	ldrb	r3, [r7, #14]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	4608      	mov	r0, r1
 8008848:	4611      	mov	r1, r2
 800884a:	461a      	mov	r2, r3
 800884c:	4603      	mov	r3, r0
 800884e:	70fb      	strb	r3, [r7, #3]
 8008850:	460b      	mov	r3, r1
 8008852:	70bb      	strb	r3, [r7, #2]
 8008854:	4613      	mov	r3, r2
 8008856:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 8008866:	78bb      	ldrb	r3, [r7, #2]
 8008868:	883a      	ldrh	r2, [r7, #0]
 800886a:	78f9      	ldrb	r1, [r7, #3]
 800886c:	f7fa fc98 	bl	80031a0 <HAL_PCD_EP_Open>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 f904 	bl	8008a84 <USBD_Get_USB_Status>
 800887c:	4603      	mov	r3, r0
 800887e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008880:	7bbb      	ldrb	r3, [r7, #14]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	460b      	mov	r3, r1
 8008894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80088a4:	78fa      	ldrb	r2, [r7, #3]
 80088a6:	4611      	mov	r1, r2
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fa fce3 	bl	8003274 <HAL_PCD_EP_Close>
 80088ae:	4603      	mov	r3, r0
 80088b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 f8e5 	bl	8008a84 <USBD_Get_USB_Status>
 80088ba:	4603      	mov	r3, r0
 80088bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088be:	7bbb      	ldrb	r3, [r7, #14]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80088e2:	78fa      	ldrb	r2, [r7, #3]
 80088e4:	4611      	mov	r1, r2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fa fd9b 	bl	8003422 <HAL_PCD_EP_SetStall>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 f8c6 	bl	8008a84 <USBD_Get_USB_Status>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8008920:	78fa      	ldrb	r2, [r7, #3]
 8008922:	4611      	mov	r1, r2
 8008924:	4618      	mov	r0, r3
 8008926:	f7fa fddf 	bl	80034e8 <HAL_PCD_EP_ClrStall>
 800892a:	4603      	mov	r3, r0
 800892c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	4618      	mov	r0, r3
 8008932:	f000 f8a7 	bl	8008a84 <USBD_Get_USB_Status>
 8008936:	4603      	mov	r3, r0
 8008938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800893a:	7bbb      	ldrb	r3, [r7, #14]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8008956:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 8008958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800895c:	2b00      	cmp	r3, #0
 800895e:	da0b      	bge.n	8008978 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	4613      	mov	r3, r2
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	440b      	add	r3, r1
 8008972:	3316      	adds	r3, #22
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	e00b      	b.n	8008990 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800897e:	68f9      	ldr	r1, [r7, #12]
 8008980:	4613      	mov	r3, r2
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800898e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	4611      	mov	r1, r2
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fa fbcc 	bl	8003158 <HAL_PCD_SetAddress>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 f85c 	bl	8008a84 <USBD_Get_USB_Status>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b086      	sub	sp, #24
 80089de:	af00      	add	r7, sp, #0
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	603b      	str	r3, [r7, #0]
 80089e6:	460b      	mov	r3, r1
 80089e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 80089f8:	7af9      	ldrb	r1, [r7, #11]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	f7fa fcd6 	bl	80033ae <HAL_PCD_EP_Transmit>
 8008a02:	4603      	mov	r3, r0
 8008a04:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f83b 	bl	8008a84 <USBD_Get_USB_Status>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a12:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	607a      	str	r2, [r7, #4]
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 8008a3a:	7af9      	ldrb	r1, [r7, #11]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	f7fa fc62 	bl	8003308 <HAL_PCD_EP_Receive>
 8008a44:	4603      	mov	r3, r0
 8008a46:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 f81a 	bl	8008a84 <USBD_Get_USB_Status>
 8008a50:	4603      	mov	r3, r0
 8008a52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a54:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b082      	sub	sp, #8
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	460b      	mov	r3, r1
 8008a68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8008a70:	78fa      	ldrb	r2, [r7, #3]
 8008a72:	4611      	mov	r1, r2
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fa fc82 	bl	800337e <HAL_PCD_EP_GetRxCount>
 8008a7a:	4603      	mov	r3, r0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d817      	bhi.n	8008ac8 <USBD_Get_USB_Status+0x44>
 8008a98:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <USBD_Get_USB_Status+0x1c>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008ab1 	.word	0x08008ab1
 8008aa4:	08008ab7 	.word	0x08008ab7
 8008aa8:	08008abd 	.word	0x08008abd
 8008aac:	08008ac3 	.word	0x08008ac3
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab4:	e00b      	b.n	8008ace <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aba:	e008      	b.n	8008ace <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 8008abc:	2301      	movs	r3, #1
 8008abe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac0:	e005      	b.n	8008ace <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac6:	e002      	b.n	8008ace <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	73fb      	strb	r3, [r7, #15]
    break;
 8008acc:	bf00      	nop
  }
  return usb_status;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <sniprintf>:
 8008adc:	b40c      	push	{r2, r3}
 8008ade:	b530      	push	{r4, r5, lr}
 8008ae0:	4b17      	ldr	r3, [pc, #92]	@ (8008b40 <sniprintf+0x64>)
 8008ae2:	1e0c      	subs	r4, r1, #0
 8008ae4:	681d      	ldr	r5, [r3, #0]
 8008ae6:	b09d      	sub	sp, #116	@ 0x74
 8008ae8:	da08      	bge.n	8008afc <sniprintf+0x20>
 8008aea:	238b      	movs	r3, #139	@ 0x8b
 8008aec:	602b      	str	r3, [r5, #0]
 8008aee:	f04f 30ff 	mov.w	r0, #4294967295
 8008af2:	b01d      	add	sp, #116	@ 0x74
 8008af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008af8:	b002      	add	sp, #8
 8008afa:	4770      	bx	lr
 8008afc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008b00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b04:	bf14      	ite	ne
 8008b06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b0a:	4623      	moveq	r3, r4
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	9307      	str	r3, [sp, #28]
 8008b10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b14:	9002      	str	r0, [sp, #8]
 8008b16:	9006      	str	r0, [sp, #24]
 8008b18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008b1e:	ab21      	add	r3, sp, #132	@ 0x84
 8008b20:	a902      	add	r1, sp, #8
 8008b22:	4628      	mov	r0, r5
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	f000 f9df 	bl	8008ee8 <_svfiprintf_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	bfbc      	itt	lt
 8008b2e:	238b      	movlt	r3, #139	@ 0x8b
 8008b30:	602b      	strlt	r3, [r5, #0]
 8008b32:	2c00      	cmp	r4, #0
 8008b34:	d0dd      	beq.n	8008af2 <sniprintf+0x16>
 8008b36:	9b02      	ldr	r3, [sp, #8]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	701a      	strb	r2, [r3, #0]
 8008b3c:	e7d9      	b.n	8008af2 <sniprintf+0x16>
 8008b3e:	bf00      	nop
 8008b40:	2000027c 	.word	0x2000027c

08008b44 <memset>:
 8008b44:	4402      	add	r2, r0
 8008b46:	4603      	mov	r3, r0
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d100      	bne.n	8008b4e <memset+0xa>
 8008b4c:	4770      	bx	lr
 8008b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b52:	e7f9      	b.n	8008b48 <memset+0x4>

08008b54 <wcscmp>:
 8008b54:	1f03      	subs	r3, r0, #4
 8008b56:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8008b5a:	f851 2b04 	ldr.w	r2, [r1], #4
 8008b5e:	4290      	cmp	r0, r2
 8008b60:	d001      	beq.n	8008b66 <wcscmp+0x12>
 8008b62:	1a80      	subs	r0, r0, r2
 8008b64:	e001      	b.n	8008b6a <wcscmp+0x16>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d1f5      	bne.n	8008b56 <wcscmp+0x2>
 8008b6a:	4770      	bx	lr

08008b6c <wcslen>:
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	4613      	mov	r3, r2
 8008b70:	3204      	adds	r2, #4
 8008b72:	6819      	ldr	r1, [r3, #0]
 8008b74:	2900      	cmp	r1, #0
 8008b76:	d1fa      	bne.n	8008b6e <wcslen+0x2>
 8008b78:	1a18      	subs	r0, r3, r0
 8008b7a:	1080      	asrs	r0, r0, #2
 8008b7c:	4770      	bx	lr
	...

08008b80 <_setlocale_r>:
 8008b80:	b510      	push	{r4, lr}
 8008b82:	4614      	mov	r4, r2
 8008b84:	b122      	cbz	r2, 8008b90 <_setlocale_r+0x10>
 8008b86:	490a      	ldr	r1, [pc, #40]	@ (8008bb0 <_setlocale_r+0x30>)
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f7f7 fb29 	bl	80001e0 <strcmp>
 8008b8e:	b908      	cbnz	r0, 8008b94 <_setlocale_r+0x14>
 8008b90:	4808      	ldr	r0, [pc, #32]	@ (8008bb4 <_setlocale_r+0x34>)
 8008b92:	bd10      	pop	{r4, pc}
 8008b94:	4907      	ldr	r1, [pc, #28]	@ (8008bb4 <_setlocale_r+0x34>)
 8008b96:	4620      	mov	r0, r4
 8008b98:	f7f7 fb22 	bl	80001e0 <strcmp>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d0f7      	beq.n	8008b90 <_setlocale_r+0x10>
 8008ba0:	4905      	ldr	r1, [pc, #20]	@ (8008bb8 <_setlocale_r+0x38>)
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f7f7 fb1c 	bl	80001e0 <strcmp>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d0f1      	beq.n	8008b90 <_setlocale_r+0x10>
 8008bac:	2000      	movs	r0, #0
 8008bae:	e7f0      	b.n	8008b92 <_setlocale_r+0x12>
 8008bb0:	0800993e 	.word	0x0800993e
 8008bb4:	0800993c 	.word	0x0800993c
 8008bb8:	08009949 	.word	0x08009949

08008bbc <setlocale>:
 8008bbc:	4b02      	ldr	r3, [pc, #8]	@ (8008bc8 <setlocale+0xc>)
 8008bbe:	460a      	mov	r2, r1
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	6818      	ldr	r0, [r3, #0]
 8008bc4:	f7ff bfdc 	b.w	8008b80 <_setlocale_r>
 8008bc8:	2000027c 	.word	0x2000027c

08008bcc <__errno>:
 8008bcc:	4b01      	ldr	r3, [pc, #4]	@ (8008bd4 <__errno+0x8>)
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	2000027c 	.word	0x2000027c

08008bd8 <__libc_init_array>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	4d0d      	ldr	r5, [pc, #52]	@ (8008c10 <__libc_init_array+0x38>)
 8008bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8008c14 <__libc_init_array+0x3c>)
 8008bde:	1b64      	subs	r4, r4, r5
 8008be0:	10a4      	asrs	r4, r4, #2
 8008be2:	2600      	movs	r6, #0
 8008be4:	42a6      	cmp	r6, r4
 8008be6:	d109      	bne.n	8008bfc <__libc_init_array+0x24>
 8008be8:	4d0b      	ldr	r5, [pc, #44]	@ (8008c18 <__libc_init_array+0x40>)
 8008bea:	4c0c      	ldr	r4, [pc, #48]	@ (8008c1c <__libc_init_array+0x44>)
 8008bec:	f000 fc66 	bl	80094bc <_init>
 8008bf0:	1b64      	subs	r4, r4, r5
 8008bf2:	10a4      	asrs	r4, r4, #2
 8008bf4:	2600      	movs	r6, #0
 8008bf6:	42a6      	cmp	r6, r4
 8008bf8:	d105      	bne.n	8008c06 <__libc_init_array+0x2e>
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
 8008bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c00:	4798      	blx	r3
 8008c02:	3601      	adds	r6, #1
 8008c04:	e7ee      	b.n	8008be4 <__libc_init_array+0xc>
 8008c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c0a:	4798      	blx	r3
 8008c0c:	3601      	adds	r6, #1
 8008c0e:	e7f2      	b.n	8008bf6 <__libc_init_array+0x1e>
 8008c10:	08009980 	.word	0x08009980
 8008c14:	08009980 	.word	0x08009980
 8008c18:	08009980 	.word	0x08009980
 8008c1c:	08009984 	.word	0x08009984

08008c20 <__retarget_lock_acquire_recursive>:
 8008c20:	4770      	bx	lr

08008c22 <__retarget_lock_release_recursive>:
 8008c22:	4770      	bx	lr

08008c24 <memcpy>:
 8008c24:	440a      	add	r2, r1
 8008c26:	4291      	cmp	r1, r2
 8008c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2c:	d100      	bne.n	8008c30 <memcpy+0xc>
 8008c2e:	4770      	bx	lr
 8008c30:	b510      	push	{r4, lr}
 8008c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c3a:	4291      	cmp	r1, r2
 8008c3c:	d1f9      	bne.n	8008c32 <memcpy+0xe>
 8008c3e:	bd10      	pop	{r4, pc}

08008c40 <_free_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4605      	mov	r5, r0
 8008c44:	2900      	cmp	r1, #0
 8008c46:	d041      	beq.n	8008ccc <_free_r+0x8c>
 8008c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c4c:	1f0c      	subs	r4, r1, #4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bfb8      	it	lt
 8008c52:	18e4      	addlt	r4, r4, r3
 8008c54:	f000 f8e0 	bl	8008e18 <__malloc_lock>
 8008c58:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd0 <_free_r+0x90>)
 8008c5a:	6813      	ldr	r3, [r2, #0]
 8008c5c:	b933      	cbnz	r3, 8008c6c <_free_r+0x2c>
 8008c5e:	6063      	str	r3, [r4, #4]
 8008c60:	6014      	str	r4, [r2, #0]
 8008c62:	4628      	mov	r0, r5
 8008c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c68:	f000 b8dc 	b.w	8008e24 <__malloc_unlock>
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	d908      	bls.n	8008c82 <_free_r+0x42>
 8008c70:	6820      	ldr	r0, [r4, #0]
 8008c72:	1821      	adds	r1, r4, r0
 8008c74:	428b      	cmp	r3, r1
 8008c76:	bf01      	itttt	eq
 8008c78:	6819      	ldreq	r1, [r3, #0]
 8008c7a:	685b      	ldreq	r3, [r3, #4]
 8008c7c:	1809      	addeq	r1, r1, r0
 8008c7e:	6021      	streq	r1, [r4, #0]
 8008c80:	e7ed      	b.n	8008c5e <_free_r+0x1e>
 8008c82:	461a      	mov	r2, r3
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	b10b      	cbz	r3, 8008c8c <_free_r+0x4c>
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	d9fa      	bls.n	8008c82 <_free_r+0x42>
 8008c8c:	6811      	ldr	r1, [r2, #0]
 8008c8e:	1850      	adds	r0, r2, r1
 8008c90:	42a0      	cmp	r0, r4
 8008c92:	d10b      	bne.n	8008cac <_free_r+0x6c>
 8008c94:	6820      	ldr	r0, [r4, #0]
 8008c96:	4401      	add	r1, r0
 8008c98:	1850      	adds	r0, r2, r1
 8008c9a:	4283      	cmp	r3, r0
 8008c9c:	6011      	str	r1, [r2, #0]
 8008c9e:	d1e0      	bne.n	8008c62 <_free_r+0x22>
 8008ca0:	6818      	ldr	r0, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	6053      	str	r3, [r2, #4]
 8008ca6:	4408      	add	r0, r1
 8008ca8:	6010      	str	r0, [r2, #0]
 8008caa:	e7da      	b.n	8008c62 <_free_r+0x22>
 8008cac:	d902      	bls.n	8008cb4 <_free_r+0x74>
 8008cae:	230c      	movs	r3, #12
 8008cb0:	602b      	str	r3, [r5, #0]
 8008cb2:	e7d6      	b.n	8008c62 <_free_r+0x22>
 8008cb4:	6820      	ldr	r0, [r4, #0]
 8008cb6:	1821      	adds	r1, r4, r0
 8008cb8:	428b      	cmp	r3, r1
 8008cba:	bf04      	itt	eq
 8008cbc:	6819      	ldreq	r1, [r3, #0]
 8008cbe:	685b      	ldreq	r3, [r3, #4]
 8008cc0:	6063      	str	r3, [r4, #4]
 8008cc2:	bf04      	itt	eq
 8008cc4:	1809      	addeq	r1, r1, r0
 8008cc6:	6021      	streq	r1, [r4, #0]
 8008cc8:	6054      	str	r4, [r2, #4]
 8008cca:	e7ca      	b.n	8008c62 <_free_r+0x22>
 8008ccc:	bd38      	pop	{r3, r4, r5, pc}
 8008cce:	bf00      	nop
 8008cd0:	20001220 	.word	0x20001220

08008cd4 <sbrk_aligned>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8008d14 <sbrk_aligned+0x40>)
 8008cd8:	460c      	mov	r4, r1
 8008cda:	6831      	ldr	r1, [r6, #0]
 8008cdc:	4605      	mov	r5, r0
 8008cde:	b911      	cbnz	r1, 8008ce6 <sbrk_aligned+0x12>
 8008ce0:	f000 fba6 	bl	8009430 <_sbrk_r>
 8008ce4:	6030      	str	r0, [r6, #0]
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f000 fba1 	bl	8009430 <_sbrk_r>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d103      	bne.n	8008cfa <sbrk_aligned+0x26>
 8008cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	bd70      	pop	{r4, r5, r6, pc}
 8008cfa:	1cc4      	adds	r4, r0, #3
 8008cfc:	f024 0403 	bic.w	r4, r4, #3
 8008d00:	42a0      	cmp	r0, r4
 8008d02:	d0f8      	beq.n	8008cf6 <sbrk_aligned+0x22>
 8008d04:	1a21      	subs	r1, r4, r0
 8008d06:	4628      	mov	r0, r5
 8008d08:	f000 fb92 	bl	8009430 <_sbrk_r>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d1f2      	bne.n	8008cf6 <sbrk_aligned+0x22>
 8008d10:	e7ef      	b.n	8008cf2 <sbrk_aligned+0x1e>
 8008d12:	bf00      	nop
 8008d14:	2000121c 	.word	0x2000121c

08008d18 <_malloc_r>:
 8008d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d1c:	1ccd      	adds	r5, r1, #3
 8008d1e:	f025 0503 	bic.w	r5, r5, #3
 8008d22:	3508      	adds	r5, #8
 8008d24:	2d0c      	cmp	r5, #12
 8008d26:	bf38      	it	cc
 8008d28:	250c      	movcc	r5, #12
 8008d2a:	2d00      	cmp	r5, #0
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	db01      	blt.n	8008d34 <_malloc_r+0x1c>
 8008d30:	42a9      	cmp	r1, r5
 8008d32:	d904      	bls.n	8008d3e <_malloc_r+0x26>
 8008d34:	230c      	movs	r3, #12
 8008d36:	6033      	str	r3, [r6, #0]
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e14 <_malloc_r+0xfc>
 8008d42:	f000 f869 	bl	8008e18 <__malloc_lock>
 8008d46:	f8d8 3000 	ldr.w	r3, [r8]
 8008d4a:	461c      	mov	r4, r3
 8008d4c:	bb44      	cbnz	r4, 8008da0 <_malloc_r+0x88>
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4630      	mov	r0, r6
 8008d52:	f7ff ffbf 	bl	8008cd4 <sbrk_aligned>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	4604      	mov	r4, r0
 8008d5a:	d158      	bne.n	8008e0e <_malloc_r+0xf6>
 8008d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8008d60:	4627      	mov	r7, r4
 8008d62:	2f00      	cmp	r7, #0
 8008d64:	d143      	bne.n	8008dee <_malloc_r+0xd6>
 8008d66:	2c00      	cmp	r4, #0
 8008d68:	d04b      	beq.n	8008e02 <_malloc_r+0xea>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	4630      	mov	r0, r6
 8008d70:	eb04 0903 	add.w	r9, r4, r3
 8008d74:	f000 fb5c 	bl	8009430 <_sbrk_r>
 8008d78:	4581      	cmp	r9, r0
 8008d7a:	d142      	bne.n	8008e02 <_malloc_r+0xea>
 8008d7c:	6821      	ldr	r1, [r4, #0]
 8008d7e:	1a6d      	subs	r5, r5, r1
 8008d80:	4629      	mov	r1, r5
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7ff ffa6 	bl	8008cd4 <sbrk_aligned>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d03a      	beq.n	8008e02 <_malloc_r+0xea>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	442b      	add	r3, r5
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	f8d8 3000 	ldr.w	r3, [r8]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	bb62      	cbnz	r2, 8008df4 <_malloc_r+0xdc>
 8008d9a:	f8c8 7000 	str.w	r7, [r8]
 8008d9e:	e00f      	b.n	8008dc0 <_malloc_r+0xa8>
 8008da0:	6822      	ldr	r2, [r4, #0]
 8008da2:	1b52      	subs	r2, r2, r5
 8008da4:	d420      	bmi.n	8008de8 <_malloc_r+0xd0>
 8008da6:	2a0b      	cmp	r2, #11
 8008da8:	d917      	bls.n	8008dda <_malloc_r+0xc2>
 8008daa:	1961      	adds	r1, r4, r5
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	6025      	str	r5, [r4, #0]
 8008db0:	bf18      	it	ne
 8008db2:	6059      	strne	r1, [r3, #4]
 8008db4:	6863      	ldr	r3, [r4, #4]
 8008db6:	bf08      	it	eq
 8008db8:	f8c8 1000 	streq.w	r1, [r8]
 8008dbc:	5162      	str	r2, [r4, r5]
 8008dbe:	604b      	str	r3, [r1, #4]
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f000 f82f 	bl	8008e24 <__malloc_unlock>
 8008dc6:	f104 000b 	add.w	r0, r4, #11
 8008dca:	1d23      	adds	r3, r4, #4
 8008dcc:	f020 0007 	bic.w	r0, r0, #7
 8008dd0:	1ac2      	subs	r2, r0, r3
 8008dd2:	bf1c      	itt	ne
 8008dd4:	1a1b      	subne	r3, r3, r0
 8008dd6:	50a3      	strne	r3, [r4, r2]
 8008dd8:	e7af      	b.n	8008d3a <_malloc_r+0x22>
 8008dda:	6862      	ldr	r2, [r4, #4]
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	bf0c      	ite	eq
 8008de0:	f8c8 2000 	streq.w	r2, [r8]
 8008de4:	605a      	strne	r2, [r3, #4]
 8008de6:	e7eb      	b.n	8008dc0 <_malloc_r+0xa8>
 8008de8:	4623      	mov	r3, r4
 8008dea:	6864      	ldr	r4, [r4, #4]
 8008dec:	e7ae      	b.n	8008d4c <_malloc_r+0x34>
 8008dee:	463c      	mov	r4, r7
 8008df0:	687f      	ldr	r7, [r7, #4]
 8008df2:	e7b6      	b.n	8008d62 <_malloc_r+0x4a>
 8008df4:	461a      	mov	r2, r3
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	d1fb      	bne.n	8008df4 <_malloc_r+0xdc>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6053      	str	r3, [r2, #4]
 8008e00:	e7de      	b.n	8008dc0 <_malloc_r+0xa8>
 8008e02:	230c      	movs	r3, #12
 8008e04:	6033      	str	r3, [r6, #0]
 8008e06:	4630      	mov	r0, r6
 8008e08:	f000 f80c 	bl	8008e24 <__malloc_unlock>
 8008e0c:	e794      	b.n	8008d38 <_malloc_r+0x20>
 8008e0e:	6005      	str	r5, [r0, #0]
 8008e10:	e7d6      	b.n	8008dc0 <_malloc_r+0xa8>
 8008e12:	bf00      	nop
 8008e14:	20001220 	.word	0x20001220

08008e18 <__malloc_lock>:
 8008e18:	4801      	ldr	r0, [pc, #4]	@ (8008e20 <__malloc_lock+0x8>)
 8008e1a:	f7ff bf01 	b.w	8008c20 <__retarget_lock_acquire_recursive>
 8008e1e:	bf00      	nop
 8008e20:	20001218 	.word	0x20001218

08008e24 <__malloc_unlock>:
 8008e24:	4801      	ldr	r0, [pc, #4]	@ (8008e2c <__malloc_unlock+0x8>)
 8008e26:	f7ff befc 	b.w	8008c22 <__retarget_lock_release_recursive>
 8008e2a:	bf00      	nop
 8008e2c:	20001218 	.word	0x20001218

08008e30 <__ssputs_r>:
 8008e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e34:	688e      	ldr	r6, [r1, #8]
 8008e36:	461f      	mov	r7, r3
 8008e38:	42be      	cmp	r6, r7
 8008e3a:	680b      	ldr	r3, [r1, #0]
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	4690      	mov	r8, r2
 8008e42:	d82d      	bhi.n	8008ea0 <__ssputs_r+0x70>
 8008e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e4c:	d026      	beq.n	8008e9c <__ssputs_r+0x6c>
 8008e4e:	6965      	ldr	r5, [r4, #20]
 8008e50:	6909      	ldr	r1, [r1, #16]
 8008e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e56:	eba3 0901 	sub.w	r9, r3, r1
 8008e5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e5e:	1c7b      	adds	r3, r7, #1
 8008e60:	444b      	add	r3, r9
 8008e62:	106d      	asrs	r5, r5, #1
 8008e64:	429d      	cmp	r5, r3
 8008e66:	bf38      	it	cc
 8008e68:	461d      	movcc	r5, r3
 8008e6a:	0553      	lsls	r3, r2, #21
 8008e6c:	d527      	bpl.n	8008ebe <__ssputs_r+0x8e>
 8008e6e:	4629      	mov	r1, r5
 8008e70:	f7ff ff52 	bl	8008d18 <_malloc_r>
 8008e74:	4606      	mov	r6, r0
 8008e76:	b360      	cbz	r0, 8008ed2 <__ssputs_r+0xa2>
 8008e78:	6921      	ldr	r1, [r4, #16]
 8008e7a:	464a      	mov	r2, r9
 8008e7c:	f7ff fed2 	bl	8008c24 <memcpy>
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	6126      	str	r6, [r4, #16]
 8008e8e:	6165      	str	r5, [r4, #20]
 8008e90:	444e      	add	r6, r9
 8008e92:	eba5 0509 	sub.w	r5, r5, r9
 8008e96:	6026      	str	r6, [r4, #0]
 8008e98:	60a5      	str	r5, [r4, #8]
 8008e9a:	463e      	mov	r6, r7
 8008e9c:	42be      	cmp	r6, r7
 8008e9e:	d900      	bls.n	8008ea2 <__ssputs_r+0x72>
 8008ea0:	463e      	mov	r6, r7
 8008ea2:	6820      	ldr	r0, [r4, #0]
 8008ea4:	4632      	mov	r2, r6
 8008ea6:	4641      	mov	r1, r8
 8008ea8:	f000 faa8 	bl	80093fc <memmove>
 8008eac:	68a3      	ldr	r3, [r4, #8]
 8008eae:	1b9b      	subs	r3, r3, r6
 8008eb0:	60a3      	str	r3, [r4, #8]
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	4433      	add	r3, r6
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ebe:	462a      	mov	r2, r5
 8008ec0:	f000 fac6 	bl	8009450 <_realloc_r>
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d1e0      	bne.n	8008e8c <__ssputs_r+0x5c>
 8008eca:	6921      	ldr	r1, [r4, #16]
 8008ecc:	4650      	mov	r0, sl
 8008ece:	f7ff feb7 	bl	8008c40 <_free_r>
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	f8ca 3000 	str.w	r3, [sl]
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ede:	81a3      	strh	r3, [r4, #12]
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	e7e9      	b.n	8008eba <__ssputs_r+0x8a>
	...

08008ee8 <_svfiprintf_r>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	4698      	mov	r8, r3
 8008eee:	898b      	ldrh	r3, [r1, #12]
 8008ef0:	061b      	lsls	r3, r3, #24
 8008ef2:	b09d      	sub	sp, #116	@ 0x74
 8008ef4:	4607      	mov	r7, r0
 8008ef6:	460d      	mov	r5, r1
 8008ef8:	4614      	mov	r4, r2
 8008efa:	d510      	bpl.n	8008f1e <_svfiprintf_r+0x36>
 8008efc:	690b      	ldr	r3, [r1, #16]
 8008efe:	b973      	cbnz	r3, 8008f1e <_svfiprintf_r+0x36>
 8008f00:	2140      	movs	r1, #64	@ 0x40
 8008f02:	f7ff ff09 	bl	8008d18 <_malloc_r>
 8008f06:	6028      	str	r0, [r5, #0]
 8008f08:	6128      	str	r0, [r5, #16]
 8008f0a:	b930      	cbnz	r0, 8008f1a <_svfiprintf_r+0x32>
 8008f0c:	230c      	movs	r3, #12
 8008f0e:	603b      	str	r3, [r7, #0]
 8008f10:	f04f 30ff 	mov.w	r0, #4294967295
 8008f14:	b01d      	add	sp, #116	@ 0x74
 8008f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1a:	2340      	movs	r3, #64	@ 0x40
 8008f1c:	616b      	str	r3, [r5, #20]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f22:	2320      	movs	r3, #32
 8008f24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f2c:	2330      	movs	r3, #48	@ 0x30
 8008f2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80090cc <_svfiprintf_r+0x1e4>
 8008f32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f36:	f04f 0901 	mov.w	r9, #1
 8008f3a:	4623      	mov	r3, r4
 8008f3c:	469a      	mov	sl, r3
 8008f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f42:	b10a      	cbz	r2, 8008f48 <_svfiprintf_r+0x60>
 8008f44:	2a25      	cmp	r2, #37	@ 0x25
 8008f46:	d1f9      	bne.n	8008f3c <_svfiprintf_r+0x54>
 8008f48:	ebba 0b04 	subs.w	fp, sl, r4
 8008f4c:	d00b      	beq.n	8008f66 <_svfiprintf_r+0x7e>
 8008f4e:	465b      	mov	r3, fp
 8008f50:	4622      	mov	r2, r4
 8008f52:	4629      	mov	r1, r5
 8008f54:	4638      	mov	r0, r7
 8008f56:	f7ff ff6b 	bl	8008e30 <__ssputs_r>
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	f000 80a7 	beq.w	80090ae <_svfiprintf_r+0x1c6>
 8008f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f62:	445a      	add	r2, fp
 8008f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f66:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 809f 	beq.w	80090ae <_svfiprintf_r+0x1c6>
 8008f70:	2300      	movs	r3, #0
 8008f72:	f04f 32ff 	mov.w	r2, #4294967295
 8008f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f7a:	f10a 0a01 	add.w	sl, sl, #1
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	9307      	str	r3, [sp, #28]
 8008f82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f86:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f88:	4654      	mov	r4, sl
 8008f8a:	2205      	movs	r2, #5
 8008f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f90:	484e      	ldr	r0, [pc, #312]	@ (80090cc <_svfiprintf_r+0x1e4>)
 8008f92:	f7f7 f935 	bl	8000200 <memchr>
 8008f96:	9a04      	ldr	r2, [sp, #16]
 8008f98:	b9d8      	cbnz	r0, 8008fd2 <_svfiprintf_r+0xea>
 8008f9a:	06d0      	lsls	r0, r2, #27
 8008f9c:	bf44      	itt	mi
 8008f9e:	2320      	movmi	r3, #32
 8008fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fa4:	0711      	lsls	r1, r2, #28
 8008fa6:	bf44      	itt	mi
 8008fa8:	232b      	movmi	r3, #43	@ 0x2b
 8008faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fae:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fb4:	d015      	beq.n	8008fe2 <_svfiprintf_r+0xfa>
 8008fb6:	9a07      	ldr	r2, [sp, #28]
 8008fb8:	4654      	mov	r4, sl
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f04f 0c0a 	mov.w	ip, #10
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc6:	3b30      	subs	r3, #48	@ 0x30
 8008fc8:	2b09      	cmp	r3, #9
 8008fca:	d94b      	bls.n	8009064 <_svfiprintf_r+0x17c>
 8008fcc:	b1b0      	cbz	r0, 8008ffc <_svfiprintf_r+0x114>
 8008fce:	9207      	str	r2, [sp, #28]
 8008fd0:	e014      	b.n	8008ffc <_svfiprintf_r+0x114>
 8008fd2:	eba0 0308 	sub.w	r3, r0, r8
 8008fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	46a2      	mov	sl, r4
 8008fe0:	e7d2      	b.n	8008f88 <_svfiprintf_r+0xa0>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	1d19      	adds	r1, r3, #4
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	9103      	str	r1, [sp, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bfbb      	ittet	lt
 8008fee:	425b      	neglt	r3, r3
 8008ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff4:	9307      	strge	r3, [sp, #28]
 8008ff6:	9307      	strlt	r3, [sp, #28]
 8008ff8:	bfb8      	it	lt
 8008ffa:	9204      	strlt	r2, [sp, #16]
 8008ffc:	7823      	ldrb	r3, [r4, #0]
 8008ffe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009000:	d10a      	bne.n	8009018 <_svfiprintf_r+0x130>
 8009002:	7863      	ldrb	r3, [r4, #1]
 8009004:	2b2a      	cmp	r3, #42	@ 0x2a
 8009006:	d132      	bne.n	800906e <_svfiprintf_r+0x186>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	9203      	str	r2, [sp, #12]
 8009010:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009014:	3402      	adds	r4, #2
 8009016:	9305      	str	r3, [sp, #20]
 8009018:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80090dc <_svfiprintf_r+0x1f4>
 800901c:	7821      	ldrb	r1, [r4, #0]
 800901e:	2203      	movs	r2, #3
 8009020:	4650      	mov	r0, sl
 8009022:	f7f7 f8ed 	bl	8000200 <memchr>
 8009026:	b138      	cbz	r0, 8009038 <_svfiprintf_r+0x150>
 8009028:	9b04      	ldr	r3, [sp, #16]
 800902a:	eba0 000a 	sub.w	r0, r0, sl
 800902e:	2240      	movs	r2, #64	@ 0x40
 8009030:	4082      	lsls	r2, r0
 8009032:	4313      	orrs	r3, r2
 8009034:	3401      	adds	r4, #1
 8009036:	9304      	str	r3, [sp, #16]
 8009038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800903c:	4824      	ldr	r0, [pc, #144]	@ (80090d0 <_svfiprintf_r+0x1e8>)
 800903e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009042:	2206      	movs	r2, #6
 8009044:	f7f7 f8dc 	bl	8000200 <memchr>
 8009048:	2800      	cmp	r0, #0
 800904a:	d036      	beq.n	80090ba <_svfiprintf_r+0x1d2>
 800904c:	4b21      	ldr	r3, [pc, #132]	@ (80090d4 <_svfiprintf_r+0x1ec>)
 800904e:	bb1b      	cbnz	r3, 8009098 <_svfiprintf_r+0x1b0>
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	3307      	adds	r3, #7
 8009054:	f023 0307 	bic.w	r3, r3, #7
 8009058:	3308      	adds	r3, #8
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905e:	4433      	add	r3, r6
 8009060:	9309      	str	r3, [sp, #36]	@ 0x24
 8009062:	e76a      	b.n	8008f3a <_svfiprintf_r+0x52>
 8009064:	fb0c 3202 	mla	r2, ip, r2, r3
 8009068:	460c      	mov	r4, r1
 800906a:	2001      	movs	r0, #1
 800906c:	e7a8      	b.n	8008fc0 <_svfiprintf_r+0xd8>
 800906e:	2300      	movs	r3, #0
 8009070:	3401      	adds	r4, #1
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	4619      	mov	r1, r3
 8009076:	f04f 0c0a 	mov.w	ip, #10
 800907a:	4620      	mov	r0, r4
 800907c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009080:	3a30      	subs	r2, #48	@ 0x30
 8009082:	2a09      	cmp	r2, #9
 8009084:	d903      	bls.n	800908e <_svfiprintf_r+0x1a6>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0c6      	beq.n	8009018 <_svfiprintf_r+0x130>
 800908a:	9105      	str	r1, [sp, #20]
 800908c:	e7c4      	b.n	8009018 <_svfiprintf_r+0x130>
 800908e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009092:	4604      	mov	r4, r0
 8009094:	2301      	movs	r3, #1
 8009096:	e7f0      	b.n	800907a <_svfiprintf_r+0x192>
 8009098:	ab03      	add	r3, sp, #12
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	462a      	mov	r2, r5
 800909e:	4b0e      	ldr	r3, [pc, #56]	@ (80090d8 <_svfiprintf_r+0x1f0>)
 80090a0:	a904      	add	r1, sp, #16
 80090a2:	4638      	mov	r0, r7
 80090a4:	f3af 8000 	nop.w
 80090a8:	1c42      	adds	r2, r0, #1
 80090aa:	4606      	mov	r6, r0
 80090ac:	d1d6      	bne.n	800905c <_svfiprintf_r+0x174>
 80090ae:	89ab      	ldrh	r3, [r5, #12]
 80090b0:	065b      	lsls	r3, r3, #25
 80090b2:	f53f af2d 	bmi.w	8008f10 <_svfiprintf_r+0x28>
 80090b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090b8:	e72c      	b.n	8008f14 <_svfiprintf_r+0x2c>
 80090ba:	ab03      	add	r3, sp, #12
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	462a      	mov	r2, r5
 80090c0:	4b05      	ldr	r3, [pc, #20]	@ (80090d8 <_svfiprintf_r+0x1f0>)
 80090c2:	a904      	add	r1, sp, #16
 80090c4:	4638      	mov	r0, r7
 80090c6:	f000 f879 	bl	80091bc <_printf_i>
 80090ca:	e7ed      	b.n	80090a8 <_svfiprintf_r+0x1c0>
 80090cc:	08009944 	.word	0x08009944
 80090d0:	0800994e 	.word	0x0800994e
 80090d4:	00000000 	.word	0x00000000
 80090d8:	08008e31 	.word	0x08008e31
 80090dc:	0800994a 	.word	0x0800994a

080090e0 <_printf_common>:
 80090e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e4:	4616      	mov	r6, r2
 80090e6:	4698      	mov	r8, r3
 80090e8:	688a      	ldr	r2, [r1, #8]
 80090ea:	690b      	ldr	r3, [r1, #16]
 80090ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090f0:	4293      	cmp	r3, r2
 80090f2:	bfb8      	it	lt
 80090f4:	4613      	movlt	r3, r2
 80090f6:	6033      	str	r3, [r6, #0]
 80090f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090fc:	4607      	mov	r7, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	b10a      	cbz	r2, 8009106 <_printf_common+0x26>
 8009102:	3301      	adds	r3, #1
 8009104:	6033      	str	r3, [r6, #0]
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	0699      	lsls	r1, r3, #26
 800910a:	bf42      	ittt	mi
 800910c:	6833      	ldrmi	r3, [r6, #0]
 800910e:	3302      	addmi	r3, #2
 8009110:	6033      	strmi	r3, [r6, #0]
 8009112:	6825      	ldr	r5, [r4, #0]
 8009114:	f015 0506 	ands.w	r5, r5, #6
 8009118:	d106      	bne.n	8009128 <_printf_common+0x48>
 800911a:	f104 0a19 	add.w	sl, r4, #25
 800911e:	68e3      	ldr	r3, [r4, #12]
 8009120:	6832      	ldr	r2, [r6, #0]
 8009122:	1a9b      	subs	r3, r3, r2
 8009124:	42ab      	cmp	r3, r5
 8009126:	dc26      	bgt.n	8009176 <_printf_common+0x96>
 8009128:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800912c:	6822      	ldr	r2, [r4, #0]
 800912e:	3b00      	subs	r3, #0
 8009130:	bf18      	it	ne
 8009132:	2301      	movne	r3, #1
 8009134:	0692      	lsls	r2, r2, #26
 8009136:	d42b      	bmi.n	8009190 <_printf_common+0xb0>
 8009138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800913c:	4641      	mov	r1, r8
 800913e:	4638      	mov	r0, r7
 8009140:	47c8      	blx	r9
 8009142:	3001      	adds	r0, #1
 8009144:	d01e      	beq.n	8009184 <_printf_common+0xa4>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	6922      	ldr	r2, [r4, #16]
 800914a:	f003 0306 	and.w	r3, r3, #6
 800914e:	2b04      	cmp	r3, #4
 8009150:	bf02      	ittt	eq
 8009152:	68e5      	ldreq	r5, [r4, #12]
 8009154:	6833      	ldreq	r3, [r6, #0]
 8009156:	1aed      	subeq	r5, r5, r3
 8009158:	68a3      	ldr	r3, [r4, #8]
 800915a:	bf0c      	ite	eq
 800915c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009160:	2500      	movne	r5, #0
 8009162:	4293      	cmp	r3, r2
 8009164:	bfc4      	itt	gt
 8009166:	1a9b      	subgt	r3, r3, r2
 8009168:	18ed      	addgt	r5, r5, r3
 800916a:	2600      	movs	r6, #0
 800916c:	341a      	adds	r4, #26
 800916e:	42b5      	cmp	r5, r6
 8009170:	d11a      	bne.n	80091a8 <_printf_common+0xc8>
 8009172:	2000      	movs	r0, #0
 8009174:	e008      	b.n	8009188 <_printf_common+0xa8>
 8009176:	2301      	movs	r3, #1
 8009178:	4652      	mov	r2, sl
 800917a:	4641      	mov	r1, r8
 800917c:	4638      	mov	r0, r7
 800917e:	47c8      	blx	r9
 8009180:	3001      	adds	r0, #1
 8009182:	d103      	bne.n	800918c <_printf_common+0xac>
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918c:	3501      	adds	r5, #1
 800918e:	e7c6      	b.n	800911e <_printf_common+0x3e>
 8009190:	18e1      	adds	r1, r4, r3
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	2030      	movs	r0, #48	@ 0x30
 8009196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800919a:	4422      	add	r2, r4
 800919c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091a4:	3302      	adds	r3, #2
 80091a6:	e7c7      	b.n	8009138 <_printf_common+0x58>
 80091a8:	2301      	movs	r3, #1
 80091aa:	4622      	mov	r2, r4
 80091ac:	4641      	mov	r1, r8
 80091ae:	4638      	mov	r0, r7
 80091b0:	47c8      	blx	r9
 80091b2:	3001      	adds	r0, #1
 80091b4:	d0e6      	beq.n	8009184 <_printf_common+0xa4>
 80091b6:	3601      	adds	r6, #1
 80091b8:	e7d9      	b.n	800916e <_printf_common+0x8e>
	...

080091bc <_printf_i>:
 80091bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091c0:	7e0f      	ldrb	r7, [r1, #24]
 80091c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091c4:	2f78      	cmp	r7, #120	@ 0x78
 80091c6:	4691      	mov	r9, r2
 80091c8:	4680      	mov	r8, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	469a      	mov	sl, r3
 80091ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091d2:	d807      	bhi.n	80091e4 <_printf_i+0x28>
 80091d4:	2f62      	cmp	r7, #98	@ 0x62
 80091d6:	d80a      	bhi.n	80091ee <_printf_i+0x32>
 80091d8:	2f00      	cmp	r7, #0
 80091da:	f000 80d2 	beq.w	8009382 <_printf_i+0x1c6>
 80091de:	2f58      	cmp	r7, #88	@ 0x58
 80091e0:	f000 80b9 	beq.w	8009356 <_printf_i+0x19a>
 80091e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091ec:	e03a      	b.n	8009264 <_printf_i+0xa8>
 80091ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091f2:	2b15      	cmp	r3, #21
 80091f4:	d8f6      	bhi.n	80091e4 <_printf_i+0x28>
 80091f6:	a101      	add	r1, pc, #4	@ (adr r1, 80091fc <_printf_i+0x40>)
 80091f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091fc:	08009255 	.word	0x08009255
 8009200:	08009269 	.word	0x08009269
 8009204:	080091e5 	.word	0x080091e5
 8009208:	080091e5 	.word	0x080091e5
 800920c:	080091e5 	.word	0x080091e5
 8009210:	080091e5 	.word	0x080091e5
 8009214:	08009269 	.word	0x08009269
 8009218:	080091e5 	.word	0x080091e5
 800921c:	080091e5 	.word	0x080091e5
 8009220:	080091e5 	.word	0x080091e5
 8009224:	080091e5 	.word	0x080091e5
 8009228:	08009369 	.word	0x08009369
 800922c:	08009293 	.word	0x08009293
 8009230:	08009323 	.word	0x08009323
 8009234:	080091e5 	.word	0x080091e5
 8009238:	080091e5 	.word	0x080091e5
 800923c:	0800938b 	.word	0x0800938b
 8009240:	080091e5 	.word	0x080091e5
 8009244:	08009293 	.word	0x08009293
 8009248:	080091e5 	.word	0x080091e5
 800924c:	080091e5 	.word	0x080091e5
 8009250:	0800932b 	.word	0x0800932b
 8009254:	6833      	ldr	r3, [r6, #0]
 8009256:	1d1a      	adds	r2, r3, #4
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6032      	str	r2, [r6, #0]
 800925c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009264:	2301      	movs	r3, #1
 8009266:	e09d      	b.n	80093a4 <_printf_i+0x1e8>
 8009268:	6833      	ldr	r3, [r6, #0]
 800926a:	6820      	ldr	r0, [r4, #0]
 800926c:	1d19      	adds	r1, r3, #4
 800926e:	6031      	str	r1, [r6, #0]
 8009270:	0606      	lsls	r6, r0, #24
 8009272:	d501      	bpl.n	8009278 <_printf_i+0xbc>
 8009274:	681d      	ldr	r5, [r3, #0]
 8009276:	e003      	b.n	8009280 <_printf_i+0xc4>
 8009278:	0645      	lsls	r5, r0, #25
 800927a:	d5fb      	bpl.n	8009274 <_printf_i+0xb8>
 800927c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009280:	2d00      	cmp	r5, #0
 8009282:	da03      	bge.n	800928c <_printf_i+0xd0>
 8009284:	232d      	movs	r3, #45	@ 0x2d
 8009286:	426d      	negs	r5, r5
 8009288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800928c:	4859      	ldr	r0, [pc, #356]	@ (80093f4 <_printf_i+0x238>)
 800928e:	230a      	movs	r3, #10
 8009290:	e011      	b.n	80092b6 <_printf_i+0xfa>
 8009292:	6821      	ldr	r1, [r4, #0]
 8009294:	6833      	ldr	r3, [r6, #0]
 8009296:	0608      	lsls	r0, r1, #24
 8009298:	f853 5b04 	ldr.w	r5, [r3], #4
 800929c:	d402      	bmi.n	80092a4 <_printf_i+0xe8>
 800929e:	0649      	lsls	r1, r1, #25
 80092a0:	bf48      	it	mi
 80092a2:	b2ad      	uxthmi	r5, r5
 80092a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80092a6:	4853      	ldr	r0, [pc, #332]	@ (80093f4 <_printf_i+0x238>)
 80092a8:	6033      	str	r3, [r6, #0]
 80092aa:	bf14      	ite	ne
 80092ac:	230a      	movne	r3, #10
 80092ae:	2308      	moveq	r3, #8
 80092b0:	2100      	movs	r1, #0
 80092b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092b6:	6866      	ldr	r6, [r4, #4]
 80092b8:	60a6      	str	r6, [r4, #8]
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	bfa2      	ittt	ge
 80092be:	6821      	ldrge	r1, [r4, #0]
 80092c0:	f021 0104 	bicge.w	r1, r1, #4
 80092c4:	6021      	strge	r1, [r4, #0]
 80092c6:	b90d      	cbnz	r5, 80092cc <_printf_i+0x110>
 80092c8:	2e00      	cmp	r6, #0
 80092ca:	d04b      	beq.n	8009364 <_printf_i+0x1a8>
 80092cc:	4616      	mov	r6, r2
 80092ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80092d2:	fb03 5711 	mls	r7, r3, r1, r5
 80092d6:	5dc7      	ldrb	r7, [r0, r7]
 80092d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092dc:	462f      	mov	r7, r5
 80092de:	42bb      	cmp	r3, r7
 80092e0:	460d      	mov	r5, r1
 80092e2:	d9f4      	bls.n	80092ce <_printf_i+0x112>
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d10b      	bne.n	8009300 <_printf_i+0x144>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	07df      	lsls	r7, r3, #31
 80092ec:	d508      	bpl.n	8009300 <_printf_i+0x144>
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	6861      	ldr	r1, [r4, #4]
 80092f2:	4299      	cmp	r1, r3
 80092f4:	bfde      	ittt	le
 80092f6:	2330      	movle	r3, #48	@ 0x30
 80092f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009300:	1b92      	subs	r2, r2, r6
 8009302:	6122      	str	r2, [r4, #16]
 8009304:	f8cd a000 	str.w	sl, [sp]
 8009308:	464b      	mov	r3, r9
 800930a:	aa03      	add	r2, sp, #12
 800930c:	4621      	mov	r1, r4
 800930e:	4640      	mov	r0, r8
 8009310:	f7ff fee6 	bl	80090e0 <_printf_common>
 8009314:	3001      	adds	r0, #1
 8009316:	d14a      	bne.n	80093ae <_printf_i+0x1f2>
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	b004      	add	sp, #16
 800931e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	f043 0320 	orr.w	r3, r3, #32
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	4833      	ldr	r0, [pc, #204]	@ (80093f8 <_printf_i+0x23c>)
 800932c:	2778      	movs	r7, #120	@ 0x78
 800932e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	6831      	ldr	r1, [r6, #0]
 8009336:	061f      	lsls	r7, r3, #24
 8009338:	f851 5b04 	ldr.w	r5, [r1], #4
 800933c:	d402      	bmi.n	8009344 <_printf_i+0x188>
 800933e:	065f      	lsls	r7, r3, #25
 8009340:	bf48      	it	mi
 8009342:	b2ad      	uxthmi	r5, r5
 8009344:	6031      	str	r1, [r6, #0]
 8009346:	07d9      	lsls	r1, r3, #31
 8009348:	bf44      	itt	mi
 800934a:	f043 0320 	orrmi.w	r3, r3, #32
 800934e:	6023      	strmi	r3, [r4, #0]
 8009350:	b11d      	cbz	r5, 800935a <_printf_i+0x19e>
 8009352:	2310      	movs	r3, #16
 8009354:	e7ac      	b.n	80092b0 <_printf_i+0xf4>
 8009356:	4827      	ldr	r0, [pc, #156]	@ (80093f4 <_printf_i+0x238>)
 8009358:	e7e9      	b.n	800932e <_printf_i+0x172>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	f023 0320 	bic.w	r3, r3, #32
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	e7f6      	b.n	8009352 <_printf_i+0x196>
 8009364:	4616      	mov	r6, r2
 8009366:	e7bd      	b.n	80092e4 <_printf_i+0x128>
 8009368:	6833      	ldr	r3, [r6, #0]
 800936a:	6825      	ldr	r5, [r4, #0]
 800936c:	6961      	ldr	r1, [r4, #20]
 800936e:	1d18      	adds	r0, r3, #4
 8009370:	6030      	str	r0, [r6, #0]
 8009372:	062e      	lsls	r6, r5, #24
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	d501      	bpl.n	800937c <_printf_i+0x1c0>
 8009378:	6019      	str	r1, [r3, #0]
 800937a:	e002      	b.n	8009382 <_printf_i+0x1c6>
 800937c:	0668      	lsls	r0, r5, #25
 800937e:	d5fb      	bpl.n	8009378 <_printf_i+0x1bc>
 8009380:	8019      	strh	r1, [r3, #0]
 8009382:	2300      	movs	r3, #0
 8009384:	6123      	str	r3, [r4, #16]
 8009386:	4616      	mov	r6, r2
 8009388:	e7bc      	b.n	8009304 <_printf_i+0x148>
 800938a:	6833      	ldr	r3, [r6, #0]
 800938c:	1d1a      	adds	r2, r3, #4
 800938e:	6032      	str	r2, [r6, #0]
 8009390:	681e      	ldr	r6, [r3, #0]
 8009392:	6862      	ldr	r2, [r4, #4]
 8009394:	2100      	movs	r1, #0
 8009396:	4630      	mov	r0, r6
 8009398:	f7f6 ff32 	bl	8000200 <memchr>
 800939c:	b108      	cbz	r0, 80093a2 <_printf_i+0x1e6>
 800939e:	1b80      	subs	r0, r0, r6
 80093a0:	6060      	str	r0, [r4, #4]
 80093a2:	6863      	ldr	r3, [r4, #4]
 80093a4:	6123      	str	r3, [r4, #16]
 80093a6:	2300      	movs	r3, #0
 80093a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093ac:	e7aa      	b.n	8009304 <_printf_i+0x148>
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	4632      	mov	r2, r6
 80093b2:	4649      	mov	r1, r9
 80093b4:	4640      	mov	r0, r8
 80093b6:	47d0      	blx	sl
 80093b8:	3001      	adds	r0, #1
 80093ba:	d0ad      	beq.n	8009318 <_printf_i+0x15c>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	079b      	lsls	r3, r3, #30
 80093c0:	d413      	bmi.n	80093ea <_printf_i+0x22e>
 80093c2:	68e0      	ldr	r0, [r4, #12]
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	4298      	cmp	r0, r3
 80093c8:	bfb8      	it	lt
 80093ca:	4618      	movlt	r0, r3
 80093cc:	e7a6      	b.n	800931c <_printf_i+0x160>
 80093ce:	2301      	movs	r3, #1
 80093d0:	4632      	mov	r2, r6
 80093d2:	4649      	mov	r1, r9
 80093d4:	4640      	mov	r0, r8
 80093d6:	47d0      	blx	sl
 80093d8:	3001      	adds	r0, #1
 80093da:	d09d      	beq.n	8009318 <_printf_i+0x15c>
 80093dc:	3501      	adds	r5, #1
 80093de:	68e3      	ldr	r3, [r4, #12]
 80093e0:	9903      	ldr	r1, [sp, #12]
 80093e2:	1a5b      	subs	r3, r3, r1
 80093e4:	42ab      	cmp	r3, r5
 80093e6:	dcf2      	bgt.n	80093ce <_printf_i+0x212>
 80093e8:	e7eb      	b.n	80093c2 <_printf_i+0x206>
 80093ea:	2500      	movs	r5, #0
 80093ec:	f104 0619 	add.w	r6, r4, #25
 80093f0:	e7f5      	b.n	80093de <_printf_i+0x222>
 80093f2:	bf00      	nop
 80093f4:	08009955 	.word	0x08009955
 80093f8:	08009966 	.word	0x08009966

080093fc <memmove>:
 80093fc:	4288      	cmp	r0, r1
 80093fe:	b510      	push	{r4, lr}
 8009400:	eb01 0402 	add.w	r4, r1, r2
 8009404:	d902      	bls.n	800940c <memmove+0x10>
 8009406:	4284      	cmp	r4, r0
 8009408:	4623      	mov	r3, r4
 800940a:	d807      	bhi.n	800941c <memmove+0x20>
 800940c:	1e43      	subs	r3, r0, #1
 800940e:	42a1      	cmp	r1, r4
 8009410:	d008      	beq.n	8009424 <memmove+0x28>
 8009412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800941a:	e7f8      	b.n	800940e <memmove+0x12>
 800941c:	4402      	add	r2, r0
 800941e:	4601      	mov	r1, r0
 8009420:	428a      	cmp	r2, r1
 8009422:	d100      	bne.n	8009426 <memmove+0x2a>
 8009424:	bd10      	pop	{r4, pc}
 8009426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800942a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800942e:	e7f7      	b.n	8009420 <memmove+0x24>

08009430 <_sbrk_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d06      	ldr	r5, [pc, #24]	@ (800944c <_sbrk_r+0x1c>)
 8009434:	2300      	movs	r3, #0
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	602b      	str	r3, [r5, #0]
 800943c:	f7f8 fc56 	bl	8001cec <_sbrk>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_sbrk_r+0x1a>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_sbrk_r+0x1a>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20001214 	.word	0x20001214

08009450 <_realloc_r>:
 8009450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009454:	4680      	mov	r8, r0
 8009456:	4615      	mov	r5, r2
 8009458:	460c      	mov	r4, r1
 800945a:	b921      	cbnz	r1, 8009466 <_realloc_r+0x16>
 800945c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009460:	4611      	mov	r1, r2
 8009462:	f7ff bc59 	b.w	8008d18 <_malloc_r>
 8009466:	b92a      	cbnz	r2, 8009474 <_realloc_r+0x24>
 8009468:	f7ff fbea 	bl	8008c40 <_free_r>
 800946c:	2400      	movs	r4, #0
 800946e:	4620      	mov	r0, r4
 8009470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009474:	f000 f81a 	bl	80094ac <_malloc_usable_size_r>
 8009478:	4285      	cmp	r5, r0
 800947a:	4606      	mov	r6, r0
 800947c:	d802      	bhi.n	8009484 <_realloc_r+0x34>
 800947e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009482:	d8f4      	bhi.n	800946e <_realloc_r+0x1e>
 8009484:	4629      	mov	r1, r5
 8009486:	4640      	mov	r0, r8
 8009488:	f7ff fc46 	bl	8008d18 <_malloc_r>
 800948c:	4607      	mov	r7, r0
 800948e:	2800      	cmp	r0, #0
 8009490:	d0ec      	beq.n	800946c <_realloc_r+0x1c>
 8009492:	42b5      	cmp	r5, r6
 8009494:	462a      	mov	r2, r5
 8009496:	4621      	mov	r1, r4
 8009498:	bf28      	it	cs
 800949a:	4632      	movcs	r2, r6
 800949c:	f7ff fbc2 	bl	8008c24 <memcpy>
 80094a0:	4621      	mov	r1, r4
 80094a2:	4640      	mov	r0, r8
 80094a4:	f7ff fbcc 	bl	8008c40 <_free_r>
 80094a8:	463c      	mov	r4, r7
 80094aa:	e7e0      	b.n	800946e <_realloc_r+0x1e>

080094ac <_malloc_usable_size_r>:
 80094ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b0:	1f18      	subs	r0, r3, #4
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	bfbc      	itt	lt
 80094b6:	580b      	ldrlt	r3, [r1, r0]
 80094b8:	18c0      	addlt	r0, r0, r3
 80094ba:	4770      	bx	lr

080094bc <_init>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	bf00      	nop
 80094c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c2:	bc08      	pop	{r3}
 80094c4:	469e      	mov	lr, r3
 80094c6:	4770      	bx	lr

080094c8 <_fini>:
 80094c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ca:	bf00      	nop
 80094cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ce:	bc08      	pop	{r3}
 80094d0:	469e      	mov	lr, r3
 80094d2:	4770      	bx	lr
